<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>内存模型</title>
    <link href="/2022/01/23/%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
    <url>/2022/01/23/%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="什么是JMM"><a href="#什么是JMM" class="headerlink" title="什么是JMM"></a>什么是JMM</h1><figure class="highlight mipsasm"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">JMM </span>即 <span class="hljs-keyword">Java </span>Memory Model，它定义了主存（共享内存）、工作内存（线程私有）抽象概念，底层对应着 CPU 寄存器、缓存、硬件内存、 CPU 指令优化等。<br></code></pre></td></tr></table></figure><h1 id="JMM主要体现在以下几个方面"><a href="#JMM主要体现在以下几个方面" class="headerlink" title="JMM主要体现在以下几个方面"></a>JMM主要体现在以下几个方面</h1><h2 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">保证指令不会受到线程上下文切换的影响<br></code></pre></td></tr></table></figure><h3 id="引例"><a href="#引例" class="headerlink" title="引例"></a>引例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Atomicity</span> </span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">static</span> Object object = <span class="hljs-keyword">new</span> Object();<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        Thread t1 = <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>            <span class="hljs-keyword">synchronized</span> (object) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i1 = <span class="hljs-number">0</span>; i1 &lt; <span class="hljs-number">50000</span>; i1++) &#123;<br>                    i++;<br>                &#125;<br>            &#125;<br>        &#125;);<br>        Thread t2 = <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>            <span class="hljs-keyword">synchronized</span> (object) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i1 = <span class="hljs-number">0</span>; i1 &lt; <span class="hljs-number">50000</span>; i1++) &#123;<br>                    i--;<br>                &#125;<br>            &#125;<br>        &#125;);<br>        t1.start();<br>        t2.start();<br>        t1.join();<br>        t2.join();<br>        System.out.println(i);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h3><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20220114133044894.png" alt="image-20220114133044894"></p><h2 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h2><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">保证指令不会受 <span class="hljs-meta">cpu</span> 缓存的影响<br></code></pre></td></tr></table></figure><h3 id="问题引例"><a href="#问题引例" class="headerlink" title="问题引例"></a>问题引例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Visibility</span> </span>&#123;<br><br>    <span class="hljs-keyword">static</span>  <span class="hljs-keyword">boolean</span> run = <span class="hljs-keyword">true</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        Thread t = <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>            <span class="hljs-keyword">while</span> (run) &#123;<br>                <span class="hljs-comment">// ...</span><br>            &#125;<br>        &#125;);<br>        t.start();<br>        Thread.sleep(<span class="hljs-number">1000</span>);<br>        run = <span class="hljs-keyword">false</span>; <span class="hljs-comment">// 代码最终并不会停下来，因为t线程要频繁从主内存中读取run的值，JIT编译器会将run的值缓存至自己工作内存中的高速缓存中，减少对主存中run的访问，提高效率</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="volatile-关键字"><a href="#volatile-关键字" class="headerlink" title="volatile 关键字"></a>volatile 关键字</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">它可以修饰成员变量和静态成员变量，用来避免线程从自己的工作缓存中查找变量的值，必须到主存中获取它的值，线程操作 <span class="hljs-keyword">volatile</span> 变量都是直接操作主存<br></code></pre></td></tr></table></figure><h3 id="理解-1"><a href="#理解-1" class="headerlink" title="理解"></a>理解</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">一个线程对 <span class="hljs-keyword">volatile</span> 变量的修改对另一个线程而言是可见的，不能保证原子性，仅用在一个写线程，多个读线程的情况。<br></code></pre></td></tr></table></figure><h3 id="关于-synchronized-关键字"><a href="#关于-synchronized-关键字" class="headerlink" title="关于 synchronized 关键字"></a>关于 synchronized 关键字</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">synchronized</span> 语句块既可以保证代码块的原子性，同时也能保证代码块内变量的可见性。但缺点是 <span class="hljs-keyword">synchronized</span> 属于重量级操作，性能相对较低<br></code></pre></td></tr></table></figure><h4 id="用例"><a href="#用例" class="headerlink" title="用例"></a>用例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Visibility</span> </span>&#123;<br><br>    <span class="hljs-keyword">static</span>  <span class="hljs-keyword">boolean</span> run = <span class="hljs-keyword">true</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        Thread t = <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>            <span class="hljs-keyword">while</span> (run) &#123;<br>                <span class="hljs-comment">// ...</span><br>                System.out.println(<span class="hljs-number">1</span>); <span class="hljs-comment">// 为什么使用sout语句也能将线程停下来？</span><br>            &#125;<br>        &#125;);<br>        t.start();<br>        Thread.sleep(<span class="hljs-number">1000</span>);<br>        run = <span class="hljs-keyword">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">println</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">synchronized</span> (<span class="hljs-keyword">this</span>) &#123; <span class="hljs-comment">// 因为sout语句内部使用了 synchronized 语句块</span><br>        print(x);<br>        newLine();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="有序性"><a href="#有序性" class="headerlink" title="有序性"></a>有序性</h2><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">保证指令不会受 <span class="hljs-meta">cpu</span> 指令并行优化的影响<br></code></pre></td></tr></table></figure><h3 id="引例-1"><a href="#引例-1" class="headerlink" title="引例"></a>引例</h3><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20220114150908935.png" alt="image-20220114150908935" style="zoom:50%;" /><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20220114150942383.png" alt="image-20220114150942383" style="zoom:50%;" /><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">出现 <span class="hljs-number">0</span> 的情况的现象叫做指令重排，是 <span class="hljs-keyword">JIT </span>编译器在运行时的一些优化，这个现象需要通过大量测试才能复现<br></code></pre></td></tr></table></figure><h3 id="解决指令重排"><a href="#解决指令重排" class="headerlink" title="解决指令重排"></a>解决指令重排</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">为 ready 参数添加 <span class="hljs-keyword">volatile</span> 关键字修饰，确保可见性，避免指令重排<br></code></pre></td></tr></table></figure><h3 id="理解-2"><a href="#理解-2" class="headerlink" title="理解"></a>理解</h3> <img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20220114152704260.png" alt="image-20220114152704260" style="zoom:50%;" />]]></content>
    
    
    <categories>
      
      <category>JVM</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>内存结构</title>
    <link href="/2022/01/23/%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84/"/>
    <url>/2022/01/23/%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20220115135430504.png" alt="image-20220115135430504"></p><h1 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h1><p>线程私有</p><p>程序计数器（Program Counter Register）是一块较小的内存空间，它可以看作是当前线程所执行的 字节码的<strong>行号指示器</strong>。</p><p>字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，它是程序控制流的指示器，分支、循环、跳转、异常处 理、线程恢复等基础功能都需要依赖这个计数器来完成。</p><h1 id="Java虚拟机栈"><a href="#Java虚拟机栈" class="headerlink" title="Java虚拟机栈"></a>Java虚拟机栈</h1><p>线程私有</p><p>虚拟机栈描述的是Java方法执行的线程内存模型：</p><p>每个方法被执行的时候，Java虚拟机都会同步创建一个栈帧（Stack Frame）用于存储局部变量表、操作数栈、动态连接、方法出口等信息。</p><p>每一个方法被调用直至执行完毕的过程，就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。</p><h1 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h1><p>线程私有</p><p>本地方法栈（Native Method Stacks）与虚拟机栈所发挥的作用是非常相似的，</p><p>其区别只是虚拟机 栈为虚拟机执行Java方法（也就是字节码）服务，而本地方法栈则是为虚拟机使用到的本地（Native） 方法服务。 </p><h1 id="Java堆"><a href="#Java堆" class="headerlink" title="Java堆"></a>Java堆</h1><p>线程共享，同时是垃圾收集器管理的内存区域</p><p>Java堆（Java Heap）是虚拟机所管理的内存中最大的一块。</p><p>此内存区域的唯一目的就是存放对象实例</p><h1 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h1><p>线程共享</p><p>存储已被虚拟机加载的类型信息、常量、静态变量、即时编译器编译后的代码缓存等数据</p><h2 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h2><p>存放编译期生成的各种字面量与符号引用，这部分内容将在类加载后存放到方法区的运行时常量池中。 </p>]]></content>
    
    
    <categories>
      
      <category>JVM</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>类加载机制</title>
    <link href="/2022/01/23/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/"/>
    <url>/2022/01/23/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20220115135430504.png" alt="image-20220115135430504"></p><h1 id="类加载的时机"><a href="#类加载的时机" class="headerlink" title="类加载的时机"></a>类加载的时机</h1><p>在对象的创建过程中，完成了检查阶段</p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20220115141354723.png" alt="image-20220115141354723" style="zoom: 67%;" /><ul><li>加载 （Loading）</li><li>验证（Verification）</li><li>准备（Preparation）</li><li>解析（Resolution）</li><li>初始化 （Initialization）</li><li>使用（Using）</li><li>卸载（Unloading）</li></ul><p>其中验证、准备、解析三个部分统称为连接（Linking）</p><p>其中加载、验证、准备、解析、初始化和卸载这五个阶段的顺序是确定的，类型的加载过程必须按照这种顺序按部就班地开始。</p><p>而解析阶段则不一定：它在某些情况下可以在初始化阶段之后再开始， 这是为了支持Java语言的运行时绑定特性（也称为动态绑定或晚期绑定）。</p><figure class="highlight"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs">请注意，这里笔者写的是 按部就班地“开始”，而不是按部就班地“进行”或按部就班地“完成”，强调这点是因为这些阶段通常都 是互相交叉地混合进行的，会在一个阶段执行的过程中调用、激活另一个阶段。<br><br>加载阶段与连接阶段的部分动作（如一部分字节码文件格式验证动作）是交叉进行的，加载阶段 尚未完成，连接阶段可能已经开始，但这些夹在加载阶段之中进行的动作，仍然属于连接阶段的一部 分，这两个阶段的开始时间仍然保持着固定的先后顺序。<br></code></pre></td></tr></table></figure><h1 id="类加载的过程"><a href="#类加载的过程" class="headerlink" title="类加载的过程"></a>类加载的过程</h1><h2 id="第一个阶段——加载"><a href="#第一个阶段——加载" class="headerlink" title="第一个阶段——加载"></a>第一个阶段——加载</h2><ul><li>1）通过一个<strong>类的全限定名</strong>来获取定义此类的<strong>二进制字节流</strong>。</li><li>2）将这个<strong>字节流所代表的静态存储结构</strong>转化为<strong>方法区的运行时数据结构</strong>。</li><li>3）在内存中生成一个<strong>代表这个类的java.lang.Class对象</strong>，作为方法区这个类的各种数据的<strong>访问入口</strong>。</li></ul><p><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200611205050.png" alt="img"></p><h2 id="第二个阶段——验证"><a href="#第二个阶段——验证" class="headerlink" title="第二个阶段——验证"></a>第二个阶段——验证</h2><p>验证是连接阶段的第一步，这一阶段的目的是<strong>保证Class文件的字节流中包含的信息符合《Java虚拟机规范》的全部约束要求</strong>，保证这些信息<strong>被当作代码运行后不会危害虚拟机自身的安全</strong></p><p>验证内容主要包含如下四点：</p><ul><li>文件格式验证</li><li>元数据验证</li><li>字节码验证</li><li>符号引用验证</li></ul><h2 id="第三个阶段——准备"><a href="#第三个阶段——准备" class="headerlink" title="第三个阶段——准备"></a>第三个阶段——准备</h2><p>准备阶段是正式为类中定义的变量（即静态变量，被static修饰的变量）<strong>分配内存</strong>并<strong>设置类变量初始值</strong>（对象创建过程的隐式创建）的阶段</p><p>假设一个类变量的定义为： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> value = <span class="hljs-number">123</span>;<br></code></pre></td></tr></table></figure><p>那变量value在准备阶段过后的初始值为0而不是123，因为这时尚未开始执行任何Java方法，而把 value赋值为123的 putstatic 指令是程序被编译后，存放于类构造器<clinit>()方法之中，所以把value赋值 为123的动作要到<strong>类的初始化阶段</strong>才会被执行</p><h2 id="第四个阶段——解析"><a href="#第四个阶段——解析" class="headerlink" title="第四个阶段——解析"></a>第四个阶段——解析</h2><p>解析阶段是Java虚拟机将<strong>常量池内的符号引用</strong>替换为<strong>直接引用</strong>的过程</p><h2 id="第五个阶段——初始化"><a href="#第五个阶段——初始化" class="headerlink" title="第五个阶段——初始化"></a>第五个阶段——初始化</h2><p>类的初始化阶段是类加载过程的最后一个步骤，初始化阶段就是执行类构造器<clinit>()方法的过程</p><p><clinit>()方法是由编译器自动收集类中的<strong>所有类变量的赋值动作</strong>和<strong>静态语句块（static{}块）中的语句</strong>合并产生的</p><h1 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h1><p>在类加载阶段中的“通过一个类的全限定名来获取描述该类的二进制字节流”这个动作放到Java虚拟机外部去实现，以便让应用程序自己决定如何去获取所需的类。</p><p>而实现这个动作的代码被称为“类加载器”（Class Loader）</p><h2 id="类与类加载器"><a href="#类与类加载器" class="headerlink" title="类与类加载器"></a>类与类加载器</h2><p>类加载器虽然只用于实现类的加载动作，但它在Java程序中起到的作用却<strong>远超类加载阶段</strong>。</p><p>对于 任意一个类，都必须由加载它的类加载器和这个类本身一起共同确立其在Java虚拟机中的唯一性，每一个类加载器，都拥有一个独立的类名称空间。</p><p>这句话表达地更通俗一些：<strong>比较两个类是否“相等”，只有在这两个类是由同一个类加载器加载的前提下才有意义，否则，即使这两个类来源于同一个 Class文件，被同一个Java虚拟机加载，只要加载它们的类加载器不同，那这两个类就必定不相等</strong></p><h2 id="双亲委派模型"><a href="#双亲委派模型" class="headerlink" title="双亲委派模型"></a>双亲委派模型</h2><p>站在Java虚拟机的角度来看，只存在两种不同的类加载器：一种是启动类加载器（Bootstrap Class Loader），另外一种就是其他所有 </p><p>的类加载器。</p><h3 id="启动类加载器"><a href="#启动类加载器" class="headerlink" title="启动类加载器"></a>启动类加载器</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">Bootstrap</span> <span class="hljs-keyword">Class</span> Loader<br><br>这个类加载器使用C++语言实现，是虚拟机的一部分。<br><br>负责加载存放在&lt;JAVA_HOME&gt;\lib目录，或者被-Xbootclasspath参数所指定的路径中存放的，而且是Java虚拟机能够识别的类库<br></code></pre></td></tr></table></figure><h3 id="其他所有的类加载器"><a href="#其他所有的类加载器" class="headerlink" title="其他所有的类加载器"></a>其他所有的类加载器</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">这些类加载器都由<span class="hljs-keyword">Java语言实现，独立存在于虚拟机外部，并且全都继承自抽象类 </span><span class="hljs-keyword">java.lang.ClassLoader</span><br></code></pre></td></tr></table></figure><h4 id="扩展类加载器"><a href="#扩展类加载器" class="headerlink" title="扩展类加载器"></a>扩展类加载器</h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">Extension </span>Class Loader<br><br>这个类加载器是在类sun.misc.Launcher$<span class="hljs-keyword">ExtClassLoader中以Java代码的形式实现的。</span><br><span class="hljs-keyword"></span><br>主要负责加载&lt;<span class="hljs-keyword">JAVA_HOME&gt;\lib\ext目录中，或者被java.ext.dirs系统变量所指定的路径中所有的类库。</span><br><span class="hljs-keyword"></span><br>顾名思义，它是一种<span class="hljs-keyword">Java系统类库的扩展机制。用户可以将具有通用性的类库存放至ext目录里来扩展Java </span>SE的功能<br></code></pre></td></tr></table></figure><h4 id="应用程序类加载器"><a href="#应用程序类加载器" class="headerlink" title="应用程序类加载器"></a>应用程序类加载器</h4><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cos">Application <span class="hljs-keyword">Class</span> Loader<br><br>这个类加载器是在类sun.misc.Launcher<span class="hljs-built_in">$AppClassLoader</span>中以Java代码的形式实现的。<br><br>主要负责加载用户类路径上所有的类库<br></code></pre></td></tr></table></figure><h3 id="互相配合"><a href="#互相配合" class="headerlink" title="互相配合"></a>互相配合</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">在<span class="hljs-keyword">JDK </span><span class="hljs-number">9</span>之前的<span class="hljs-keyword">Java应用都是由这三种类加载器互相配合来完成加载的，而各种类加载器之间的层次关系被称之为类加载器的“双亲委派模型”</span><br></code></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20201217213314510.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGV5YW5iYW8=,size_16,color_FFFFFF,t_70" alt="img" style="zoom: 40%;" /><h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的类加载器都是如此，因此所有的加载请求最终都应该传送到最顶层的启动类加载器中，只有当父加载器反馈自己无法完成这个加载请求（它的搜索范围中没有找到所需的类）时，子加载器才会尝试自己去完成加载。<br></code></pre></td></tr></table></figure><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">一个显而易见的好处就是Java中的类随着它的类加载器一起具备了一种带有优先级的层次关系。<br><br>例如类java.lang.<span class="hljs-built_in">Object</span>，它存放在rt.jar之中，无论哪一个类加载器要加载这个类，最终都是委派给处于模型最顶端的启动类加载器进行加载，因此<span class="hljs-built_in">Object</span>类在程序的各种类加载器环境中都能够保证是同一个类。<br><br>如果没有使用双亲委派模型，都由各个类加载器自行去加载的话，如果用户自己也编写了一个名为java.lang.<span class="hljs-built_in">Object</span>的类，并放在程序的ClassPath中，那系统中就会出现多个不同的<span class="hljs-built_in">Object</span>类，Java类型体系中最基础的行为也就无从保证，应用程序将会变得一片混乱。<br></code></pre></td></tr></table></figure><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">synchronized</span> Class&lt;?&gt; loadClass(String name, <span class="hljs-keyword">boolean</span> resolve) <span class="hljs-keyword">throws</span> ClassNotFoundException&#123;<br>    <span class="hljs-comment">// 首先，检查请求的类是否已经被加载过了</span><br>    Class c = findLoadedClass(name);<br>    <span class="hljs-keyword">if</span> (c == <span class="hljs-keyword">null</span>)&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (parent != <span class="hljs-keyword">null</span>) &#123;<br>                c = parent.loadClass(name, <span class="hljs-keyword">false</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                c = findBootstrapClassOrNull(name);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e)&#123;<br>            <span class="hljs-comment">// 如果父类加载器抛出ClassNotFoundException</span><br>            <span class="hljs-comment">// 说明父类加载器无法完成加载请求</span><br>        &#125;<br>        <span class="hljs-keyword">if</span> (c == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-comment">// 在父类加载器无法加载时</span><br>            <span class="hljs-comment">// 再调用本身的findClass方法来进行类加载</span><br>            c = findClass(name);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (resolve) &#123;<br>        resolveClass(c);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JVM</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>垃圾收集</title>
    <link href="/2022/01/23/%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86/"/>
    <url>/2022/01/23/%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="对象已死？"><a href="#对象已死？" class="headerlink" title="对象已死？"></a>对象已死？</h1><h2 id="引用计数算法"><a href="#引用计数算法" class="headerlink" title="引用计数算法"></a>引用计数算法</h2><figure class="highlight"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs">很多教科书判断对象是否存活的算法是这样的：<br><br>在对象中添加一个引用计数器，每当有一个地方引用它时，计数器值就加一；当引用失效时，计数器值就减一；任何时刻计数器为零的对象就是不可能再被使用的。<br></code></pre></td></tr></table></figure><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">引用计数算法（<span class="hljs-keyword">Reference</span> Counting）虽然占用了一些额外的内存空间来进行计数，但它的原理简单，判定效率也很高，在大多数情况下它都是一个不错的算法。<br></code></pre></td></tr></table></figure><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">这个看似简单的算法有很多例外情况要考虑，必须要配合大量额外处理才能保证正确地工作，譬如单纯的引用计数就很难解决对象之间相互循环引用的问题。<br></code></pre></td></tr></table></figure><h2 id="可达性分析算法"><a href="#可达性分析算法" class="headerlink" title="可达性分析算法"></a>可达性分析算法</h2><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mathematica">当前主流的商用程序语言（<span class="hljs-variable">Java</span>、<span class="hljs-built_in">C</span><span class="hljs-type">#</span>，上溯至前面提到的古老的<span class="hljs-variable">Lisp</span>）的内存管理子系统，都是通过可达性分析（<span class="hljs-variable">Reachability</span> <span class="hljs-variable">Analysis</span>）算法来判定对象是否存活的。<br><br>基本思路就是通过一系列称为“<span class="hljs-variable">GC</span> <span class="hljs-built_in">Roots</span>”的根对象作为起始节点集，从这些节点开始，根据引用关系向下搜索，搜索过程所走过的路径称为<br>“引用链”（<span class="hljs-variable">Reference</span> <span class="hljs-variable">Chain</span>），如果某个对象到<span class="hljs-variable">GC</span> <span class="hljs-built_in">Roots</span>间没有任何引用链相连，或者用图论的话来说就是从<span class="hljs-variable">GC</span> <span class="hljs-built_in">Roots</span>到这个对象不可达时，则证明此对象是不可能再被使用的。<br></code></pre></td></tr></table></figure><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20220116140237501.png" alt="image-20220116140237501"></p><h2 id="GC-Roots对象"><a href="#GC-Roots对象" class="headerlink" title="GC Roots对象"></a>GC Roots对象</h2><ul><li>在<strong>虚拟机栈</strong>（栈帧中的本地变量表）中引用的对象，譬如各个线程被调用的方法堆栈中使用到的参数、局部变量、临时变量等</li><li>方法区中<strong>类静态属性</strong>引用的对象，譬如Java类的引用类型静态变量</li><li>方法区中<strong>常量</strong>引用的对象，譬如字符串常量池（String Table）里的引用</li><li>本地方法栈中<strong>JNI（Native方法）</strong>引用的对象</li><li>Java<strong>虚拟机内部</strong>引用的对象，譬如基本数据类型对应的Class对象，常驻的异常对象，系统类加载器</li><li>所有被<strong>同步锁</strong>（synchronized关键字）持有的对象</li><li><strong>反应Java虚拟机内部情况</strong>的对象，譬如JMXBean、JVMTI中注册的回调、本地代码缓存等</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><ul><li>强引用，类似<strong>Object obj = new Object()<strong>这种引用关系，只要强引用关系存在，垃圾收集器就</strong>永远不会收掉被引用的对象</strong></li><li>软引用，有用，但非必须的对象。在系统将要<strong>发生内存溢出异常前</strong>，会把这些对象列进回收范围之中<strong>进行第二次回收</strong></li><li>弱引用，描述那些非必须对象，但是它的强度比软引用更弱一些，<strong>每次都会被垃圾收集器收集</strong></li><li>虚引用，最弱的一种引用关系，一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。唯一目的只是为了能在这个对象<strong>被收集器回收时收到一个系统通知</strong></li></ul><h2 id="生存还是死亡"><a href="#生存还是死亡" class="headerlink" title="生存还是死亡"></a>生存还是死亡</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs less">即使在可达性分析算法中判定为不可达的对象，也不是“非死不可”的，这时候它们暂时还处于“缓刑”阶段，要真正宣告一个对象死亡，至少要经历两次标记过程：<br><br>如果对象在进行可达性分析后发现没有与<span class="hljs-selector-tag">GC</span> <span class="hljs-selector-tag">Roots</span>相连接的引用链，那它将会被第一次标记，<br><br>随后进行一次筛选，筛选的条件是此对象是否有必要执行<span class="hljs-selector-tag">finalize</span>()方法。<br><br>假如对象没有覆盖<span class="hljs-selector-tag">finalize</span>()方法(无药可救)，或者<span class="hljs-selector-tag">finalize</span>()方法已经被虚拟机调用过，那么虚拟机将这两种情况都视为“没有必要执行”。<br></code></pre></td></tr></table></figure><h1 id="垃圾收集算法"><a href="#垃圾收集算法" class="headerlink" title="垃圾收集算法"></a>垃圾收集算法</h1><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">从如何判定对象消亡的角度出发，垃圾收集算法可以划分为“引用计数式垃圾收集”（ReferenceCounting <span class="hljs-built_in">GC</span>）和“追踪式垃圾收集”（Tracing <span class="hljs-built_in">GC</span>）两大类，这两类也常被称作“直接垃圾收集”和“间接垃圾收集”。<br><br>由于引用计数式垃圾收集算法在本书讨论到的主流Java虚拟机中均未涉及，所以我们暂不把它作为正文主要内容来讲解，本节介绍的所有算法均属于追踪式垃圾收集的范畴。<br></code></pre></td></tr></table></figure><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs powershell">部分收集（Partial <span class="hljs-built_in">GC</span>）：指目标不是完整收集整个Java堆的垃圾收集，其中又分为：<br><br>新生代收集（Minor <span class="hljs-built_in">GC</span>/Young <span class="hljs-built_in">GC</span>）：指目标只是新生代的垃圾收集。<br><br>老年代收集（Major <span class="hljs-built_in">GC</span>/Old <span class="hljs-built_in">GC</span>）：指目标只是老年代的垃圾收集。目前只有CMS收集器会有单独收集老年代的行为。另外请注意“Major <span class="hljs-built_in">GC</span>”这个说法现在有点混淆，在不同资料上常有不同所指，读者需按上下文区分到底是指老年代的收集还是整堆收集。<br><br>混合收集（Mixed <span class="hljs-built_in">GC</span>）：指目标是收集整个新生代以及部分老年代的垃圾收集。目前只有G1收集器会有这种行为。<br></code></pre></td></tr></table></figure><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lasso">整堆收集（<span class="hljs-literal">Full</span> GC）：收集整个Java堆和方法区的垃圾收集。<br></code></pre></td></tr></table></figure><h2 id="标记-清除"><a href="#标记-清除" class="headerlink" title="标记-清除"></a>标记-清除</h2><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20220116151303548.png" alt="image-20220116151303548" style="zoom: 50%;" /><h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">速度非常快<br></code></pre></td></tr></table></figure><h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-number">1</span>.是执行效率不稳定，如果<span class="hljs-keyword">Java堆中包含大量对象，而且其中大部分是需要被回收的，这时必须进行大量标记和清除的动作，导致标记和清除两个过程的执行效率都随对象数量增长而降低</span><br><span class="hljs-keyword"></span><br><span class="hljs-number">2</span>.容易产生内存碎片，标记、清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致当以后在程序运行过程中需要分配较大对象时无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。<br>比如上图中有一块较大的对象想存放，但是存放不下<br></code></pre></td></tr></table></figure><h2 id="标记-整理"><a href="#标记-整理" class="headerlink" title="标记-整理"></a>标记-整理</h2><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20220116151526306.png" alt="image-20220116151526306" style="zoom:50%;" /><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">老年代<br></code></pre></td></tr></table></figure><h3 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">没有内存碎片<br></code></pre></td></tr></table></figure><h3 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">添加了一步整理过程，需要移动对象，速度相对较慢<br></code></pre></td></tr></table></figure><h2 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h2><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20220116151753876.png" alt="image-20220116151753876"></p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20220116151804412.png" alt="image-20220116151804412"></p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20220116151814884.png" alt="image-20220116151814884"></p><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20220116151831573.png" alt="image-20220116151831573"></p><h3 id="使用场景-1"><a href="#使用场景-1" class="headerlink" title="使用场景"></a>使用场景</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">现在的商用Java虚拟机大多都优先采用了复制收集算法去回收新生代；但不适用于老年代，因为存活率高，会有较多的复制操作，效率将会降低<br></code></pre></td></tr></table></figure><h3 id="优点-3"><a href="#优点-3" class="headerlink" title="优点"></a>优点</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">不会产生内存碎片，速度也相对较快<br></code></pre></td></tr></table></figure><h3 id="缺点-3"><a href="#缺点-3" class="headerlink" title="缺点"></a>缺点</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">占用双倍的内存空间<br></code></pre></td></tr></table></figure><h1 id="分代收集"><a href="#分代收集" class="headerlink" title="分代收集"></a>分代收集</h1><h2 id="Java堆内存"><a href="#Java堆内存" class="headerlink" title="Java堆内存"></a>Java堆内存</h2><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20220116153223569.png" alt="image-20220116153223569" style="zoom:50%;" /><h2 id="新生代"><a href="#新生代" class="headerlink" title="新生代"></a>新生代</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">使用Minor <span class="hljs-built_in">GC</span>/Young <span class="hljs-built_in">GC</span>，复制算法<br></code></pre></td></tr></table></figure><h2 id="老年代"><a href="#老年代" class="headerlink" title="老年代"></a>老年代</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">使用Major <span class="hljs-built_in">GC</span>/Old <span class="hljs-built_in">GC</span>，标记-整理算法<br></code></pre></td></tr></table></figure><h1 id="经典垃圾收集器"><a href="#经典垃圾收集器" class="headerlink" title="经典垃圾收集器"></a>经典垃圾收集器</h1><h2 id="STW"><a href="#STW" class="headerlink" title="STW"></a>STW</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">“<span class="hljs-literal">Stop</span> The World”这个词语也许听起来很酷，但这项工作是由虚拟机在后台自动发起和自动完成的，在用户不可知、不可控的情况下把用户的正常工作的线程全部停掉，这对很多应用来说都是不能接受的。<br></code></pre></td></tr></table></figure><h2 id="Serial收集器"><a href="#Serial收集器" class="headerlink" title="Serial收集器"></a>Serial收集器</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-built_in">Serial</span>收集器是最基础、历史最悠久的收集器，曾经（在JDK <span class="hljs-number">1.3</span><span class="hljs-number">.1</span>之前）是HotSpot虚拟机新生代收集器的唯一选择。<br><br>是一个单线程工作的收集器，但它的“单线程”的意义并不仅仅是说明它只会使用一个处理器或一条收集线程去完成垃圾收集工作，更重要的是强调在它进行垃圾收集时，必须暂停其他所有工作线程，直到它收集结束。<br><br>写到这里，笔者似乎已经把<span class="hljs-built_in">Serial</span>收集器描述成一个最早出现，但目前已经老而无用，食之无味，弃之可惜的“鸡肋”了，但事实上，迄今为止，它依然是HotSpot虚拟机运行在客户端模式下的默认新生代收集器，有着优于其他收集器的地方，那就是简单而高效（与其他收集器的单线程相比），对于内存资源受限的环境，它是所有收集器里额外内存消耗（Memory Footprint）最小的<br><br>在用户桌面的应用场景以及近年来流行的部分微服务应用中，分配给虚拟机管理的内存一般来说并不会特别大，收集几十兆甚至一两百兆的新生代（仅仅是指新生代使用的内存，桌面应用甚少超过这个容量），垃圾收集的停顿时间完全可以控制在十几、几十毫秒，最多一百多毫秒以内，只要不是频繁发生收集，这点停顿时间对许多用户来说是完全可以接受的。所以，<span class="hljs-built_in">Serial</span>收集器对于运行在客户端模式下的虚拟机来说是一个很好的选择。<br></code></pre></td></tr></table></figure><h3 id="运行示意图"><a href="#运行示意图" class="headerlink" title="运行示意图"></a>运行示意图</h3><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20220116154120409.png" alt="image-20220116154120409"></p><h2 id="Serial-Old收集器"><a href="#Serial-Old收集器" class="headerlink" title="Serial Old收集器"></a>Serial Old收集器</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-type">Serial</span> <span class="hljs-built_in">Old</span>是<span class="hljs-type">Serial</span>收集器的老年代版本，它同样是一个单线程收集器，使用标记-整理算法。<br></code></pre></td></tr></table></figure><h3 id="运行示意图-1"><a href="#运行示意图-1" class="headerlink" title="运行示意图"></a>运行示意图</h3><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20220116160108978.png" alt="image-20220116160108978"></p><h2 id="ParNew收集器"><a href="#ParNew收集器" class="headerlink" title="ParNew收集器"></a>ParNew收集器</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arduino">ParNew收集器实质上是<span class="hljs-built_in">Serial</span>收集器的多线程并行版本<br><br>ParNew收集器除了支持多线程并行收集之外，其他与<span class="hljs-built_in">Serial</span>收集器相比并没有太多创新之处，但它却是不少运行在服务端模式下的HotSpot虚拟机，尤其是JDK <span class="hljs-number">7</span>之前的遗留系统中首选的新生代收集器，其中有一个与功能、性能无关但其实很重要的原因是：<br><br>除了<span class="hljs-built_in">Serial</span>收集器外，目前只有它能与CMS收集器配合工作。<br><br>自JDK <span class="hljs-number">9</span>开始，ParNew加CMS收集器的组合就不再是官方 推荐的服务端模式下的收集器解决方案了<br></code></pre></td></tr></table></figure><h3 id="运行示意图-2"><a href="#运行示意图-2" class="headerlink" title="运行示意图"></a>运行示意图</h3><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20220116154549099.png" alt="image-20220116154549099"></p><h2 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h2><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs fortran">并行和并发都是并发编程中的专业名词，在谈论垃圾收集器的上下文语境中，它们可以理解为：<br><br>并行（Parallel）：并行描述的是多条垃圾收集器线程之间的关系，说明同一时间有多条这样的线程在协同工作，通常默认此时用户线程是处于等待状态。<br><br>并发（<span class="hljs-keyword">Concurrent</span>）：并发描述的是垃圾收集器线程与用户线程之间的关系，说明同一时间垃圾收集器线程与用户线程都在运行。<br>由于用户线程并未被冻结，所以程序仍然能响应服务请求，但由于垃圾收集器线程占用了一部分系统资源，此时应用程序的处理的吞吐量将受到一定影响。<br></code></pre></td></tr></table></figure><h2 id="Parallel-Scavenge收集器"><a href="#Parallel-Scavenge收集器" class="headerlink" title="Parallel Scavenge收集器"></a>Parallel Scavenge收集器</h2><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs oxygene"><span class="hljs-keyword">Parallel</span> Scavenge收集器也是一款新生代收集器，它同样是基于标记-复制算法实现的收集器，也是能够并行收集的多线程收集器……<br><span class="hljs-keyword">Parallel</span> Scavenge的诸多特性从表面上看和ParNew非常相似<br></code></pre></td></tr></table></figure><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">达到一个可控制的吞吐量，所谓吞吐量就是处理器用于运行用户代码的时间与处理器总消耗时间的比值<br></code></pre></td></tr></table></figure><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20220116155443385.png" alt="image-20220116155443385"></p><h3 id="参数设置"><a href="#参数设置" class="headerlink" title="参数设置"></a>参数设置</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs">控制最大垃圾收集停顿时间的-XX：MaxGCPauseMillis<br><br>直接设置吞吐量大小的-XX：GCTimeRatio<br><br>自适应的调节策略-XX：+UseAdaptiveSizePolicy<br></code></pre></td></tr></table></figure><h2 id="Parallel-Old收集器"><a href="#Parallel-Old收集器" class="headerlink" title="Parallel Old收集器"></a>Parallel Old收集器</h2><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs oxygene"><span class="hljs-keyword">Parallel</span> <span class="hljs-keyword">Old</span>是<span class="hljs-keyword">Parallel</span> Scavenge收集器的老年代版本，支持多线程并发收集，基于标记-整理算法实现。<br></code></pre></td></tr></table></figure><h3 id="运行示意图-3"><a href="#运行示意图-3" class="headerlink" title="运行示意图"></a>运行示意图</h3><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20220116160223688.png" alt="image-20220116160223688"></p><h2 id="CMS收集器"><a href="#CMS收集器" class="headerlink" title="CMS收集器"></a>CMS收集器</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">CMS（Concurrent <span class="hljs-selector-tag">Mark</span> Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器，基于标记-清除算法实现<br><br>目前很大一部分的Java应用集中在互联网网站或者基于浏览器的<span class="hljs-selector-tag">B</span>/S系统的服务端上，这类应用通常都会较为 关注服务的响应速度，希望系统停顿时间尽可能短，以给用户带来良好的交互体验。<br></code></pre></td></tr></table></figure><h3 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">以获取最短回收停顿时间为目标的收集器<br></code></pre></td></tr></table></figure><h3 id="运行过程"><a href="#运行过程" class="headerlink" title="运行过程"></a>运行过程</h3><ul><li>初始标记</li></ul><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica">会触发<span class="hljs-variable">STW</span>，仅仅只是标记一下<span class="hljs-variable">GC</span> <span class="hljs-built_in">Roots</span>能直接关联到的对象，速度很快<br></code></pre></td></tr></table></figure><ul><li>并发标记</li></ul><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica">从<span class="hljs-variable">GC</span> <span class="hljs-built_in">Roots</span>的直接关联对象开始遍历整个对象图的过程，这个过程耗时较长但是不需要停顿用户线程，可以与垃圾收集线程一起并发运行<br></code></pre></td></tr></table></figure><ul><li>重新标记</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">会触发STW，是为了修正并发标记期间，因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录（详见3.4.6节中关于增量更新的讲解），这个阶段的停顿时间通常会比初始标记阶段稍长一些，但也远比并发标记阶段的时间短<br></code></pre></td></tr></table></figure><ul><li>并发清除</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">清理删除掉标记阶段判断的已经死亡的对象，由于不需要移动存活对象，所以这个阶段也是可以与用户线程同时并发的<br></code></pre></td></tr></table></figure><h3 id="运行示意图-4"><a href="#运行示意图-4" class="headerlink" title="运行示意图"></a>运行示意图</h3><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20220116161932917.png" alt="image-20220116161932917"></p><h3 id="缺点-4"><a href="#缺点-4" class="headerlink" title="缺点"></a>缺点</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> CMS收集器对处理器资源非常敏感。<br><br><span class="hljs-bullet">2.</span> CMS收集器无法处理“浮动垃圾”（Floating Garbage）<br><br><span class="hljs-bullet">3.</span> CMS是一款基于“标记-清除”算法实现的收集器，缺点非常明显，一是不稳定，二是有垃圾碎片<br></code></pre></td></tr></table></figure><h2 id="Garbage-First收集器"><a href="#Garbage-First收集器" class="headerlink" title="Garbage First收集器"></a>Garbage First收集器</h2><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">Garbage</span> <span class="hljs-built_in">First</span>（简称<span class="hljs-variable">G1</span>）收集器是垃圾收集器技术发展历史上的里程碑式的成果，它开创了收集器面向局部收集的设计思路和基于<span class="hljs-built_in">Region</span>的内存布局形式。<br><br><span class="hljs-variable">G1</span>是一款主要面向服务端应用的垃圾收集器。<br></code></pre></td></tr></table></figure><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mathematica">同时注重吞吐量和低延迟，默认暂停目标 <span class="hljs-number">200</span><span class="hljs-variable">ms</span><br>超大堆内存，会将堆划分为多个大小相等的<span class="hljs-built_in">Region</span><br>整体上是标记<span class="hljs-operator">+</span>整理算法，两个区域之间是复制算法<br></code></pre></td></tr></table></figure><h3 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">首先要有一个思想上的改变，在G1收集器出现之前的所有 其他收集器，包括CMS在内，垃圾收集的目标范围要么是整个新生代（Minor <span class="hljs-built_in">GC</span>），要么就是整个老年代（Major <span class="hljs-built_in">GC</span>），再要么就是整个Java堆（Full <span class="hljs-built_in">GC</span>）。<br><br>而G1跳出了这个樊笼，它可以面向堆内存任何部分来组成回收集（Collection <span class="hljs-built_in">Set</span>，一般简称CSet）进行回收，衡量标准不再是它属于哪个分代，而 是哪块内存中存放的垃圾数量最多，回收收益最大，这就是G1收集器的Mixed <span class="hljs-built_in">GC</span>模式。<br></code></pre></td></tr></table></figure><h3 id="TAMS"><a href="#TAMS" class="headerlink" title="TAMS"></a>TAMS</h3><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">G1</span>为每一个<span class="hljs-built_in">Region</span>设计了两个名为<span class="hljs-variable">TAMS</span>（<span class="hljs-built_in">Top</span> <span class="hljs-variable">at</span> <span class="hljs-variable">Mark</span> <span class="hljs-variable">Start</span>）的指针，把<span class="hljs-built_in">Region</span>中的一部分空间划分出来用于并发回收过程中的新对象分配，并发回收时新分配的对象地址都必须要在这两个指针位置以上。<br></code></pre></td></tr></table></figure><h3 id="SATB"><a href="#SATB" class="headerlink" title="SATB"></a>SATB</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">原始快照<br></code></pre></td></tr></table></figure><h3 id="运行过程-1"><a href="#运行过程-1" class="headerlink" title="运行过程"></a>运行过程</h3><ul><li>初始标记</li></ul><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica">会触发<span class="hljs-variable">STW</span>，仅仅只是标记一下<span class="hljs-variable">GC</span> <span class="hljs-built_in">Roots</span>能直接关联到的对象，并且修改<span class="hljs-variable">TAMS</span>指针的值，让下一阶段用户线程并发运行时，能正确地在可用的<span class="hljs-built_in">Region</span>中分配新对象。<br></code></pre></td></tr></table></figure><ul><li>并发标记</li></ul><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica">从<span class="hljs-variable">GC</span> <span class="hljs-built_in">Root</span>开始对堆中对象进行可达性分析，递归扫描整个堆里的对象图，找出要回收的对象，这阶段耗时较长，但可与用户程序并发执行。<br></code></pre></td></tr></table></figure><ul><li>最终标记</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">会触发STW，用于处理并发阶段结束后仍遗留下来的最后那少量的SATB记录。<br></code></pre></td></tr></table></figure><ul><li>筛选回收</li></ul><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica">会触发<span class="hljs-variable">STW</span>，负责更新<span class="hljs-built_in">Region</span>的统计数据，对各个<span class="hljs-built_in">Region</span>的回收价值和成本进行排序，根据用户所期望的停顿时间来制定回收计划，可以自由选择任意多个<span class="hljs-built_in">Region</span> 构成回收集，然后把决定回收的那一部分<span class="hljs-built_in">Region</span>的存活对象复制到空的<span class="hljs-built_in">Region</span>中，再清理掉整个旧<span class="hljs-built_in">Region</span>的全部空间。<br></code></pre></td></tr></table></figure><h3 id="运行示意图-5"><a href="#运行示意图-5" class="headerlink" title="运行示意图"></a>运行示意图</h3><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20220116164950814.png" alt="image-20220116164950814"></p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20220116170208884.png" alt="image-20220116170208884" style="zoom:50%;" /><h4 id="Young-Collection"><a href="#Young-Collection" class="headerlink" title="Young Collection"></a>Young Collection</h4><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20220116170446228.png" alt="image-20220116170446228" style="zoom:33%;" /><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20220116170502125.png" alt="image-20220116170502125" style="zoom:33%;" /><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20220116170513803.png" alt="image-20220116170513803" style="zoom:33%;" /><h4 id="Young-Collection-Concurrent-Mark"><a href="#Young-Collection-Concurrent-Mark" class="headerlink" title="Young Collection + Concurrent Mark"></a>Young Collection + Concurrent Mark</h4><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20220116170629991.png" alt="image-20220116170629991" style="zoom:33%;" /><h4 id="Mixed-Collection"><a href="#Mixed-Collection" class="headerlink" title="Mixed Collection"></a>Mixed Collection</h4><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20220116170818400.png" alt="image-20220116170818400" style="zoom:33%;" /><h3 id="相关参数"><a href="#相关参数" class="headerlink" title="相关参数"></a>相关参数</h3><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-XX: +UseG1GC</span><br><span class="hljs-deletion">-xx: G1HeapRegionSize = size</span><br><span class="hljs-deletion">-xx: MaxGCPauseMillis = time</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JVM</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>对象的创建过程</title>
    <link href="/2022/01/23/%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA%E8%BF%87%E7%A8%8B/"/>
    <url>/2022/01/23/%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA%E8%BF%87%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="一、检查"><a href="#一、检查" class="headerlink" title="一、检查"></a>一、检查</h1><figure class="highlight"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs">1.检查指令的参数是否能在常量池中定位到一个类的符号引用<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">2.检查这个符号引用代表的类是否已被加载、解析和初始化过<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">3.类加载检查是否符合《Java虚拟机规范》的全部约束要求<br></code></pre></td></tr></table></figure><h1 id="二、分配内存"><a href="#二、分配内存" class="headerlink" title="二、分配内存"></a>二、分配内存</h1><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-number">1</span>.选择分配方式。<span class="hljs-keyword">Java堆中的内存如果是绝对规整的，将会采用“指针碰撞”的分配方式；</span><br><span class="hljs-keyword"></span>反之采用“空闲列表”的分配方式。而<span class="hljs-keyword">Java堆中的内存是否规整又采用的垃圾收集器是否带有空间压缩整理的能力决定。</span><br><span class="hljs-keyword"></span><br>因此使用Serial、ParNew等带压缩整理过程的收集器时，系统采用的分配算法是指针碰撞，既简单又高校。<br>使用CMS这种基于清除算法的收集器时，采用比较复杂的空闲列表来分配内存<br><br><span class="hljs-number">2</span>.因为创建对象是虚拟机中非常频繁的行为，要解决线程问题。虚拟机提供了两种解决方案，一种是采用CAS配上失败重试的方式保证更新操作的原子性；另一种是为每个线程在<span class="hljs-keyword">Java堆中预先分配一块内存，称为本地线程分配缓存(Thread </span>Local Allocation <span class="hljs-keyword">Buffer, </span>TLAB)<br></code></pre></td></tr></table></figure><h1 id="三、初始化"><a href="#三、初始化" class="headerlink" title="三、初始化"></a>三、初始化</h1><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>.隐式初始化。虚拟机将分配到不包括对象头在内的内存空间初始化为<span class="hljs-number">0</span>，如果这分配内存时采用TLAB解决线程安全问题，那么这一步会提前至TLAB分配时顺便进行。<br><br><span class="hljs-attribute">2</span>.显示初始化。虚拟机为对象头进行必要的设置，例如这个对象是哪个类的实例、如何才能找到类的元数据信息、对象的哈希码、对象的GC分代年龄等信息。从虚拟机的视角来看，一个新的对象已经产生了。<br><br><span class="hljs-attribute">3</span>.执行&lt;init&gt;()方法，按照开发者的意愿对对象进行初始化，此时一个真正可用的对象才算完全被构造出来。<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JVM</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
