<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Kafka 消费者</title>
    <link href="/2022/07/05/Kafka/%E6%B6%88%E8%B4%B9%E8%80%85/"/>
    <url>/2022/07/05/Kafka/%E6%B6%88%E8%B4%B9%E8%80%85/</url>
    
    <content type="html"><![CDATA[<h1 id="消费方式"><a href="#消费方式" class="headerlink" title="消费方式"></a>消费方式</h1><p><img src="/image/image-20220912224415360-16629938638531.png" alt="kafka 消费方式"></p><h1 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h1><h2 id="总体流程"><a href="#总体流程" class="headerlink" title="总体流程"></a>总体流程</h2><p> <img src="/image/image-20220912224819282.png" alt="kafka 消费者工作流程"></p><h2 id="消费者组流程"><a href="#消费者组流程" class="headerlink" title="消费者组流程"></a>消费者组流程</h2><p>消费者组：由多个 consumer （允许1个）组成，其条件是所有消费者的 groupid 相同，因为默认情况下定义消费者时都需要输入 groupid，即便不输入 kafka 内部也会分配一个 groupid</p><ul><li><strong>消费者组内的每个消费者负责消费不同分区的数据，一个分区只能由一个组内的一个消费者消费</strong></li><li><strong>消费者之间互不影响。</strong>所有的消费者都属于某个消费者组，即消费者组是逻辑上的一个订阅者</li><li>如果消费者组中有更多的消费者，超过了主题分区的数量，那么<strong>多出来的一部分消费者就会闲置，不会接收任何消息</strong></li></ul><h3 id="初始化流程"><a href="#初始化流程" class="headerlink" title="初始化流程"></a>初始化流程</h3><p>corrdinator：辅助实现消费者组的初始化和分区的分配</p><p>选择方式为：groupid 的 hashcode 值 % 50 （__consumer_offsets 的分区数量，默认是 50）</p><p><img src="/image/image-20220912231454015.png" alt="kafka 消费者初始化流程"></p><h3 id="工作流程-1"><a href="#工作流程-1" class="headerlink" title="工作流程"></a>工作流程</h3><p><img src="/image/image-20220912233135480.png" alt="kafka 消费者工作流程"></p>]]></content>
    
    
    <categories>
      
      <category>Kafka</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Kafka Broker</title>
    <link href="/2022/07/04/Kafka/Broker/"/>
    <url>/2022/07/04/Kafka/Broker/</url>
    
    <content type="html"><![CDATA[<h1 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h1><p><img src="/image/image-20220912145120311-16629655036061.png" alt="Kafka Broker 工作流程"></p><h1 id="副本"><a href="#副本" class="headerlink" title="副本"></a>副本</h1><h2 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h2><p>（1）Kafka 副本作用：提高数据可靠性。</p><p>（2）Kafka 默认副本 1 个，生产环境一般配置为 2 个，保证数据可靠性；太多副本会 增加磁盘存储空间，增加网络上数据传输，降低效率。</p><p>（3）Kafka 中副本分为：Leader 和 Follower。Kafka 生产者只会把数据发往 Leader， 然后 Follower 找 Leader 进行同步数据。 </p><p>（4）Kafka 分区中的所有副本统称为 AR（Assigned Repllicas）。</p><p><strong>AR = ISR + OSR</strong></p><p><strong>ISR</strong>，表示和 Leader 保持同步的 Follower 集合。如果 Follower 长时间未向 Leader 发送通信请求或同步数据，则该 Follower 将被踢出 ISR。该时间阈值由 <code>replica.lag.time.max.ms</code> 参数设定，默认 30s。Leader 发生故障之后，就会从 ISR 中选举新的 Leader。</p><p><strong>OSR</strong>，表示 Follower 与 Leader 副本同步时，延迟过多的副本。</p><h2 id="Leader-选举流程"><a href="#Leader-选举流程" class="headerlink" title="Leader 选举流程"></a>Leader 选举流程</h2><p>Kafka 集群中有一个 broker 的 Controller 会被选举为 Controller Leader，负责管理集群 broker 的上下线，所有 topic 的分区副本分配和 Leader 选举等工作。</p><p>Controller 的信息同步工作是依赖于 Zookeeper 的。</p><p><img src="/image/image-20220912145120311-16629655036061.png" alt="Leader 选举流程"></p><h2 id="故障处理细节"><a href="#故障处理细节" class="headerlink" title="故障处理细节"></a>故障处理细节</h2><p><strong>LEO （Log End Offset）：</strong>每个副本的最后一个 offset，LEO 其实就算最新的 offset + 1</p><p> <strong>HW （Hign Watermark）：</strong>所有副本中最小的 LE O</p><h3 id="Follower"><a href="#Follower" class="headerlink" title="Follower"></a>Follower</h3><p><img src="/image/image-20220912151136178-16629667005693-16629667032135.png" alt="Follower 故障处理细节"></p><p><img src="/image/image-20220912151336189.png" alt="Follower 故障处理流程"></p><h3 id="Leader"><a href="#Leader" class="headerlink" title="Leader"></a>Leader</h3><p><img src="/image/image-20220912151523483.png" alt="Leader 故障处理流程"></p><h1 id="文件存储机制"><a href="#文件存储机制" class="headerlink" title="文件存储机制"></a>文件存储机制</h1><p><img src="/image/image-20220912220858916.png" alt="kafka 文件存储机制"></p><p><strong>注意：</strong> </p><ul><li>.index 为稀疏索引，大约每往 log 文件写入 4kb 数据时，会往 index 文件写入一条索引。参数 <code>log.index.interval.bytes</code> 默认是 4kb</li><li>index 文件中保存的 offset 为 相对 offset，这样能确保 offset 的值所占空间不会过大，因此能将 offset 的值控制在固定大小</li></ul><h1 id="高校读写数据"><a href="#高校读写数据" class="headerlink" title="高校读写数据"></a>高校读写数据</h1><p><strong>原因：</strong></p><ul><li><p>Kafka 本身是分布式集群，可以采用分区技术，并行度高</p></li><li><p>读数据采用稀疏索引，可以快速定位要消费的数据</p></li><li><p>顺序写磁盘</p></li><li><div class="code-wrapper"><pre><code class="hljs">官网有数据表明，顺序写能到 600M/s而随机只有 100K/s之所以快，是其省去了大量磁头寻址的时间</code></pre></div></li><li><p>零拷贝：Kafka 的数据加工处理操作交由 Kafka 生产者 和 Kafka 消费者处理。 Kafka Broker 应用层不关心存储的数据，所以就不用走应用层，传输效率高</p></li><li><p>页缓存：Kafka 重度依赖底层操作系统提供的 PageCache 功能。当上层有写操作时，操作系统只是将数据写入 PageCache 中。当读操作发生时，先从 PageCache 中查找，找不到再去磁盘读取。实际上 PageCache 是把尽可能多的空闲内存当作了磁盘缓存来使用</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Kafka</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Kafka生产者</title>
    <link href="/2022/07/03/Kafka/%E7%94%9F%E4%BA%A7%E8%80%85/"/>
    <url>/2022/07/03/Kafka/%E7%94%9F%E4%BA%A7%E8%80%85/</url>
    
    <content type="html"><![CDATA[<h1 id="一、消息发送"><a href="#一、消息发送" class="headerlink" title="一、消息发送"></a>一、消息发送</h1><p><img src="/image/image-20220912142739437-16629640633421.png" alt="kafka图片"></p><h2 id="1-发送原理"><a href="#1-发送原理" class="headerlink" title="1. 发送原理"></a>1. 发送原理</h2><p>在消息发送的过程中，涉及两个线程</p><ul><li><code>main</code> 线程</li></ul><p>​    创建双端队列 <code>RecordAccumulator</code>（默认大小 32 M），并将消息发送到 <code>RecordAccumulator</code></p><ul><li> <code>sender</code>线程</li></ul><p>​    不断地从 <code>RecordAccumulator</code> 中拉取消息发送到 <code>Kafka Broker</code></p><p><img src="/image/image-20220703203532125.png" alt="kafka生产者发送流程图"></p><p><code>ISR</code> = 与 leader 保持正常通讯的节点</p><p>也就是为和 <code>Leader</code> 保持同步数据的所有副本集合</p><h2 id="2-异步发送-API"><a href="#2-异步发送-API" class="headerlink" title="2. 异步发送 API"></a>2. 异步发送 API</h2><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Producer</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 1. 创建 kafka 生产者的配置对象</span><br>        Properties properties = <span class="hljs-keyword">new</span> Properties();<br>        <span class="hljs-comment">// 2. 给 kafka 配置对象添加配置信息：bootstrap.server</span><br>        properties.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, <span class="hljs-string">&quot;ip:port&quot;</span>);<br>        <span class="hljs-comment">// 3. key, value 序列化</span><br>        properties.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG,<br>                <span class="hljs-string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);<br>        properties.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG,<br>                <span class="hljs-string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);<br>        <span class="hljs-comment">// 4. 创建 kafka 生产者对象</span><br>        KafkaProducer&lt;String, String&gt; kafkaProducer = <span class="hljs-keyword">new</span> KafkaProducer&lt;&gt;(properties);<br>        <span class="hljs-comment">// 5. 调用 send 方法，进行测试</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            kafkaProducer.send(<span class="hljs-keyword">new</span> ProducerRecord&lt;&gt;(<span class="hljs-string">&quot;first&quot;</span>, <span class="hljs-string">&quot;rovingsea&quot;</span> + i));<br>        &#125;<br>        <span class="hljs-comment">// 6. 关闭资源</span><br>        kafkaProducer.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-同步发送-API"><a href="#3-同步发送-API" class="headerlink" title="3. 同步发送 API"></a>3. 同步发送 API</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Producer</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException </span>&#123;<br>        <span class="hljs-comment">// 1. 创建 kafka 生产者的配置对象</span><br>        Properties properties = <span class="hljs-keyword">new</span> Properties();<br>        <span class="hljs-comment">// 2. 给 kafka 配置对象添加配置信息：bootstrap.server</span><br>        properties.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, <span class="hljs-string">&quot;ip:port&quot;</span>);<br>        <span class="hljs-comment">// 3. key, value 序列化</span><br>        properties.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG,<br>                <span class="hljs-string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);<br>        properties.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG,<br>                <span class="hljs-string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);<br>        <span class="hljs-comment">// 4. 创建 kafka 生产者对象</span><br>        KafkaProducer&lt;String, String&gt; kafkaProducer = <span class="hljs-keyword">new</span> KafkaProducer&lt;&gt;(properties);<br>        <span class="hljs-comment">// 5. 调用 send 方法，进行测试</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            kafkaProducer.send(<span class="hljs-keyword">new</span> ProducerRecord&lt;&gt;(<span class="hljs-string">&quot;first&quot;</span>, <span class="hljs-string">&quot;rovingsea&quot;</span> + i)).get();<br>        &#125;<br>        <span class="hljs-comment">// 6. 关闭资源</span><br>        kafkaProducer.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-回调发送-API"><a href="#4-回调发送-API" class="headerlink" title="4. 回调发送 API"></a>4. 回调发送 API</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProducerCallback</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        <span class="hljs-comment">// 1. 创建 kafka 生产者的配置对象</span><br>        Properties properties = <span class="hljs-keyword">new</span> Properties();<br>        <span class="hljs-comment">// 2. 给 kafka 配置对象添加配置信息：bootstrap.server</span><br>        properties.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, <span class="hljs-string">&quot;ip:port&quot;</span>);<br>        <span class="hljs-comment">// 3. key, value 序列化</span><br>        properties.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG,<br>                StringSerializer.class.getName());<br>        properties.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG,<br>                StringSerializer.class.getName());<br>        <span class="hljs-comment">// 4. 创建 kafka 生产者对象</span><br>        KafkaProducer&lt;String, String&gt; kafkaProducer = <span class="hljs-keyword">new</span> KafkaProducer&lt;&gt;(properties);<br>        <span class="hljs-comment">// 5. 调用 send 方法，进行测试</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            kafkaProducer.send(<span class="hljs-keyword">new</span> ProducerRecord&lt;&gt;(<span class="hljs-string">&quot;first&quot;</span>, <span class="hljs-string">&quot;rovingsea&quot;</span> + i), <span class="hljs-keyword">new</span> Callback() &#123;<br>                <span class="hljs-comment">// 该方法在 Producer 收到 ack 时调用，为异步调用</span><br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCompletion</span><span class="hljs-params">(RecordMetadata recordMetadata, Exception e)</span> </span>&#123;<br>                    <span class="hljs-keyword">if</span> (e == <span class="hljs-keyword">null</span>) &#123;<br>                        System.out.println(<span class="hljs-string">&quot;主题：&quot;</span> + recordMetadata.topic() + <span class="hljs-string">&quot;-&gt;&quot;</span> + <span class="hljs-string">&quot;分区&quot;</span> + recordMetadata.partition());;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        e.printStackTrace();<br>                    &#125;<br>                &#125;<br>            &#125;);<br>            <span class="hljs-comment">// 延迟一会看到数据发往不同分区</span><br>            TimeUnit.SECONDS.sleep(<span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-comment">// 6. 关闭资源</span><br>        kafkaProducer.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="二、分区"><a href="#二、分区" class="headerlink" title="二、分区"></a>二、分区</h1><h2 id="1-好处"><a href="#1-好处" class="headerlink" title="1. 好处"></a>1. 好处</h2><ul><li>合理使用存储资源，从而达到负载均衡地效果</li><li>提高并行度，生产者可以分区发送数据；消费者可以分区消费数据</li></ul><h2 id="2-策略"><a href="#2-策略" class="headerlink" title="2. 策略"></a>2. 策略</h2><p><img src="/image/image-20220703205641136.png" alt="分区策略"></p><h2 id="3-自定义策略"><a href="#3-自定义策略" class="headerlink" title="3. 自定义策略"></a>3. 自定义策略</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 例如需要将包含rovingsea的value字段专门发送到0号分区</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> rovingsea</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DivPartition</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Partitioner</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">partition</span><span class="hljs-params">(String topic, Object key, <span class="hljs-keyword">byte</span>[] keyBytes, Object value, <span class="hljs-keyword">byte</span>[] valueBytes, Cluster cluster)</span> </span>&#123;<br>        String msgValues = value.toString();<br>        <span class="hljs-keyword">int</span> partition;<br>        <span class="hljs-keyword">if</span> (msgValues.equals(<span class="hljs-string">&quot;rovingsea&quot;</span>)) &#123;<br>            partition = <span class="hljs-number">0</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            partition = -<span class="hljs-number">1</span>; <span class="hljs-comment">// 其他处理</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> partition;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span> </span>&#123;&#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(Map&lt;String, ?&gt; map)</span> </span>&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="三、提高吞吐量"><a href="#三、提高吞吐量" class="headerlink" title="三、提高吞吐量"></a>三、提高吞吐量</h1><p>合理调整四个参数：</p><ul><li>batch.size，默认16k</li><li>linger.ms，默认 0s，也就是没有延迟</li><li>compression.type，压缩方式</li><li>RecordAccumlator，缓冲区大小</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">KafkaParameter</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Properties properties = <span class="hljs-keyword">new</span> Properties();<br>        <span class="hljs-comment">// 序列化</span><br>        properties.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());<br>        properties.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());<br>        <span class="hljs-comment">// 缓冲区大小，相当于仓库</span><br>        properties.put(ProducerConfig.BUFFER_MEMORY_CONFIG, <span class="hljs-number">33554432</span>);<br>        <span class="hljs-comment">// 批次大小，相当于每次拉的大小</span><br>        properties.put(ProducerConfig.BATCH_SIZE_CONFIG, <span class="hljs-number">16384</span>);<br>        <span class="hljs-comment">// linger.ms，最多等多久开始拉货</span><br>        properties.put(ProducerConfig.LINGER_MS_CONFIG, <span class="hljs-number">1</span>);<br>        <span class="hljs-comment">// 压缩，默认none，有 gzip，snappy，lz4，zstd 等方式</span><br>        properties.put(ProducerConfig.COMPRESSION_TYPE_CONFIG, <span class="hljs-string">&quot;snappy&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="四、数据可靠"><a href="#四、数据可靠" class="headerlink" title="四、数据可靠"></a>四、数据可靠</h1><p>主要依据应答级别 <code>acks</code> </p><ul><li>0，生产者发送过去的数据，不需要然后应答，也就是发送消息后就不管了</li></ul><ol><li><p><strong>Leader 已经挂了，不确定是否消费了</strong></p></li><li><p><strong>如果<code>Leader</code>收到后，还没来得及同步，就挂了，那么也会导致数据丢失</strong></p></li></ol><ul><li>1，生产者发送过去的数据，需要 <code>Leader</code>收到数据后并应答</li></ul><ol><li><strong>如果<code>Leader</code>收到数据后应答了，但还没来得及同步，就挂了，而此时生产者也不会向新<code>Leader</code>再次发送相同的消息，所以会导致数据丢失</strong></li></ol><ul><li>all(-1)，生产者发送过去的数据，需要<code>Leader</code> + <code>ISR(In-Sync Replicas)</code> 应答</li></ul><p> <img src="/image/image-20220703230256975.png" alt="应答all机制下如何确保数据完全可靠"></p><p>但是如果在 <code>Leader</code>与数据同步结束后，正准备发送应答 <code>ACK</code>时就挂了，那么生产者会认为 <code>Kafka</code>集群没有消费，所以会重新发送一次，这样就会导致数据重复</p><h1 id="五、幂等性和生产者事务"><a href="#五、幂等性和生产者事务" class="headerlink" title="五、幂等性和生产者事务"></a>五、幂等性和生产者事务</h1><h2 id="1-幂等性"><a href="#1-幂等性" class="headerlink" title="1. 幂等性"></a>1. 幂等性</h2><p>在确保数据可靠性的条件下，可能会出现数据重复的现象</p><p><img src="/image/image-20220703231422855.png" alt="数据传递语义"></p><p><img src="/image/image-20220703231823306.png" alt="幂等性原理"></p><p>开启幂等性，默认是开启的</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">enable.idempotence</span> <span class="hljs-string">=</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h2 id="2-生产者事务"><a href="#2-生产者事务" class="headerlink" title="2. 生产者事务"></a>2. 生产者事务</h2><p><strong>幂等性只能保证在单分区单会话内不重复</strong></p><p><img src="/image/image-20220703232856149.png" alt="事务原理"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProducerTransaction</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 1. 创建 kafka 生产者的配置对象</span><br>        Properties properties = <span class="hljs-keyword">new</span> Properties();<br>        <span class="hljs-comment">// 2. 给 kafka 配置对象添加配置信息：bootstrap.server</span><br>        properties.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, <span class="hljs-string">&quot;ip:port&quot;</span>);<br>        <span class="hljs-comment">// 3. key, value 序列化</span><br>        properties.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG,<br>                <span class="hljs-string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);<br>        properties.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG,<br>                <span class="hljs-string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);<br>        <span class="hljs-comment">// 4. 指定事务id</span><br>        properties.put(ProducerConfig.TRANSACTIONAL_ID_CONFIG, <span class="hljs-string">&quot;rovingsea&quot;</span>);<br>        <span class="hljs-comment">// 5. 创建 kafka 生产者对象</span><br>        KafkaProducer&lt;String, String&gt; kafkaProducer = <span class="hljs-keyword">new</span> KafkaProducer&lt;&gt;(properties);<br><br>        kafkaProducer.initTransactions();<br>        kafkaProducer.beginTransaction();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 6. 调用 send 方法，进行测试</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>                kafkaProducer.send(<span class="hljs-keyword">new</span> ProducerRecord&lt;&gt;(<span class="hljs-string">&quot;first&quot;</span>, <span class="hljs-string">&quot;rovingsea&quot;</span> + i));<br>                kafkaProducer.commitTransaction();<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            kafkaProducer.abortTransaction();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">// 7. 关闭资源</span><br>            kafkaProducer.close();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="六、数据有序"><a href="#六、数据有序" class="headerlink" title="六、数据有序"></a>六、数据有序</h1><p><img src="/image/image-20220703233800267.png" alt="数据有序"></p><p>实现原理：</p><p><img src="/image/image-20220703234244550.png" alt="保证数据有序的原理"></p>]]></content>
    
    
    <categories>
      
      <category>Kafka</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>网关</title>
    <link href="/2022/06/06/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E7%BD%91%E5%85%B3/"/>
    <url>/2022/06/06/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E7%BD%91%E5%85%B3/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文将介绍什么是微服务网关，为什么要用网关并以 Spring Cloud Gateway 为例介绍网关的作用和用途</p><h1 id="什么是网关"><a href="#什么是网关" class="headerlink" title="什么是网关"></a>什么是网关</h1><p>是出现在系统边界上的一个面向 API 的、串行集中式的强管理服务，这里面的边界是企业 IT 系统的边界，可以理解为<strong>企业级应用防火墙</strong></p><p>作用是<strong>将外部访问与内部系统隔离</strong></p><p>API 网关是一个服务器，是系统对外的唯一入口。API 网关封装了系统内部架构，为每个客户端提供定制的 API。</p><p>所有的客户端和消费端都通过统一的网关接入微服务，在网关层<strong>处理非业务功能</strong></p><p>而 API 网关并非微服务场景中的必须组件，如下图：</p><p><img src="/image/image-20220731202331858.png" alt="微服务案例图"></p><p>不管有没有 API 网关，后端微服务均可以支持客户端的访问</p><p>但明显的是，当服务数量增加，随之复杂度也会增加，此时引入 API 网关也有如下好处：</p><ul><li>聚合接口使得服务对调用者透明，客户端与后端的耦合度降低</li><li>聚合后台服务，节省流量，提高性能，提升用户体验</li><li>提供安全、流控、过滤、缓存、计费、监控等 API 管理功能</li></ul><h1 id="为什么要用网关"><a href="#为什么要用网关" class="headerlink" title="为什么要用网关"></a>为什么要用网关</h1><p><img src="/image/image-20220731202737732.png" alt="单体应用与微服务的区别"></p><p><strong>单体应用：</strong>浏览器发起请求到单体应用所在的机器，应用从数据库查询数据原路放回给浏览器，对于单体应用来说是不需要网关的</p><p><strong>微服务：</strong>微服务的应用可能部署在不同的机房，不同地区，不同域名下。此时客户端想要请求对应的服务，都需要知道机器的具体 IP 或者域名 URL，当微服务实例众多时，对于客户端来说是非常难记忆的，也是非常难维护的。</p><p>有了网关的话，客户端相关的请求直接发送到网关，由网关根据标识解析判断出具体的微服务地址，再把请求转发到微服务实例，这其中就把“记忆”的功能交给了网关，也就降低了客户端与服务之间的耦合</p><h1 id="Spring-Cloud-Gateway"><a href="#Spring-Cloud-Gateway" class="headerlink" title="Spring Cloud Gateway"></a>Spring Cloud Gateway</h1><p>官方文档：<br><a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.1.RELEASE/reference/html/">https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.1.RELEASE/reference/html/</a></p><h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><ul><li><strong>路由（Route）：</strong>路由是网关最基础的部分，路由信息由 ID、目标 URI、一组断言和一组过滤器组成。如果断言路由为真，则说明请求的 URI 和配置相匹配</li><li><strong>断言（Predicate）：</strong>Java 8 中的断言函数。Spring Cloud Gateway 中的断言函数输入类型是 Spring 5.0 框架中的 ServerWebExchange。Spring Cloud Gateway 中的断言函数允许开发者去定义匹配来自于 Http Request 中的任何信息，比如请求头和参数等</li><li><strong>过滤器（Filter）：</strong>一个标准的 Spring Web Filter。Spring Cloud Gateway 中的 Filter 分为两种类型，分别是 Gateway Filter 和 Global Filter。过滤器将会对请求和响应进行处理</li></ul><h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><p><img src="https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.1.RELEASE/reference/html/images/spring_cloud_gateway_diagram.png" alt="Spring Cloud Gateway 工作原理"></p><p>如上图所示，其工作原理可以分为如下几步：</p><ol><li>客户端向 Spring Cloud Gateway 发起请求</li><li>由网关映射处理器映射 Gateway Handler Mapping 确定与请求相匹配的路由，将其发送到网关 Web 处理程序 Gateway Web Handler</li><li>网关 Web 处理程序 Gateway Web Handler 通过指定的 pre 逻辑的过滤器链将请求发送到代理服务</li><li>代理服务 Proxied Service 发起代理请求</li><li>代理服务 Proxied Service 请求后将再次通过指定的 post 逻辑的过滤器链将返回结果发送到网关 Web 处理器 Gateway Web Handler </li><li>最后再到网关处理器映射 Gateway Handler Mapping </li></ol><h2 id="路由配置案例"><a href="#路由配置案例" class="headerlink" title="路由配置案例"></a>路由配置案例</h2><p><img src="/image/image-20220731210320480.png" alt="路由配置案例"></p><h2 id="路由规则"><a href="#路由规则" class="headerlink" title="路由规则"></a>路由规则</h2><p><img src="/image/image-20220731211641072.png" alt="路由规则"></p><p><strong>配置案例：</strong></p><p><img src="/image/image-20220731212848886.png" alt="路由规则配置案例"></p><p><strong>官网案例：</strong></p><p><a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.1.RELEASE/reference/html/#gateway-request-predicates-factories">https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.1.RELEASE/reference/html/#gateway-request-predicates-factories</a></p><h2 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h2><p><strong>动态路由案例：</strong></p><p><img src="/image/image-20220731233156747.png" alt="动态路由案例"></p><p>但是此刻的路由访问不了 order-service，当然也可以通过再一次配置达到访问的目的：</p><p><img src="/image/image-20220731233630856.png" alt="动态路由案例2"></p><p>但是显然，如果随着动态路由的数量增多，那么配置的内容也会随之增加，所以就要<strong>遵循约定大于配置</strong>，因此有了如下配置：</p><p><strong>服务名称转发：</strong></p><p><img src="/image/image-20220731233515511.png" alt="服务名称转发案例"></p><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><p>为客户端请求的 URL 再次添加前缀、后缀或者替换等操作或为拦截的请求进行额外的业务操作 </p><p><strong>官方文档：</strong></p><p><a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.1.RELEASE/reference/html/#gatewayfilter-factories">https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.1.RELEASE/reference/html/#gatewayfilter-factories</a></p><p><strong>案例：</strong></p><p><img src="/image/image-20220803010930840.png" alt="过滤器案例"></p><p><strong>自定义网关过滤器设置：</strong></p><p><img src="/image/image-20220803012351000.png" alt="自定义网关过滤器"></p><p><img src="/image/image-20220803012225672.png" alt="gateway配置类"></p><p><strong>自定义全局过滤器：</strong></p><p><img src="/image/image-20220803012659919.png" alt="自定义全局过滤器"></p>]]></content>
    
    
    <categories>
      
      <category>微服务</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>DataStream API</title>
    <link href="/2022/05/30/Flink/DataStream%20API/"/>
    <url>/2022/05/30/Flink/DataStream%20API/</url>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p><code>DataStream</code>（数据流）本身是 <code>Flink</code> 中一个用来表示数据集合的类（Class），我们编写的 <code>Flink</code> 代码其实就是基于这种数据类型的处理，所以这套核心 <code>API</code> 就以 <code>DataStream</code> 命名。</p><p>对于批处理和流处理，我们都可以用这同一套 <code>API</code> 来实现。</p><p>其用法上，有些类似于常规的 Java 集合，但又有所不同。</p><p>我们在代码中往往并 不关心集合中具体的数据，而只是用 API 定义出一连串的操作来处理它们；这就叫作数据流 的<strong>“转换”（transformations）。</strong></p><p>一个 <code>Flink</code> 程序，其实就是对 <code>DataStream</code> 的各种转换。具体来说，代码基本上都由以下几部分组成：</p><ul><li>获取执行环境（execution environment）</li><li>读取数据源（source）</li><li>定义基于数据的转换操作（transformations）</li><li>定义计算结果的输出位置（sink）</li><li>触发程序执行（execute）</li></ul><p>其中，获取环境和触发执行，都可以认为<strong>是针对执行环境的操作。</strong></p><p><img src="/image/image-20220716150454934.png" alt="Flink 程序的构成"></p><h1 id="执行环境"><a href="#执行环境" class="headerlink" title="执行环境"></a>执行环境</h1><p><code>Flink</code> 程序可以在各种上下文环境中运行</p><ul><li>本地 <code>JVM</code> </li><li>远程集群</li></ul><p>不同的环境，代码的提交运行的过程会有所不同。</p><p>这就要求我们在提交作业执行计算时， 首先必须获取当前 <code>Flink</code> 的运行环境，从而建立起与 <code>Flink</code> 框架之间的联系。</p><p>只有获取了环境 上下文信息，才能将具体的任务调度到不同的 <code>TaskManager</code> 执行。</p><h2 id="创建执行环境"><a href="#创建执行环境" class="headerlink" title="创建执行环境"></a>创建执行环境</h2><h3 id="getExecutionEnvironment"><a href="#getExecutionEnvironment" class="headerlink" title="getExecutionEnvironment"></a>getExecutionEnvironment</h3><p>这种“智能”的方式不需要我们额外做判断，用起来简单高效，是最常用的一种创建执行环境的方式</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs java">StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();<br></code></pre></td></tr></table></figure><h3 id="createLocalEnvironment"><a href="#createLocalEnvironment" class="headerlink" title="createLocalEnvironment"></a>createLocalEnvironment</h3><p>这个方法返回一个本地执行环境。可以在调用时传入一个参数，指定默认的并行度；如果 不传入，则默认并行度就是本地的 CPU 核心数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">StreamExecutionEnvironment localEnv = StreamExecutionEnvironment.createLocalEnvironment();<br></code></pre></td></tr></table></figure><h3 id="createRemoteEnvironment"><a href="#createRemoteEnvironment" class="headerlink" title="createRemoteEnvironment"></a>createRemoteEnvironment</h3><p>这个方法返回集群执行环境。需要在调用时指定 JobManager 的主机名和端口号，并指定 要在集群中运行的 Jar 包。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">StreamExecutionEnvironment remoteEnv = StreamExecutionEnvironment<br> .createRemoteEnvironment(<br> <span class="hljs-string">&quot;host&quot;</span>, <span class="hljs-comment">// JobManager 主机名</span><br> <span class="hljs-number">1234</span>, <span class="hljs-comment">// JobManager 进程端口号</span><br> <span class="hljs-string">&quot;path/to/jarFile.jar&quot;</span> <span class="hljs-comment">// 提交给 JobManager 的 JAR 包</span><br>); <br></code></pre></td></tr></table></figure><p>在获取到程序执行环境后，我们还可以对执行环境进行灵活的设置。</p><p>比如可以全局设置程 序的并行度、禁用算子链，还可以定义程序的时间语义、配置容错机制。</p><p>关于时间语义和容错 机制，会在后续的章节介绍。</p><h2 id="执行模式"><a href="#执行模式" class="headerlink" title="执行模式"></a>执行模式</h2><p>上节中我们获取到的执行环境，是一个 <code>StreamExecutionEnvironment</code>，顾名思义它应该是 做流处理的。</p><p>那对于批处理，又应该怎么获取执行环境呢？</p><p>在之前的 <code>Flink</code> 版本中，批处理的执行环境与流处理类似，是调用类 <code>ExecutionEnvironment</code> 的静态方法，返回它的对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 批处理环境</span><br>ExecutionEnvironment batchEnv = ExecutionEnvironment.getExecutionEnvironment();<br><span class="hljs-comment">// 流处理环境</span><br>StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();<br></code></pre></td></tr></table></figure><p>而从 1.12.0 版本起，<code>Flink</code> 实现了 <code>API</code> 上的流批统一。</p><p><code>DataStream API</code> 新增了一个重要特 性：可以支持不同的“执行模式”（execution mode），通过简单的设置就可以让一段 <code>Flink</code> 程序 在流处理和批处理之间切换。</p><p>这样一来，<code>DataSet API</code> 也就没有存在的必要了。</p><h3 id="流执行模式（默认）"><a href="#流执行模式（默认）" class="headerlink" title="流执行模式（默认）"></a>流执行模式（默认）</h3><p>这是 <code>DataStream API</code> 最经典的模式，一般用于<strong>需要持续实时处理的无界数据流。</strong></p><h3 id="批执行模式"><a href="#批执行模式" class="headerlink" title="批执行模式"></a>批执行模式</h3><p>专门用于批处理的执行模式, 这种模式下，<code>Flink</code> 处理作业的方式类似于 <code>MapReduce</code> 框架。</p><p><strong>对于不会持续计算的有界数据，我们用这种模式处理会更方便。</strong></p><h3 id="自动模式"><a href="#自动模式" class="headerlink" title="自动模式"></a>自动模式</h3><p>在这种模式下，将由程序根据输入数据源是否有界，来自动选择执行模式。</p><h3 id="配置方法"><a href="#配置方法" class="headerlink" title="配置方法"></a>配置方法</h3><p>由于 <code>Flink</code> 程序默认是 <code>STREAMING</code> 模式，</p><p>我们这里重点介绍一下 <code>BATCH</code> 模式的配置。 主要有两种方式：</p><ul><li>命令行配置</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">bin/flink <span class="hljs-builtin-name">run</span> -Dexecution.<span class="hljs-attribute">runtime-mode</span>=BATCH<br></code></pre></td></tr></table></figure><ul><li>代码配置</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">StreamExecutionEnvironment env =<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">StreamExecutionEnvironment</span>.</span></span>get<span class="hljs-constructor">ExecutionEnvironment()</span>;<br>env.set<span class="hljs-constructor">RuntimeMode(RuntimeExecutionMode.BATCH)</span>;<br></code></pre></td></tr></table></figure><p>在代码中，直接基于执行环境调用 <code>setRuntimeMode</code> 方法，传入 BATCH 模式。</p><p><strong>建议：</strong></p><p>不要在代码中配置，而是使用命令行。</p><p>这同设置并行度是类似的：在提交作业时指定参数可以更加灵活，同一段应用程序写好之后，既可以用于批处理也可以用于流处理。</p><p><strong>而在代码中硬编码（hard code）的方式可扩展性比较差，一般都不推荐。</strong></p><h2 id="创建程序执行"><a href="#创建程序执行" class="headerlink" title="创建程序执行"></a>创建程序执行</h2>]]></content>
    
    
    <categories>
      
      <category>Flink</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>运行时架构</title>
    <link href="/2022/05/28/Flink/%E8%BF%90%E8%A1%8C%E6%97%B6%E6%9E%B6%E6%9E%84/"/>
    <url>/2022/05/28/Flink/%E8%BF%90%E8%A1%8C%E6%97%B6%E6%9E%B6%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h1 id="系统架构"><a href="#系统架构" class="headerlink" title="系统架构"></a>系统架构</h1><p><img src="/image/image-20220710171606597.png" alt="Flink 系统架构"></p><h1 id="运行时组件"><a href="#运行时组件" class="headerlink" title="运行时组件"></a>运行时组件</h1><p><img src="/image/image-20220709194004452.png" alt="Flink 运行时组件"></p><h2 id="作业管理器"><a href="#作业管理器" class="headerlink" title="作业管理器"></a>作业管理器</h2><p><img src="/image/image-20220709195014530.png" alt="作业管理器"></p><h2 id="任务管理器"><a href="#任务管理器" class="headerlink" title="任务管理器"></a>任务管理器</h2><p><img src="/image/image-20220709195328800.png" alt="任务管理器"></p><h2 id="资源管理器"><a href="#资源管理器" class="headerlink" title="资源管理器"></a>资源管理器</h2><p><img src="/image/image-20220709195741924.png" alt="资源管理器"></p><h2 id="分发器"><a href="#分发器" class="headerlink" title="分发器"></a>分发器</h2><p><img src="/image/image-20220709200034201.png" alt="分发器"></p><h1 id="任务提交流程"><a href="#任务提交流程" class="headerlink" title="任务提交流程"></a>任务提交流程</h1><h2 id="抽象概念"><a href="#抽象概念" class="headerlink" title="抽象概念"></a>抽象概念</h2><p><img src="/image/image-20220710150137362.png" alt="Flink 任务提交流程的抽象概念"></p><h2 id="单机模式"><a href="#单机模式" class="headerlink" title="单机模式"></a>单机模式</h2><p><img src="/image/image-20220710173356121.png" alt="单机模式 Flink 的任务提交流程"></p><h2 id="Yarn-环境"><a href="#Yarn-环境" class="headerlink" title="Yarn 环境"></a>Yarn 环境</h2><h3 id="会话模式"><a href="#会话模式" class="headerlink" title="会话模式"></a>会话模式</h3><p><img src="/image/image-20220710173613234.png"></p><h3 id="单作业模式"><a href="#单作业模式" class="headerlink" title="单作业模式"></a>单作业模式</h3><p><img src="/image/image-20220710173858732.png" alt="Yarn 单作业模式下 Flink 任务提交流程"></p><h1 id="重要概念"><a href="#重要概念" class="headerlink" title="重要概念"></a>重要概念</h1><h2 id="程序与数据流"><a href="#程序与数据流" class="headerlink" title="程序与数据流"></a>程序与数据流</h2><p><code>Flink</code> 是流式计算框架。它的程序结构，其实就是定义了一连串的处理操作，每一个数据 输入之后都会依次调用每一步计算。在 <code>Flink</code> 代码中，我们定义的每一个处理转换操作都叫作 “算子”（Operator），<strong>所以我们的程序可以看作是一串算子构成的管道，数据则像水流一样有序 地流过。</strong></p><p>所有的 <code>Flink</code> 程序都可以归纳为由三部分构成：<code>Source</code>、<code>Transformation</code> 和 <code>Sink</code>。</p><ul><li>Source 表示“源算子”，负责读取数据源</li><li>Transformation 表示“转换算子”，利用各种算子进行处理加工</li><li>Sink 表示“下沉算子”，负责数据的输出</li></ul><p>在运行时，<code>Flink</code> 程序会被映射成所有算子按照逻辑顺序连接在一起的一张图，这被称为 <strong>“逻辑数据流”</strong>（<code>logical dataflow</code>），或者叫“<strong>数据流图</strong>”（<code>dataflow graph</code>）。</p><h2 id="并行度"><a href="#并行度" class="headerlink" title="并行度"></a>并行度</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p><img src="/image/image-20220710221056996.png" alt="并行度"></p><ul><li>一个特定“算子”的子任务<code>（subtask）</code>的个数被称之为其并行度<code>（parallelism）</code></li><li>一般情况下，一个 <code>stream</code> 的并行度，可以认为就是其所有算子中最大的并行度</li></ul><p>如上图所示，当前数据流中有 <code>source</code>、<code>map</code>、<code>window</code>、<code>sink</code> 四个算子，除最后 <code>sink</code>，其他算子的并行度都为 2。整个程序包含了 7 个子任务，至少需要 2 个分区来并行执行。我们可以说，这段流处理程序的并行度就是 2。</p><h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><p>在 <code>Flink</code> 中，可以用不同的方法来设置并行度，它们的有效范围和优先级别也是不同的。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>我们在代码中，可以很简单地在算子后跟着调用 <code>setParallelism()</code>方法，来设置当前算子的并行度：</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs java">stream.map(word -&gt; Tuple2.of(word, <span class="hljs-number">1L</span>)).setParallelism(<span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><p>这种方式设置的并行度，<strong>只针对当前算子有效</strong></p><h4 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h4><p>在使用 <code>flink run</code> 命令提交应用时，可以增加 <code>-p</code> 参数来指定当前应用程序执行的并行度， 它的作用类似于执行环境的全局设置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bin/flink run –p 2 –c com.atguigu.wc.StreamWordCount ./FlinkTutorial-1.0-SNAPSHOT.jar<br></code></pre></td></tr></table></figure><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>我们还可以直接在集群的配置文件 <code>flink-conf.yaml</code> 中直接更改默认并行度：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">parallelism.default:</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>这个设置对于整个集群上提交的所有作业有效，初始值为 1。无论在代码中设置、还是提 交时的-p 参数，都不是必须的；所以在没有指定并行度的时候，就会采用配置文件中的集群 默认并行度。<strong>在开发环境中，没有配置文件，默认并行度就是当前机器的 CPU 核心数</strong></p><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><ol><li>对于一个算子，首先看在代码中是否单独指定了它的并行度，这个特定的设置优先级 最高，会覆盖后面所有的设置</li><li>如果没有单独设置，那么采用当前代码中执行环境全局设置的并行度</li><li>如果代码中完全没有设置，那么采用提交时-p 参数指定的并行度</li><li>如果提交时也未指定-p 参数，那么采用集群配置文件中的默认并行度</li></ol><h2 id="算子链"><a href="#算子链" class="headerlink" title="算子链"></a>算子链</h2><p><img src="/image/image-20220710221056996.png" alt="并行度"></p><p>如上图所示，一个数据流在算子之间传输数据的形式可以是<strong>一对一（one-to-one）</strong>的<strong>直通 （forwarding）</strong>模式，也可以是打乱的<strong>重分区（redistributing）</strong>模式，具体是哪一种形式，取决于算子的种类。</p><h4 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h4><p>这种模式下，数据流维护着分区以及元素的顺序。</p><p>比如图中的 <code>source</code> 和 <code>map</code> 算子，<code>source</code> 算子读取数据之后，可以直接发送给 <code>map</code> 算子做处理，<strong>它们之间不需要重新分区，也不需要调整数据的顺序。</strong></p><p>这就意味着 <code>map</code> 算子的子任务，看到的元素个数和顺序跟 <code>source</code> 算子的子任务产生的完全一样，保证着“一对一”的关系。</p><p><code>map</code>、<code>filter</code>、<code>flatMap</code> 等算子都是这种 <code>one-to-one</code> 的对应关系。</p><p> <strong>这种关系类似于 <code>Spark</code> 中的窄依赖。</strong></p><h4 id="重分区"><a href="#重分区" class="headerlink" title="重分区"></a>重分区</h4><p>在这种模式下，数据流的分区会发生改变。</p><p>比图中的 <code>map</code> 和后面的 <code>keyBy/window</code> 算子之 间（这里的 <code>keyBy</code> 是数据传输算子，后面的 <code>window</code>、<code>apply</code> 方法共同构成了 <code>window</code> 算子）, 以及 <code>keyBy/window</code> 算子和 <code>Sink</code> 算子之间，都是这样的关系。</p><p><strong>每一个算子的子任务，会根据数据传输的策略，把数据发送到不同的下游目标任务。</strong></p><p>比如从并行度为 2 的 <code>window</code> 算子，要传递到并行度为 1 的 <code>Sink</code> 算子，这时的数据传输方式是再平衡（<code>rebalance</code>），会把数据均匀地向下游子任务分发出去。</p><p>这些传输方式都会引起重分区（<code>redistribute</code>）的过程，这一过程类似于 <code>Spark</code> 中的 <code>shuffle</code>。</p><p><strong>总体说来，这种算子间的关系类似于 Spark 中的宽依赖。</strong></p><h2 id="TaskManager-和-Slots"><a href="#TaskManager-和-Slots" class="headerlink" title="TaskManager 和 Slots"></a>TaskManager 和 Slots</h2><p><img src="/image/image-20220710154015319.png" alt="TaskManager 和 Slots 关系图1"></p><ul><li><code>Flink</code> 中每一个 <code>TaskManager</code> 都是一个<code>JVM</code>进程，它可能会在独立的线程上执行一个或多个子任务</li><li>为了控制一个 <code>TaskManager</code> 能接收多少个 <code>task</code>， <code>TaskManager</code> 通过 <code>task slot</code> 来进行控制（一个 <code>TaskManager</code> 至少有一个 <code>slot</code>）</li></ul><p><img src="/image/image-20220710154256896.png" alt="TaskManager 和 Slots 关系图2"></p><ul><li>默认情况下，<code>Flink</code> 允许子任务共享 <code>slot</code>，即使它们是不同任务的子任务。 这样的结果是，一个 <code>slot</code> 可以保存作业的整个管道。</li><li><code>Task Slot</code> 是静态的概念，是指 <code>TaskManager</code> 具有的并发执行能力</li></ul>]]></content>
    
    
    <categories>
      
      <category>Flink</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>行为型模式</title>
    <link href="/2022/05/20/Java%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <url>/2022/05/20/Java%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p><a name="a11edfd6"></a></p><h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><p>行为型模式（Behavioral Pattern）<strong>关注系统中对象之间的交互，研究系统在运行时对象之间的相互通信与协作，进一步明确对象的职责</strong></p><p><strong>行为型模式不仅仅关注类和对象本身，还重点关注它们之间的相互作用和职责划分</strong></p><p>行为型模式可以分为<strong>类行为型模式</strong>和<strong>对象行为型模式</strong>两种</p><p>类行为型模式通过继承关系在几个类之间分配行为，主要通过多态等方式来分配父类与子类的职责</p><p>对象行为型模式通过对象的关联关系来分配行为，主要通过对象关联来分配两个或多个类的职责</p><p>根据合成复用原则，大部分行为型模式都属于对象行为型设计模式</p><p>行为型模式共有十一种：</p><table><thead><tr><th><strong>设计原则名称</strong></th><th><strong>定义</strong></th><th><strong>使用频率</strong></th></tr></thead><tbody><tr><td>职责链模式<br />（Chain of Responsibility Pattern）</td><td>避免将一个请求的发送者与接收者耦合在一起，让多个对象都有机会处理请求。将接受请求的对象连成一条链，并且沿着这条链传递请求，直到有一个对象能够处理它为止</td><td>⭐⭐</td></tr><tr><td>命令模式<br />（Command Pattern）</td><td>将一个请求封装为一个对象，从而可用不同的请求对客户进行参数化，对请求排队或者记录请求日志，以及支持可撤销的操作</td><td>⭐⭐⭐⭐</td></tr><tr><td>解释器模式<br />（Interpreter Pattern）</td><td>给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子</td><td>⭐</td></tr><tr><td>迭代器模式<br />（Interator Pattern）</td><td>提供一种方法顺序访问一个聚合对象的各个元素，而又不用暴露该对象内部表示</td><td>⭐⭐⭐⭐⭐</td></tr><tr><td>中介者模式<br />（Mediator Pattern）</td><td>定义一个对象来封装一系列对象的交互。中介者模式是各对象之间不需要显示地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互</td><td>⭐⭐</td></tr><tr><td>备忘录模式<br />（Memento Pattern）</td><td>在不破坏封装的前提下捕获一个对象的内部状态，并在该对象之外保存这个状态，这样可以在以后将对象恢复到原先保存的状态</td><td>⭐⭐</td></tr><tr><td>观察者模式<br />（Oberver Pattern）</td><td>定义对象之间的一种一对多依赖关系，使得每当一个对象状态发生改变时其相关依赖对象皆得到通知并被自动更新</td><td>⭐⭐⭐⭐⭐</td></tr><tr><td>状态模式<br />（State Pattern）</td><td>允许一个对象在其内部状态改变时改变它的行为。对象看起来似乎修改了它的类</td><td>⭐⭐⭐</td></tr><tr><td>策略模式<br />（Strategy Pattern）</td><td>定义一系列算法，将每一个算法封装起来，并让它们可以相互替换，策略模式让算法可以独立于使用它的客户而变化</td><td>⭐⭐⭐⭐</td></tr><tr><td>模板方法模式<br />（Template Method Pattern）</td><td>定义一个操作中算法的框架，而将一些步骤延迟到子类中。模板方法模式使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤</td><td>⭐⭐⭐</td></tr><tr><td>访问者模式<br />（Visitor Pattern）</td><td>表示一个作用于某对象结构中的各个元素的操作。访问者模式让用户可以在不改变各元素的类的前提下定义作用于这些元素的新操作</td><td>⭐</td></tr></tbody></table><p><a name="NxdSP"></a></p><h1 id="二、职责链模式"><a href="#二、职责链模式" class="headerlink" title="二、职责链模式"></a>二、职责链模式</h1><p>某公司欲开发一个软件系统的在线文档帮助系统，用户可以在任何一个查询环境中输入查询关键字，如果当前查询环境下没有相关内容，则系统会将查询按照一定的顺序转发给其他查询环境。<br />设查询环境如下：JavaSearchContext、SQLSearchContext、UMLSearchContext</p><p><a name="FsQRR"></a></p><h2 id="1-抽象处理者"><a href="#1-抽象处理者" class="headerlink" title="1. 抽象处理者"></a>1. 抽象处理者</h2><p><a name="hkEAE"></a></p><h3 id="1-1-AbstractSearchContext"><a href="#1-1-AbstractSearchContext" class="headerlink" title="1.1 AbstractSearchContext"></a>1.1 AbstractSearchContext</h3><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AbstractSearchContext</span> </span>&#123;<br><br>    <span class="hljs-keyword">protected</span> AbstractSearchContext abstractSearchContext;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAbstractSearchContext</span><span class="hljs-params">(AbstractSearchContext abstractSearchContext)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.abstractSearchContext = abstractSearchContext;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleRequest</span><span class="hljs-params">(String request)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="oLCjf"></a></p><h2 id="2-具体处理者"><a href="#2-具体处理者" class="headerlink" title="2. 具体处理者"></a>2. 具体处理者</h2><p><a name="UhBLl"></a></p><h3 id="2-1-JavaSearchContext"><a href="#2-1-JavaSearchContext" class="headerlink" title="2.1 JavaSearchContext"></a>2.1 JavaSearchContext</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JavaSearchContext</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractSearchContext</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleRequest</span><span class="hljs-params">(String request)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (request.equals(<span class="hljs-string">&quot;Java&quot;</span>)) &#123;<br>            System.out.println(<span class="hljs-string">&quot;在Java中搜索到该关键字&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">this</span>.abstractSearchContext.handleRequest(request);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="Fd5yo"></a></p><h3 id="2-2-SQLSearchContext"><a href="#2-2-SQLSearchContext" class="headerlink" title="2.2 SQLSearchContext"></a>2.2 SQLSearchContext</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SQLSearchContext</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractSearchContext</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleRequest</span><span class="hljs-params">(String request)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (request.equals(<span class="hljs-string">&quot;SQL&quot;</span>)) &#123;<br>            System.out.println(<span class="hljs-string">&quot;在SQL中搜索到该关键字&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">this</span>.abstractSearchContext.handleRequest(request);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="wc6BH"></a></p><h3 id="2-3-UMLSearchContext"><a href="#2-3-UMLSearchContext" class="headerlink" title="2.3 UMLSearchContext"></a>2.3 UMLSearchContext</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UMLSearchContext</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractSearchContext</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleRequest</span><span class="hljs-params">(String request)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (request.equals(<span class="hljs-string">&quot;UML&quot;</span>)) &#123;<br>            System.out.println(<span class="hljs-string">&quot;在UML中搜索到该关键字&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;该关键字在Java、SQL和UML中均不存在&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="WaxrK"></a></p><h2 id="3-客户端代码"><a href="#3-客户端代码" class="headerlink" title="3. 客户端代码"></a>3. 客户端代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    AbstractSearchContext javaSC, sqlSC, umlSC;<br>    javaSC = <span class="hljs-keyword">new</span> JavaSearchContext();<br>    sqlSC = <span class="hljs-keyword">new</span> SQLSearchContext();<br>    umlSC = <span class="hljs-keyword">new</span> UMLSearchContext();<br><br>    javaSC.setAbstractSearchContext(sqlSC);<br>    sqlSC.setAbstractSearchContext(umlSC);<br><br>    System.out.println(<span class="hljs-string">&quot;-----------测试一-----------&quot;</span>);<br>    javaSC.handleRequest(<span class="hljs-string">&quot;Java&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;-----------测试二-----------&quot;</span>);<br>    javaSC.handleRequest(<span class="hljs-string">&quot;SQL&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;-----------测试三-----------&quot;</span>);<br>    javaSC.handleRequest(<span class="hljs-string">&quot;UML&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;-----------测试四-----------&quot;</span>);<br>    javaSC.handleRequest(<span class="hljs-string">&quot;Python&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="jlnLl"></a></p><h2 id="4-优缺点和适用场景"><a href="#4-优缺点和适用场景" class="headerlink" title="4. 优缺点和适用场景"></a>4. 优缺点和适用场景</h2><p><a name="zmwjh"></a></p><h3 id="4-1-优点"><a href="#4-1-优点" class="headerlink" title="4.1 优点"></a>4.1 优点</h3><ul><li>使得一个对象无须知道是其他哪个对象处理请求，对象仅需知道该请求会被处理</li><li>链中的对象不知道链子的结构，由客户端进行创建，降低了系统的耦合</li><li>链中的对象仅需要维持一个后继者的引用，而不是链子中的所有成员，简化了对象之间的相互连接</li><li>支持动态的增删链中的对象，灵活性较强，并且无须修改其他类，符合开闭原则</li></ul><p><a name="siM30"></a></p><h3 id="4-2-缺点"><a href="#4-2-缺点" class="headerlink" title="4.2 缺点"></a>4.2 缺点</h3><ul><li>职责链较长时，牵连对象增多，增加系统的复杂度，并且不太好进行代码调试</li></ul><p><a name="WPqLa"></a></p><h3 id="4-3-适用场景"><a href="#4-3-适用场景" class="headerlink" title="4.3 适用场景"></a>4.3 适用场景</h3><ul><li>有多个对象可以处理同一个请求，具体那个对象处理该请求待运行时刻确认，客户端只管将请求提交到链上</li><li>在不指明指定的接收者时，向链子提交请求</li><li>客户端可以控制链子的具体对象和先后顺序以及长短</li><li>涉及对象的数量适中</li></ul><p><a name="SfCE3"></a></p><h1 id="三、命令模式"><a href="#三、命令模式" class="headerlink" title="三、命令模式"></a>三、命令模式</h1><p>别名<strong>动作（Action）模式</strong>或<strong>事务（Transaction）模式</strong></p><p>在PC端操作时，鼠标右键（RightClick）功能在桌面时可以用于显示桌面右键菜单（由DisplayDesktopRightClickMenu实现），在LOL游戏中还可以用于移动角色（由LolMoveCharacter实现）<br />现使用命令模式设计该系统，使得功能键类与功能类之间解耦，可以为同一个功能键设置不同的功能</p><p><a name="xEapa"></a></p><h2 id="1-抽象命令类"><a href="#1-抽象命令类" class="headerlink" title="1. 抽象命令类"></a>1. 抽象命令类</h2><p><a name="LKGKx"></a></p><h3 id="1-1-Command"><a href="#1-1-Command" class="headerlink" title="1.1 Command"></a>1.1 Command</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Command</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">execute</span><span class="hljs-params">()</span></span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><a name="UN9qh"></a></p><h2 id="2-具体命令类"><a href="#2-具体命令类" class="headerlink" title="2. 具体命令类"></a>2. 具体命令类</h2><p><a name="t8W4d"></a></p><h3 id="2-1-DisplayCommand"><a href="#2-1-DisplayCommand" class="headerlink" title="2.1 DisplayCommand"></a>2.1 DisplayCommand</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DisplayCommand</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Command</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> DisplayDesktopRightClickMenu desktopRightClickMenu;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DisplayCommand</span><span class="hljs-params">()</span> </span>&#123;<br>        desktopRightClickMenu = <span class="hljs-keyword">new</span> DisplayDesktopRightClickMenu();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">execute</span><span class="hljs-params">()</span> </span>&#123;<br>        desktopRightClickMenu.display();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><a name="DeETW"></a></p><h3 id="2-2-MoveCommand"><a href="#2-2-MoveCommand" class="headerlink" title="2.2 MoveCommand"></a>2.2 MoveCommand</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MoveCommand</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Command</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> LolMoveCharacter lolMoveCharacter;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MoveCommand</span><span class="hljs-params">()</span> </span>&#123;<br>        lolMoveCharacter = <span class="hljs-keyword">new</span> LolMoveCharacter();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">execute</span><span class="hljs-params">()</span> </span>&#123;<br>        lolMoveCharacter.move();<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p><a name="k1rLT"></a></p><h2 id="3-调用者（Invoker）"><a href="#3-调用者（Invoker）" class="headerlink" title="3. 调用者（Invoker）"></a>3. 调用者（Invoker）</h2><p><a name="E28ZA"></a></p><h3 id="3-1-RightClick"><a href="#3-1-RightClick" class="headerlink" title="3.1 RightClick"></a>3.1 RightClick</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RightClick</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> Command command;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCommand</span><span class="hljs-params">(Command command)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.command = command;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">click</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;单击右键&quot;</span>);<br>        command.execute();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><a name="Qo6Gr"></a></p><h2 id="4-接收者（Receiver）"><a href="#4-接收者（Receiver）" class="headerlink" title="4. 接收者（Receiver）"></a>4. 接收者（Receiver）</h2><p><a name="zQBPf"></a></p><h3 id="4-1-DisplayDesktopRightClickMenu"><a href="#4-1-DisplayDesktopRightClickMenu" class="headerlink" title="4.1 DisplayDesktopRightClickMenu"></a>4.1 DisplayDesktopRightClickMenu</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DisplayDesktopRightClickMenu</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;显示桌面右键菜单&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><a name="K21ht"></a></p><h3 id="4-2-LolMoveCharacter"><a href="#4-2-LolMoveCharacter" class="headerlink" title="4.2 LolMoveCharacter"></a>4.2 LolMoveCharacter</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LolMoveCharacter</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;LOL游戏移动人物&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><a name="WzT8y"></a></p><h2 id="5-客户端代码"><a href="#5-客户端代码" class="headerlink" title="5. 客户端代码"></a>5. 客户端代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        RightClick rightClick = <span class="hljs-keyword">new</span> RightClick();<br>        Command moveCommand, displayCommand;<br>        moveCommand = <span class="hljs-keyword">new</span> MoveCommand(); <span class="hljs-comment">// 可以通过配置文件注入</span><br>        displayCommand = <span class="hljs-keyword">new</span> DisplayCommand();<br><br>        rightClick.setCommand(moveCommand);<br>        rightClick.click();<br><br>        rightClick.setCommand(displayCommand);<br>        rightClick.click();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="Omgno"></a></p><h2 id="6-优缺点及适用场景"><a href="#6-优缺点及适用场景" class="headerlink" title="6. 优缺点及适用场景"></a>6. 优缺点及适用场景</h2><p><a name="QIeL1"></a></p><h3 id="6-1-优点"><a href="#6-1-优点" class="headerlink" title="6.1 优点"></a>6.1 优点</h3><ul><li>降低系统的耦合度。调用者与接收者之间不存在直接的引用</li><li>符合开闭原则。新的命令可以很容易地加入到系统中，并且不会对系统源代码进行修改</li><li>可以容易地设计一个<strong>命令队列或宏命令（组合命令，也是组合模式和命令模式的集成）</strong></li><li>为请求的撤销（Undo）和恢复（Redo）操作提供了一种设计和实现方案</li></ul><p><a name="Efmsz"></a></p><h3 id="6-2-缺点"><a href="#6-2-缺点" class="headerlink" title="6.2 缺点"></a>6.2 缺点</h3><ul><li>增加系统复杂度和理解成本。每一个请求接收者都会对应一个具体命令类</li></ul><p><a name="xyIiO"></a></p><h3 id="6-3-适用场景"><a href="#6-3-适用场景" class="headerlink" title="6.3 适用场景"></a>6.3 适用场景</h3><ul><li>调用者和请求接收者解耦</li><li>需要请求排队执行</li><li>支持请求的撤销（Undo）和恢复（Redo）操作</li><li>需要将一组操作组合在一起形成宏命令</li></ul><p><a name="CqhdC"></a></p><h1 id="四、解释器模式"><a href="#四、解释器模式" class="headerlink" title="四、解释器模式"></a>四、解释器模式</h1><p>目前主要应用于正则表达式、XML稳定解释、Eclipse AST等<br />由于该模式使用频率较低，并且系统结构较为复杂，本文不以案例展示，仅介绍其优缺点及适用场景</p><p><a name="VwR2b"></a></p><h2 id="1-优缺点及适用场景"><a href="#1-优缺点及适用场景" class="headerlink" title="1. 优缺点及适用场景"></a>1. 优缺点及适用场景</h2><p><a name="aUojQ"></a></p><h3 id="1-1-优点"><a href="#1-1-优点" class="headerlink" title="1.1 优点"></a>1.1 优点</h3><ul><li>易于改变和扩展文法</li><li>每一条文法规则都可以表示为一个类</li><li>实现文法较为容易</li><li>增加新的解释表达式较为方便</li></ul><p><a name="gvP5c"></a></p><h3 id="1-2-缺点"><a href="#1-2-缺点" class="headerlink" title="1.2 缺点"></a>1.2 缺点</h3><ul><li>对于复杂文法难以维护</li><li>执行效率较低</li></ul><p><a name="u4ApD"></a></p><h3 id="1-3-适用场景"><a href="#1-3-适用场景" class="headerlink" title="1.3 适用场景"></a>1.3 适用场景</h3><ul><li>需要解释执行的语言中的句子表示为一颗抽象语法树</li><li>一些重复出现的问题可以用一种简单的语言进行表达</li><li>一个语言的文法较为简单</li><li>执行效率不是关键问题</li></ul><p><a name="uXzPx"></a></p><h1 id="五、迭代器模式"><a href="#五、迭代器模式" class="headerlink" title="五、迭代器模式"></a>五、迭代器模式</h1><p>某商品管理系统的商品名称存储在一个字符串数组中，现需要自定义一个双向迭代器（MyIterator）实现对该商品名称数组的双向（前向和后向）遍历</p><p><a name="USIrv"></a></p><h2 id="一、抽象聚合类"><a href="#一、抽象聚合类" class="headerlink" title="一、抽象聚合类"></a>一、抽象聚合类</h2><p><a name="Gh93H"></a></p><h3 id="1-1-AbstractArray"><a href="#1-1-AbstractArray" class="headerlink" title="1.1 AbstractArray"></a>1.1 AbstractArray</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AbstractArray</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">AbstractArray</span><span class="hljs-params">(Object[] objects)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.objects = objects;<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> Object[] objects;<br><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> AbstractIterator <span class="hljs-title">createIterator</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="rsQ61"></a></p><h2 id="二、抽象迭代器"><a href="#二、抽象迭代器" class="headerlink" title="二、抽象迭代器"></a>二、抽象迭代器</h2><p><a name="x6XYx"></a></p><h3 id="2-1-AbstractIterator"><a href="#2-1-AbstractIterator" class="headerlink" title="2.1 AbstractIterator"></a>2.1 AbstractIterator</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">AbstractIterator</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">next</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">isLast</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">previous</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">isFirst</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-function">Object <span class="hljs-title">getNextItem</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-function">Object <span class="hljs-title">getPreviousItem</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="De2Ry"></a></p><h2 id="三、具体聚合类和具体迭代器（内部类实现）"><a href="#三、具体聚合类和具体迭代器（内部类实现）" class="headerlink" title="三、具体聚合类和具体迭代器（内部类实现）"></a>三、具体聚合类和具体迭代器（内部类实现）</h2><p><a name="IpPCq"></a></p><h3 id="3-1-GoodsArray"><a href="#3-1-GoodsArray" class="headerlink" title="3.1 GoodsArray"></a>3.1 GoodsArray</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GoodsArray</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractArray</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">GoodsArray</span><span class="hljs-params">(Object[] objects)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(objects);<br>    &#125;<br>    <br>    <span class="hljs-comment">// 具体迭代器</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Itr</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">AbstractIterator</span> </span>&#123;<br><br>        <span class="hljs-keyword">int</span> cursor1;<br>        <span class="hljs-keyword">int</span> cursor2;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Itr</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">this</span>.cursor1 = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">this</span>.cursor2 = objects.length - <span class="hljs-number">1</span>;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">next</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">if</span> (cursor1 &lt; objects.length - <span class="hljs-number">1</span>) &#123;<br>                cursor1++;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isLast</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> (cursor1 == objects.length - <span class="hljs-number">1</span>);<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">previous</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">if</span> (cursor2 &gt; <span class="hljs-number">0</span>) &#123;<br>                cursor2--;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isFirst</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> (cursor2 == <span class="hljs-number">0</span>);<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getNextItem</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> objects[cursor1];<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getPreviousItem</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> objects[cursor2];<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> AbstractIterator <span class="hljs-title">createIterator</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Itr();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="KCsHp"></a></p><h2 id="四、客户端代码"><a href="#四、客户端代码" class="headerlink" title="四、客户端代码"></a>四、客户端代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    String[] goodsName = <span class="hljs-keyword">new</span> String[<span class="hljs-number">100</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; goodsName.length - <span class="hljs-number">1</span>; i++) &#123;<br>        goodsName[i] = String.valueOf(i);<br>    &#125;<br>    AbstractArray goodsArray = <span class="hljs-keyword">new</span> GoodsArray(goodsName);<br>    AbstractIterator goodsArrayItr = goodsArray.createIterator();<br>    <span class="hljs-keyword">while</span> (!goodsArrayItr.isLast())&#123;<br>        goodsArrayItr.next();<br>        System.out.println(goodsArrayItr.getNextItem());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="ZmNrd"></a></p><h2 id="五、优缺点及适用场景"><a href="#五、优缺点及适用场景" class="headerlink" title="五、优缺点及适用场景"></a>五、优缺点及适用场景</h2><p><a name="LIGH8"></a></p><h3 id="5-1-优点"><a href="#5-1-优点" class="headerlink" title="5.1 优点"></a>5.1 优点</h3><ul><li>支持不同的方式遍历一个聚合对象</li><li>简化了聚合类</li></ul><p><a name="MmMqY"></a></p><h3 id="5-2-缺点"><a href="#5-2-缺点" class="headerlink" title="5.2 缺点"></a>5.2 缺点</h3><ul><li>增加了系统复杂度。因为将存储数据和遍历数据的职责分离，需要新增迭代器类，类的个数成对增加</li><li>设计难度较大。需要考虑一个全面的迭代器不是一件容易的事情</li></ul><p><a name="mI3Oy"></a></p><h3 id="5-3-适用场景"><a href="#5-3-适用场景" class="headerlink" title="5.3 适用场景"></a>5.3 适用场景</h3><ul><li>访问一个聚合对象的内容而无须暴露它的内部表示</li><li>需要为一个聚合对象提供多种遍历模式</li><li>为遍历不同的聚合对象提供一个统一的接口</li></ul><p><a name="y94Yl"></a></p><h1 id="六、中介者模式"><a href="#六、中介者模式" class="headerlink" title="六、中介者模式"></a>六、中介者模式</h1><p>虚拟聊天室 在“虚拟聊天室”实例中增加一个新的具体聊天室类和一个新的具体会员类，要求如下： <br />（1） 新的具体聊天室中发送的图片大小不得超过20 <br />（2） 新的具体聊天室中发送的文字信息的长度不得超过100个字符，提供更强大的不雅字符过滤功能（如可过滤TMD、“操”等字符）。 <br />（3） 新的具体会员类可以发送图片信息和文字信息。<br />（4） 新的具体会员类在发送文本信息时，可以在信息后加上发送时间，格式为：文本信息（发送时间）</p><p><a name="c9Tet"></a></p><h2 id="1-抽象中介者"><a href="#1-抽象中介者" class="headerlink" title="1. 抽象中介者"></a>1. 抽象中介者</h2><p><a name="Dz0qf"></a></p><h3 id="1-1-AbstractChatRoom"><a href="#1-1-AbstractChatRoom" class="headerlink" title="1.1 AbstractChatRoom"></a>1.1 AbstractChatRoom</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AbstractChatRoom</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sendInfo</span><span class="hljs-params">(AbstractMember m, String info)</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sendPic</span><span class="hljs-params">(AbstractMember m, String pic)</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sendInfoAndPic</span><span class="hljs-params">(AbstractMember m, String info, String pic)</span></span>;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p><a name="DFVoO"></a></p><h2 id="2-具体中介者"><a href="#2-具体中介者" class="headerlink" title="2. 具体中介者"></a>2. 具体中介者</h2><p><a name="iBSli"></a></p><h3 id="2-1-ChatRoom"><a href="#2-1-ChatRoom" class="headerlink" title="2.1 ChatRoom"></a>2.1 ChatRoom</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ChatRoom</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractChatRoom</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ArrayList&lt;AbstractMember&gt; members = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sendInfo</span><span class="hljs-params">(AbstractMember m, String info)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (m.getClass() == Member.class) &#123;<br>            m.sendInfo(info);<br>            members.forEach(AbstractMember::receive);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (m.getClass() == Vip.class) &#123;<br>            m.sendInfo(info);<br>            members.forEach(AbstractMember::receive);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sendPic</span><span class="hljs-params">(AbstractMember m, String pic)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (m.getClass() == Member.class) &#123;<br>            m.sendPic(pic);<br>            members.forEach(AbstractMember::receive);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (m.getClass() == Vip.class) &#123;<br>            m.sendPic(pic);<br>            members.forEach(AbstractMember::receive);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sendInfoAndPic</span><span class="hljs-params">(AbstractMember m, String info, String pic)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (m.getClass() == Member.class) &#123;<br>            m.sendInfoAndPic(info, pic);<br>            members.forEach(AbstractMember::receive);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (m.getClass() == Vip.class) &#123;<br>            m.sendInfoAndPic(info, pic);<br>            members.forEach(AbstractMember::receive);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ArrayList&lt;AbstractMember&gt; <span class="hljs-title">getMembers</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> members;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><a name="y47iS"></a></p><h2 id="3-抽象同事类"><a href="#3-抽象同事类" class="headerlink" title="3. 抽象同事类"></a>3. 抽象同事类</h2><p><a name="eFioB"></a></p><h3 id="3-1-AbstractMember"><a href="#3-1-AbstractMember" class="headerlink" title="3.1 AbstractMember"></a>3.1 AbstractMember</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AbstractMember</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> AbstractChatRoom chatRoom;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">receive</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setChatRoom</span><span class="hljs-params">(AbstractChatRoom chatRoom)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.chatRoom = chatRoom;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">cSendInfo</span><span class="hljs-params">(String info)</span> </span>&#123;<br>        chatRoom.sendInfo(<span class="hljs-keyword">this</span>, info);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">cSendPic</span><span class="hljs-params">(String pic)</span> </span>&#123;<br>        chatRoom.sendPic(<span class="hljs-keyword">this</span>, pic);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">cSendInfoAndPic</span><span class="hljs-params">(String info, String pic)</span> </span>&#123;<br>        chatRoom.sendInfoAndPic(<span class="hljs-keyword">this</span>, info, pic);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sendInfo</span><span class="hljs-params">(String info)</span> </span>&#123;<br>        chatRoom.sendInfo(<span class="hljs-keyword">this</span>, info);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sendPic</span><span class="hljs-params">(String pic)</span> </span>&#123;<br>        chatRoom.sendPic(<span class="hljs-keyword">this</span>, pic);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sendInfoAndPic</span><span class="hljs-params">(String info, String pic)</span> </span>&#123;<br>        chatRoom.sendInfoAndPic(<span class="hljs-keyword">this</span>, info, pic);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><a name="JOUko"></a></p><h2 id="4-具体同事类"><a href="#4-具体同事类" class="headerlink" title="4. 具体同事类"></a>4. 具体同事类</h2><p><a name="bItBW"></a></p><h3 id="4-1-Member"><a href="#4-1-Member" class="headerlink" title="4.1 Member"></a>4.1 Member</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 部分代码简略实现</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Member</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractMember</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">receive</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-keyword">this</span>.getName() + <span class="hljs-string">&quot;接收消息&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sendInfo</span><span class="hljs-params">(String info)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (info.length() &gt; <span class="hljs-number">100</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;消息过长！&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            String f1 = info.replaceAll(<span class="hljs-string">&quot;TMD&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>);<br>            info = f1.replaceAll(<span class="hljs-string">&quot;操&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>);<br>        &#125;<br>        System.out.println(<span class="hljs-keyword">this</span>.getName() + <span class="hljs-string">&quot;发送了消息：&quot;</span> + info);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sendPic</span><span class="hljs-params">(String pic)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (pic.length() &gt; <span class="hljs-number">100</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;照片过大！&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        System.out.println(<span class="hljs-keyword">this</span>.getName() + <span class="hljs-string">&quot;发送了照片：&quot;</span> + pic);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sendInfoAndPic</span><span class="hljs-params">(String info, String photo)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;普通成员不能同时发送信息和照片&quot;</span>);<br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><a name="N42HP"></a></p><h3 id="4-2-Vip"><a href="#4-2-Vip" class="headerlink" title="4.2 Vip"></a>4.2 Vip</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 部分代码简略实现</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Vip</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractMember</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">receive</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-keyword">this</span>.getName() + <span class="hljs-string">&quot;接收消息&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sendInfo</span><span class="hljs-params">(String info)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (info.length() &gt; <span class="hljs-number">100</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;消息过长！&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            String f1 = info.replaceAll(<span class="hljs-string">&quot;TMD&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>);<br>            info = f1.replaceAll(<span class="hljs-string">&quot;操&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>);<br>        &#125;<br>        System.out.println(<span class="hljs-keyword">this</span>.getName() + <span class="hljs-string">&quot;发送了消息：&quot;</span> + info + <span class="hljs-string">&quot;(&quot;</span> + LocalDateTime.now().format(DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>)) + <span class="hljs-string">&quot;)&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sendPic</span><span class="hljs-params">(String pic)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (pic.length() &gt; <span class="hljs-number">100</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;照片过大！&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        System.out.println(<span class="hljs-keyword">this</span>.getName() + <span class="hljs-string">&quot;发送了照片：&quot;</span> + pic + <span class="hljs-string">&quot;(&quot;</span> + LocalDateTime.now().format(DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss:SSS&quot;</span>)) + <span class="hljs-string">&quot;)&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sendInfoAndPic</span><span class="hljs-params">(String info, String pic)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (info.length() &gt; <span class="hljs-number">100</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;消息过长！&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            String f1 = info.replaceAll(<span class="hljs-string">&quot;TMD&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>);<br>            info = f1.replaceAll(<span class="hljs-string">&quot;操&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (pic.length() &gt; <span class="hljs-number">100</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;照片过大！&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        System.out.println(<span class="hljs-keyword">this</span>.getName() + <span class="hljs-string">&quot;发送了消息和照片：&quot;</span> + info + pic + <span class="hljs-string">&quot;(&quot;</span> + LocalDateTime.now().format(DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss:SSS&quot;</span>)) + <span class="hljs-string">&quot;)&quot;</span>);<br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><a name="yMYfO"></a></p><h2 id="5-客户端代码-1"><a href="#5-客户端代码-1" class="headerlink" title="5. 客户端代码"></a>5. 客户端代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ChatRoom chatRoom = <span class="hljs-keyword">new</span> ChatRoom();<br><br>        Member member1 = <span class="hljs-keyword">new</span> Member();<br>        Member member2 = <span class="hljs-keyword">new</span> Member();<br>        Vip vip1 = <span class="hljs-keyword">new</span> Vip();<br>        Vip vip2 = <span class="hljs-keyword">new</span> Vip();<br><br>        member1.setName(<span class="hljs-string">&quot;member1&quot;</span>);<br>        member2.setName(<span class="hljs-string">&quot;member2&quot;</span>);<br>        vip1.setName(<span class="hljs-string">&quot;vip1&quot;</span>);<br>        vip2.setName(<span class="hljs-string">&quot;vip2&quot;</span>);<br><br>        member1.setChatRoom(chatRoom);<br>        member2.setChatRoom(chatRoom);<br>        vip1.setChatRoom(chatRoom);<br>        vip2.setChatRoom(chatRoom);<br><br>        chatRoom.getMembers().add(member1);<br>        chatRoom.getMembers().add(member2);<br>        chatRoom.getMembers().add(vip1);<br>        chatRoom.getMembers().add(vip2);<br><br>        member1.cSendInfo(<span class="hljs-string">&quot;付老师讲得课真好！&quot;</span>);<br>        member1.cSendPic(<span class="hljs-string">&quot;/member1表情包.jpg&quot;</span>);<br>        member2.cSendPic(<span class="hljs-string">&quot;/member2表情包.jpg&quot;</span>);<br>        vip1.cSendInfoAndPic(<span class="hljs-string">&quot;操！member1你和我想的一样&quot;</span>,<span class="hljs-string">&quot;/vip1表情包.jpg&quot;</span>);<br>        vip2.cSendInfoAndPic(<span class="hljs-string">&quot;哈哈哈&quot;</span>,<span class="hljs-string">&quot;/vip2表情包.jpg&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="opxBr"></a></p><h2 id="6-优缺点及适用场景-1"><a href="#6-优缺点及适用场景-1" class="headerlink" title="6. 优缺点及适用场景"></a>6. 优缺点及适用场景</h2><p><a name="gii5R"></a></p><h3 id="6-1-优点-1"><a href="#6-1-优点-1" class="headerlink" title="6.1 优点"></a>6.1 优点</h3><ul><li>简化对象之间的交互，适用中介者和同事的一对多关系，代替了原来同事间的多对多关系</li><li>将具体同事类之间解耦。例如上述例子中的具体同事类发送和接收消息的过程，如果是中介者和同事的一对多关系，那么中间件循环调用具体同事类的操作即可；如果是同事间的多对多关系，那么就需要在具体同时类中增加相应方法，这样会导致耦合度急剧增加</li><li>可以减少子类的生成。如果需要改变中介者的内容，只需要另外建立具体中介者（继承抽象中介者），而不需要对同事类进行扩展，这使得各个同事类之间可以被复用</li></ul><p><a name="a9qqN"></a></p><h3 id="6-2-缺点-1"><a href="#6-2-缺点-1" class="headerlink" title="6.2 缺点"></a>6.2 缺点</h3><ul><li>提高系统维护成本。具体中介者中会包含大量同事类之间的交互细节</li></ul><p><a name="M0sy7"></a></p><h3 id="6-3-适用场景-1"><a href="#6-3-适用场景-1" class="headerlink" title="6.3 适用场景"></a>6.3 适用场景</h3><ul><li>系统中对象之间存在复杂的引用关系（多对多）</li><li>一个对象由于引用了其他很多对象并且直接和这些对象通信，导致难以复用该对象</li><li>想通过一个中间类来封装多个类中的行为，而又不想生成太多的子类，此时可以通过引入中介者类来实现，在中介者类中定义对象交互的公共行为</li></ul><p><a name="FYKqO"></a></p><h1 id="七、备忘录模式"><a href="#七、备忘录模式" class="headerlink" title="七、备忘录模式"></a>七、备忘录模式</h1><p>目前主要应用于文字处理软件、图像编辑软件、数据库管理系统中<br />由于该模式使用频率较低，并且会导致系统小豪过大，本文不以案例展示，仅介绍其优缺点及适用场景</p><p><a name="v94wD"></a></p><h2 id="1-优缺点及适用场景-1"><a href="#1-优缺点及适用场景-1" class="headerlink" title="1. 优缺点及适用场景"></a>1. 优缺点及适用场景</h2><p><a name="vDo5i"></a></p><h3 id="1-1-优点-1"><a href="#1-1-优点-1" class="headerlink" title="1.1 优点"></a>1.1 优点</h3><ul><li>提供了一种状态恢复机制，方便用户回到特定的历史步骤</li></ul><p><a name="ilJFb"></a></p><h3 id="1-2-缺点-1"><a href="#1-2-缺点-1" class="headerlink" title="1.2 缺点"></a>1.2 缺点</h3><ul><li>资源消耗过大。每保存一次对象的状态都需要消耗一定的系统资源</li></ul><p><a name="j940o"></a></p><h3 id="1-3-适用场景-1"><a href="#1-3-适用场景-1" class="headerlink" title="1.3 适用场景"></a>1.3 适用场景</h3><ul><li>需要将一个对象在某一时刻的全部状态或部分状态记录下来，以方便将来回到先前的状态</li></ul><p><a name="nAWDw"></a></p><h1 id="八、观察者模式"><a href="#八、观察者模式" class="headerlink" title="八、观察者模式"></a>八、观察者模式</h1><p>某在线股票软件需要提供如下功能：当股票购买者所购买的某支股票价格变化幅度达到5%时，系统将自动发送通知（包括新价格）给购买股票的股民。<br />现使用观察者模式设计该系统</p><p><a name="qnOz7"></a></p><h2 id="1-抽象目标类"><a href="#1-抽象目标类" class="headerlink" title="1. 抽象目标类"></a>1. 抽象目标类</h2><p><a name="pmt8R"></a></p><h3 id="1-1-AbstractStock"><a href="#1-1-AbstractStock" class="headerlink" title="1.1 AbstractStock"></a>1.1 AbstractStock</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AbstractStock</span> </span>&#123;<br><br>    <span class="hljs-keyword">protected</span> String name;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">double</span> amount;<br><br>    <span class="hljs-keyword">protected</span> ArrayList&lt;AbstractStockBuyer&gt; stockBuyers = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addStockBuyer</span><span class="hljs-params">(AbstractStockBuyer stockBuyerObserver)</span> </span>&#123;<br>        System.out.println(stockBuyerObserver.getName() + <span class="hljs-string">&quot;购买了&quot;</span> + <span class="hljs-keyword">this</span>.name + <span class="hljs-string">&quot;股票！&quot;</span>);<br>        stockBuyers.add(stockBuyerObserver);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">priceChange</span><span class="hljs-params">(<span class="hljs-keyword">double</span> change)</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">notifyPriceChange</span><span class="hljs-params">(<span class="hljs-keyword">double</span> change, <span class="hljs-keyword">double</span> amount)</span></span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><a name="RvPrV"></a></p><h2 id="2-具体目标类"><a href="#2-具体目标类" class="headerlink" title="2. 具体目标类"></a>2. 具体目标类</h2><p><a name="WZIFY"></a></p><h3 id="2-1-Stock"><a href="#2-1-Stock" class="headerlink" title="2.1 Stock"></a>2.1 Stock</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Stock</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractStock</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Stock</span><span class="hljs-params">(String name, <span class="hljs-keyword">double</span> amount)</span> </span>&#123;<br>        System.out.println(name + <span class="hljs-string">&quot;股票以&quot;</span> + amount + <span class="hljs-string">&quot;元上市啦！&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;-----------------------&quot;</span>);<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.amount = amount;<br>    &#125;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">priceChange</span><span class="hljs-params">(<span class="hljs-keyword">double</span> change)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.amount = amount * (<span class="hljs-number">1.00</span> + change * <span class="hljs-number">0.01</span>);<br>        <span class="hljs-keyword">if</span> (change &gt;= <span class="hljs-number">5.00</span>) &#123;<br>            notifyPriceChange(change, amount);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">notifyPriceChange</span><span class="hljs-params">(<span class="hljs-keyword">double</span> change, <span class="hljs-keyword">double</span> amount)</span> </span>&#123;<br>        stockBuyers.forEach(as -&gt; as.observePriceChange(change, amount));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="UpD0s"></a></p><h2 id="3-抽象观察者"><a href="#3-抽象观察者" class="headerlink" title="3. 抽象观察者"></a>3. 抽象观察者</h2><p><a name="gfWnB"></a></p><h3 id="3-1-AbstractStockBuyer"><a href="#3-1-AbstractStockBuyer" class="headerlink" title="3.1 AbstractStockBuyer"></a>3.1 AbstractStockBuyer</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AbstractStockBuyer</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">AbstractStockBuyer</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buy</span><span class="hljs-params">(AbstractStock as)</span> </span>&#123;<br>        as.addStockBuyer(<span class="hljs-keyword">this</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">observePriceChange</span><span class="hljs-params">(<span class="hljs-keyword">double</span> change, <span class="hljs-keyword">double</span> amount)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="ticWA"></a></p><h2 id="4-具体观察者"><a href="#4-具体观察者" class="headerlink" title="4. 具体观察者"></a>4. 具体观察者</h2><p><a name="Ersly"></a></p><h3 id="4-1-StockBuyer"><a href="#4-1-StockBuyer" class="headerlink" title="4.1 StockBuyer"></a>4.1 StockBuyer</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StockBuyer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractStockBuyer</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">StockBuyer</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(name);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">observePriceChange</span><span class="hljs-params">(<span class="hljs-keyword">double</span> change, <span class="hljs-keyword">double</span> amount)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;提醒：&quot;</span> + <span class="hljs-keyword">this</span>.getName() + <span class="hljs-string">&quot;，股票加个变化幅度达到了&quot;</span> + change + <span class="hljs-string">&quot;%，现在已经达到了&quot;</span> + String.format(<span class="hljs-string">&quot;%.2f&quot;</span>, amount) + <span class="hljs-string">&quot;元，快快来买！&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><a name="mlyKu"></a></p><h2 id="5-客户端代码-2"><a href="#5-客户端代码-2" class="headerlink" title="5. 客户端代码"></a>5. 客户端代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        AbstractStock stock = <span class="hljs-keyword">new</span> Stock(<span class="hljs-string">&quot;xxxx&quot;</span>,<span class="hljs-number">100000</span>);<br><br>        AbstractStockBuyer buyer1 = <span class="hljs-keyword">new</span> StockBuyer(<span class="hljs-string">&quot;buyer1&quot;</span>);<br>        AbstractStockBuyer buyer2 = <span class="hljs-keyword">new</span> StockBuyer(<span class="hljs-string">&quot;buyer2&quot;</span>);<br>        AbstractStockBuyer buyer3 = <span class="hljs-keyword">new</span> StockBuyer(<span class="hljs-string">&quot;buyer3&quot;</span>);<br>        AbstractStockBuyer buyer4 = <span class="hljs-keyword">new</span> StockBuyer(<span class="hljs-string">&quot;buyer4&quot;</span>);<br><br>        buyer1.buy(stock);<br>        buyer2.buy(stock);<br>        buyer3.buy(stock);<br>        buyer4.buy(stock);<br><br>        stock.priceChange(<span class="hljs-number">3</span>);<br>        stock.priceChange(<span class="hljs-number">10</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="iWmws"></a></p><h2 id="6-优缺点及适用场景-2"><a href="#6-优缺点及适用场景-2" class="headerlink" title="6. 优缺点及适用场景"></a>6. 优缺点及适用场景</h2><p><a name="eyOz4"></a></p><h3 id="6-1-优点-2"><a href="#6-1-优点-2" class="headerlink" title="6.1 优点"></a>6.1 优点</h3><ul><li>在目标和观察者之间建立一个抽象的耦合。目标只需要维持这一个抽象观察者的集合，而无须了解其具体观察者</li><li>支持广播通信</li><li>符合开闭原则。增加新的具体观察者也无须修改原有代码</li></ul><p><a name="jKX4f"></a></p><h3 id="6-2-缺点-2"><a href="#6-2-缺点-2" class="headerlink" title="6.2 缺点"></a>6.2 缺点</h3><ul><li>如果目标有很多直接和间接观察者，将所有观察者都通知到位会花费很多时间</li><li>如果观察者和观察目标之间存在循环依赖，可能会导致系统崩溃</li><li>没有相应的机制让观察者知道目标对象是如何发生变化的，而仅仅只是知道其变化了</li></ul><p><a name="unTcC"></a></p><h3 id="6-3-适用场景-2"><a href="#6-3-适用场景-2" class="headerlink" title="6.3 适用场景"></a>6.3 适用场景</h3><ul><li>一个抽象模型有两个方面，其中一个方面依赖另一个方面，将这两个方面封装在独立的对象中使他们可以各自独立地改变和复用</li><li>需要在系统种创建一个触发链</li><li>一个对象的改变可能会引起一个或者多个其他对象也发生改变</li></ul><p><a name="zjBj4"></a></p><h1 id="九、状态模式"><a href="#九、状态模式" class="headerlink" title="九、状态模式"></a>九、状态模式</h1><p>某公司要为一银行开发一套信用卡业务系统，银行账户（Account）是该系统的核心类之一，通过分析，账户存在 3 中状态且在不同状态下账户存在不同的行为，具体说明如下：</p><ul><li>账户余额（balance）≥ 0，正常状态（NormalState），此时既可以存款也可以取款</li><li>2000 &lt; 账户余额（balance）&lt; 0，透支状态（OverdraftState），此时既可以存款也可以取款，但需要按天计算利息</li><li>账户余额（balance）≤ 2000，受限状态（RestrictedState），此时只能向账户存款而不能取款</li><li>根据余额的不同，以上 3 种状态可以相互转换</li></ul><p>试使用状态模式设计</p><p><a name="TpHzq"></a></p><h2 id="1-环境类"><a href="#1-环境类" class="headerlink" title="1. 环境类"></a>1. 环境类</h2><p><a name="up2yF"></a></p><h3 id="1-1-Account"><a href="#1-1-Account" class="headerlink" title="1.1 Account"></a>1.1 Account</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Account</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> AccountState state;<br><br>    <span class="hljs-keyword">private</span> String owner;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span> balance = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Account</span><span class="hljs-params">(String owner, <span class="hljs-keyword">double</span> balance)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.owner = owner;<br>        <span class="hljs-keyword">this</span>.balance = balance;<br>        state = <span class="hljs-keyword">new</span> NormalState(<span class="hljs-keyword">this</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setState</span><span class="hljs-params">(AccountState state)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.state = state;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getBalance</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> balance;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setBalance</span><span class="hljs-params">(<span class="hljs-keyword">double</span> balance)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.balance = balance;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deposit</span><span class="hljs-params">(<span class="hljs-keyword">double</span> amount)</span> </span>&#123;<br>        System.out.println(<span class="hljs-keyword">this</span>.owner + <span class="hljs-string">&quot;存款&quot;</span> + amount);<br>        state.deposit(amount);<br>        System.out.println(<span class="hljs-string">&quot;现在余额为：&quot;</span> + <span class="hljs-keyword">this</span>.balance);<br>        System.out.println(<span class="hljs-string">&quot;现在账户状态为：&quot;</span> + <span class="hljs-keyword">this</span>.state.getClass().getName());<br>        System.out.println(<span class="hljs-string">&quot;-----------------------------------------------&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">withdraw</span><span class="hljs-params">(<span class="hljs-keyword">double</span> amount)</span> </span>&#123;<br>        System.out.println(<span class="hljs-keyword">this</span>.owner + <span class="hljs-string">&quot;取款&quot;</span> + amount);<br>        state.withdraw(amount);<br>        System.out.println(<span class="hljs-string">&quot;现在余额为：&quot;</span> + <span class="hljs-keyword">this</span>.balance);<br>        System.out.println(<span class="hljs-string">&quot;现在账户状态为：&quot;</span> + <span class="hljs-keyword">this</span>.state.getClass().getName());<br>        System.out.println(<span class="hljs-string">&quot;-----------------------------------------------&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">computeInterest</span><span class="hljs-params">()</span> </span>&#123;<br>        state.computeInterest();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="XGmam"></a></p><h2 id="2-抽象状态类"><a href="#2-抽象状态类" class="headerlink" title="2. 抽象状态类"></a>2. 抽象状态类</h2><p><a name="gNPki"></a></p><h3 id="2-1-AccountState"><a href="#2-1-AccountState" class="headerlink" title="2.1 AccountState"></a>2.1 AccountState</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AccountState</span> </span>&#123;<br><br>    <span class="hljs-keyword">protected</span> Account account;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deposit</span><span class="hljs-params">(<span class="hljs-keyword">double</span> amount)</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">withdraw</span><span class="hljs-params">(<span class="hljs-keyword">double</span> amount)</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">computeInterest</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">stateCheck</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="nSXwU"></a></p><h2 id="3-具体状态类"><a href="#3-具体状态类" class="headerlink" title="3. 具体状态类"></a>3. 具体状态类</h2><p><a name="LhN5j"></a></p><h3 id="3-1-NormalState"><a href="#3-1-NormalState" class="headerlink" title="3.1 NormalState"></a>3.1 NormalState</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NormalState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AccountState</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">NormalState</span><span class="hljs-params">(Account account)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.account = account;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">NormalState</span><span class="hljs-params">(AccountState accountState)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.account = accountState.account;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deposit</span><span class="hljs-params">(<span class="hljs-keyword">double</span> amount)</span> </span>&#123;<br>        account.setBalance(account.getBalance() + amount);<br>        stateCheck();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">withdraw</span><span class="hljs-params">(<span class="hljs-keyword">double</span> amount)</span> </span>&#123;<br>        account.setBalance(account.getBalance() - amount);<br>        stateCheck();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">computeInterest</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;正常状态，无须支付利息&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">stateCheck</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (account.getBalance() &gt; -<span class="hljs-number">2000</span> &amp;&amp; account.getBalance() &lt;= <span class="hljs-number">0</span>) &#123;<br>            account.setState(<span class="hljs-keyword">new</span> OverdraftState(<span class="hljs-keyword">this</span>));<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (account.getBalance() &lt;= -<span class="hljs-number">2000</span>) &#123;<br>            account.setState(<span class="hljs-keyword">new</span> RestrictedState(<span class="hljs-keyword">this</span>));<br>        &#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="xJ1hr"></a></p><h3 id="3-2-OverdraftState"><a href="#3-2-OverdraftState" class="headerlink" title="3.2 OverdraftState"></a>3.2 OverdraftState</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OverdraftState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AccountState</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">OverdraftState</span><span class="hljs-params">(AccountState accountState)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.account = accountState.account;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deposit</span><span class="hljs-params">(<span class="hljs-keyword">double</span> amount)</span> </span>&#123;<br>        account.setBalance(account.getBalance() + amount);<br>        stateCheck();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">withdraw</span><span class="hljs-params">(<span class="hljs-keyword">double</span> amount)</span> </span>&#123;<br>        account.setBalance(account.getBalance() - amount);<br>        stateCheck();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">computeInterest</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;透支状态，需要支付利息&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">stateCheck</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (account.getBalance() &gt; <span class="hljs-number">0</span>) &#123;<br>            account.setState(<span class="hljs-keyword">new</span> NormalState(<span class="hljs-keyword">this</span>));<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (account.getBalance() &lt;= -<span class="hljs-number">2000</span>) &#123;<br>            account.setState(<span class="hljs-keyword">new</span> RestrictedState(<span class="hljs-keyword">this</span>));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="mdDTP"></a></p><h3 id="3-3-RestrictedState"><a href="#3-3-RestrictedState" class="headerlink" title="3.3 RestrictedState"></a>3.3 RestrictedState</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RestrictedState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AccountState</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">RestrictedState</span><span class="hljs-params">(AccountState accountState)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.account = accountState.account;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deposit</span><span class="hljs-params">(<span class="hljs-keyword">double</span> amount)</span> </span>&#123;<br>        account.setBalance(account.getBalance() + amount);<br>        stateCheck();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">withdraw</span><span class="hljs-params">(<span class="hljs-keyword">double</span> amount)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;账户受限，取款失败&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">computeInterest</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;受限状态，需要支付利息&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">stateCheck</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (account.getBalance() &gt; <span class="hljs-number">0</span>) &#123;<br>            account.setState(<span class="hljs-keyword">new</span> NormalState(<span class="hljs-keyword">this</span>));<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (account.getBalance() &gt; -<span class="hljs-number">2000</span>) &#123;<br>            account.setState(<span class="hljs-keyword">new</span> OverdraftState(<span class="hljs-keyword">this</span>));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="m5ugP"></a></p><h2 id="4-客户端代码"><a href="#4-客户端代码" class="headerlink" title="4. 客户端代码"></a>4. 客户端代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Account account = <span class="hljs-keyword">new</span> Account(<span class="hljs-string">&quot;用户1&quot;</span>, <span class="hljs-number">0.0</span>);<br>        account.deposit(<span class="hljs-number">1000</span>);<br>        account.withdraw(<span class="hljs-number">2000</span>);<br>        account.deposit(<span class="hljs-number">3000</span>);<br>        account.withdraw(<span class="hljs-number">4000</span>);<br>        account.withdraw(<span class="hljs-number">1000</span>);<br>        account.computeInterest();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="a7jW0"></a></p><h2 id="5-优缺点及适用场景"><a href="#5-优缺点及适用场景" class="headerlink" title="5. 优缺点及适用场景"></a>5. 优缺点及适用场景</h2><p><a name="rHdUN"></a></p><h3 id="5-1-优点-1"><a href="#5-1-优点-1" class="headerlink" title="5.1 优点"></a>5.1 优点</h3><ul><li>封装了状态的转换规则，可以对状态转换代码进行集中管理</li><li>将所有与某个状态有关的行为放到一个类中，只需要注入一个不同的状态对象即可使环境对象拥有不同的行为</li><li>可以避免适用庞大的条件语句将业务方法和状态转换代码交织在一起</li></ul><p><a name="dAIXt"></a></p><h3 id="5-2-缺点-1"><a href="#5-2-缺点-1" class="headerlink" title="5.2 缺点"></a>5.2 缺点</h3><ul><li>会增加类和对象的个数，导致系统运行开销增大</li><li>增加系统设计难度，状态模式的结构和实现都较为复杂</li><li>对开闭原则的支持并不好，如果需要增加一个新的状态，则会导致其他状态类也要相继改变相应的源代码</li></ul><p><a name="bXFMv"></a></p><h3 id="5-3-适用场景-1"><a href="#5-3-适用场景-1" class="headerlink" title="5.3 适用场景"></a>5.3 适用场景</h3><ul><li>对象的行为依赖于它的状态（例如某些属性值），状态的改变将导致行为的变化</li><li>在代码中包含大量与对象有关的条件语句，这些条件语句的出现会导致代码的可维护性和灵活性变差</li></ul><p><a name="EAY5w"></a></p><h1 id="十、策略模式"><a href="#十、策略模式" class="headerlink" title="十、策略模式"></a>十、策略模式</h1><p>排序有多种方法，如选择排序、插入排序、快速排序等，某系统要求在多种排序方案中灵活选择某一种排序方案，但不修改源代码，现使用策略模式进行设计</p><p><a name="xlmp2"></a></p><h2 id="1-环境类-1"><a href="#1-环境类-1" class="headerlink" title="1. 环境类"></a>1. 环境类</h2><p><a name="SI4aO"></a></p><h3 id="1-1-ParamArray"><a href="#1-1-ParamArray" class="headerlink" title="1.1 ParamArray"></a>1.1 ParamArray</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ParamArray</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span>[] array;<br><br>    <span class="hljs-keyword">private</span> ArraySort arraySort;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ParamArray</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] array)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.array = array;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setSort</span><span class="hljs-params">(ArraySort arraySort)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;使用&quot;</span> + arraySort.getClass().getName() + <span class="hljs-string">&quot;算法&quot;</span>);<br>        <span class="hljs-keyword">this</span>.arraySort = arraySort;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] sort() &#123;<br>        <span class="hljs-keyword">return</span> arraySort.sort(array);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="H9Rc5"></a></p><h2 id="2-抽象策略类"><a href="#2-抽象策略类" class="headerlink" title="2. 抽象策略类"></a>2. 抽象策略类</h2><p><a name="Jmfto"></a></p><h3 id="2-1-ArraySort"><a href="#2-1-ArraySort" class="headerlink" title="2.1 ArraySort"></a>2.1 ArraySort</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ArraySort</span> </span>&#123;<br>    <span class="hljs-keyword">int</span>[] sort(<span class="hljs-keyword">int</span>[] array);<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="Gsd9f"></a></p><h2 id="3-具体策略类"><a href="#3-具体策略类" class="headerlink" title="3. 具体策略类"></a>3. 具体策略类</h2><p><a name="H7WJk"></a></p><h3 id="3-1-InsertionSort"><a href="#3-1-InsertionSort" class="headerlink" title="3.1 InsertionSort"></a>3.1 InsertionSort</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InsertionSort</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ArraySort</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] sort(<span class="hljs-keyword">int</span>[] array) &#123;<br>        <span class="hljs-comment">// i代表待排序的索引</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; array.length; i++)&#123;<br>            <span class="hljs-keyword">int</span> t = array[i];<br>            <span class="hljs-comment">// j代表以排好序的区域索引</span><br>            <span class="hljs-keyword">int</span> j = i - <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">while</span>(j &gt;= <span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-keyword">if</span>(t &lt; array[j])&#123;<br>                    array[j + <span class="hljs-number">1</span>] = array[j];<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">// 退出循环，减少比较次数</span><br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                j--;<br>            &#125;<br>            array[j + <span class="hljs-number">1</span>] = t;<br>        &#125;<br>        <span class="hljs-keyword">return</span> array;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] a, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> t = a[i];<br>        a[i] = a[j];<br>        a[j] = t;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="Pt9q8"></a></p><h3 id="3-2-QuickSort"><a href="#3-2-QuickSort" class="headerlink" title="3.2 QuickSort"></a>3.2 QuickSort</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">QuickSort</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ArraySort</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] sort(<span class="hljs-keyword">int</span>[] array) &#123;<br>        Arrays.sort(array);<br>        <span class="hljs-keyword">return</span> array;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="oCVh3"></a></p><h3 id="3-3-SelectionSort"><a href="#3-3-SelectionSort" class="headerlink" title="3.3 SelectionSort"></a>3.3 SelectionSort</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SelectionSort</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ArraySort</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] sort(<span class="hljs-keyword">int</span>[] array) &#123;<br>        <span class="hljs-comment">// i代表着每轮选择出来的最小元素要交换的目标索引</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; array.length - <span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-comment">// s代表着当前最小元素的索引</span><br>            <span class="hljs-keyword">int</span> s = i;<br>            <span class="hljs-comment">// j的作用是遍历s之后的数，查找是否还有比s还小的数</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = s + <span class="hljs-number">1</span>; j &lt; array.length; j++) &#123;<br>                <span class="hljs-keyword">if</span> (array[s] &gt; array[j]) &#123;<br>                    s = j;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (s != i) &#123;<br>                swap(array, s, i);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> array;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] a, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> t = a[i];<br>        a[i] = a[j];<br>        a[j] = t;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="Ancjq"></a></p><h2 id="4-客户端类"><a href="#4-客户端类" class="headerlink" title="4. 客户端类"></a>4. 客户端类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] before = &#123;<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">7</span>,<span class="hljs-number">6</span>,<span class="hljs-number">9</span>,<span class="hljs-number">8</span>&#125;;<br>        ParamArray paramArray = <span class="hljs-keyword">new</span> ParamArray(before);<br>        paramArray.setSort(<span class="hljs-keyword">new</span> QuickSort());<br><br>        <span class="hljs-keyword">int</span>[] after = paramArray.sort();<br>        System.out.println(<span class="hljs-string">&quot;排序后：&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j : after) &#123;<br>            System.out.print(j + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="RhFtf"></a></p><h2 id="5-优缺点和适用场景"><a href="#5-优缺点和适用场景" class="headerlink" title="5. 优缺点和适用场景"></a>5. 优缺点和适用场景</h2><p><a name="LDGFC"></a></p><h2 id="5-1-优点-2"><a href="#5-1-优点-2" class="headerlink" title="5.1 优点"></a>5.1 优点</h2><ul><li>完美支持开闭原则</li><li>避免多重条件选择语句</li><li>可以复用</li></ul><p><a name="Fm0kE"></a></p><h2 id="5-2-缺点-2"><a href="#5-2-缺点-2" class="headerlink" title="5.2 缺点"></a>5.2 缺点</h2><ul><li>客户端必须知道所有算法或行为的情况，才方便选择</li><li>可能会造成系统产生大量的策略类</li><li>不支持一个策略类完成部分功能后再使用另一个策略类完成剩余功能</li></ul><p><a name="qgvx3"></a></p><h3 id="5-3-适用场景-2"><a href="#5-3-适用场景-2" class="headerlink" title="5.3 适用场景"></a>5.3 适用场景</h3><ul><li>一个系统需要动态地选择几种处理策略</li><li>避免使用难以维护的多重选择语句</li><li>不希望客户端知道接触复杂的逻辑结构</li></ul><p><a name="D4zR9"></a></p><h1 id="十一、模板方法模式"><a href="#十一、模板方法模式" class="headerlink" title="十一、模板方法模式"></a>十一、模板方法模式</h1><p>假设每个人一天的时间花费在工作（work）和睡觉上（sleep），现有艺术家和程序员两种职业，艺术家的工作内容是绘画；程序员的工作内容是写程序。请试着使用模板方法描绘这两种职业的一天</p><p><a name="rWPg5"></a></p><h2 id="1-抽象类"><a href="#1-抽象类" class="headerlink" title="1. 抽象类"></a>1. 抽象类</h2><p><a name="cs4z4"></a></p><h3 id="1-1-People"><a href="#1-1-People" class="headerlink" title="1.1 People"></a>1.1 People</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">People</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sleep</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;工作完睡觉&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">thisDay</span><span class="hljs-params">()</span> </span>&#123;<br>        work();<br>        sleep();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="QHCys"></a></p><h2 id="2-具体类"><a href="#2-具体类" class="headerlink" title="2. 具体类"></a>2. 具体类</h2><p><a name="jZHoJ"></a></p><h3 id="2-1-Artist"><a href="#2-1-Artist" class="headerlink" title="2.1 Artist"></a>2.1 Artist</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Artist</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">People</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;我的工作是绘画&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="yGYPg"></a></p><h3 id="2-2-Programmer"><a href="#2-2-Programmer" class="headerlink" title="2.2 Programmer"></a>2.2 Programmer</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Programmer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">People</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;我的工作是写程序&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="NTLMY"></a></p><h2 id="3-客户端代码-1"><a href="#3-客户端代码-1" class="headerlink" title="3. 客户端代码"></a>3. 客户端代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        People programmer = <span class="hljs-keyword">new</span> Programmer();<span class="hljs-comment">// 可通过配置文件注入</span><br>        programmer.thisDay();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="cs1ll"></a></p><h2 id="4-优缺点及适用场景"><a href="#4-优缺点及适用场景" class="headerlink" title="4. 优缺点及适用场景"></a>4. 优缺点及适用场景</h2><p><a name="KLVTW"></a></p><h3 id="4-1-优点-1"><a href="#4-1-优点-1" class="headerlink" title="4.1 优点"></a>4.1 优点</h3><ul><li>代码复用</li><li>可以通过子类覆盖父类的钩子方法来决定某一步骤是否执行</li><li>符合单一职责和开闭原则。通过子类来覆盖父类的基本方法，不同的子类可以提供不同的方法实现，更换和新增子类也很方便</li></ul><p><a name="xBVnD"></a></p><h3 id="4-2-缺点-1"><a href="#4-2-缺点-1" class="headerlink" title="4.2 缺点"></a>4.2 缺点</h3><ul><li>增加系统复杂度。每一个基本方法的不同实现都需要新增一个子类</li></ul><p><a name="IWcNY"></a></p><h3 id="4-3-适用场景-1"><a href="#4-3-适用场景-1" class="headerlink" title="4.3 适用场景"></a>4.3 适用场景</h3><ul><li>对复杂的算法进行分割。延迟到子类实现</li><li>可以将各子类的公共行为提取并集中到一个公共父类种，避免代码重复</li><li>需要通过子类来父类算法种的某个步骤是否执行，实现了子类对父类算法的方向控制（钩子方法）</li></ul><p><a name="DoWIc"></a></p><h1 id="十二、访问者模式"><a href="#十二、访问者模式" class="headerlink" title="十二、访问者模式"></a>十二、访问者模式</h1><p>由于访问者模式的使用条件较为苛刻，本身结构也较为复杂，因此在实际应用种使用频率不是特别高。<br />主要应用于 XML 文档解析、编译器的设计、复杂的集合对象处理等领域<br />本文不以案例展示，仅介绍其优缺点及适用场景</p><p><a name="uZMZM"></a></p><h2 id="1-优缺点及适用场景-2"><a href="#1-优缺点及适用场景-2" class="headerlink" title="1. 优缺点及适用场景"></a>1. 优缺点及适用场景</h2><p><a name="chkFT"></a></p><h3 id="1-1-优点-2"><a href="#1-1-优点-2" class="headerlink" title="1.1 优点"></a>1.1 优点</h3><ul><li>增加新的访问操作很方便，无需修改源代码，符合开闭原则</li><li>将有关元素对象的访问行为集中到一个访问者对象种，而不是分散在一个个的元素类种，使职责更加清晰</li><li>访问者模式让用户能够在不修改现有元素类层次结构的情况下定义作用于该层次结构的操作</li></ul><p><a name="XlaR4"></a></p><h3 id="1-2-缺点-2"><a href="#1-2-缺点-2" class="headerlink" title="1.2 缺点"></a>1.2 缺点</h3><ul><li>增加新的元素类很困难。每增加一个新的元素类都意味着要在抽象访问者角色中增加一个新的抽象操作，并在每一个具体访问者类中新增相应的具体操作，违背了开闭原则</li><li>访问者模式破坏了对象的封装性。访问者模式要求访问者对象访问并调用每一个元素对象的操作，这意味着元素对象有时候必须暴露一些自己的内部操作和内部状态，否则无法供访问者访问</li></ul><p><a name="FmbLm"></a></p><h3 id="1-3-适用场景-2"><a href="#1-3-适用场景-2" class="headerlink" title="1.3 适用场景"></a>1.3 适用场景</h3><ul><li>一个对象结构包含多个类型的对象，希望对这些对象实施一些依赖其具体类型的操作</li><li>需要对一个结构对象进行很多不同的并且不相关的操作，而需要避免让这些操作污染这些对象的类，也不希望在增加新操作时修改这些类</li><li>对象结构中对象对应的类很少改变，但经常需要在此对象结构上定义新的操作</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java 设计模式</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>结构型模式</title>
    <link href="/2022/05/16/Java%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <url>/2022/05/16/Java%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p><a name="a11edfd6"></a></p><h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><p>结构型模式（Structural Pattern）关注<strong>如何将现有类或对象组织在一起形成更加强大的结构</strong><br />不同的结构型模式从不同的角度来组合类和对象，他们的尽可能满足各种面向对象设计原则的同时，为类或对象的组合提供一系列巧妙的解决方案  <br />结构型模式可以描述两种不同的东西——<strong>类与类的实例（对象）</strong><br />因此结构型模式也被分为两种，分别是<strong>类结构型模式</strong>和<strong>对象结构型模式</strong></p><p>类结构型模式关心<strong>类的组合</strong>，由多个类组合成一个强大的系统，一般只存在继承和实现关系</p><p>对象结构型模式中关心<strong>类与对象的组合</strong>，通过关联关系在一个类中定义另外一个类的实例对象，如何通过该对象调用相应的方法</p><p>根据合成复用原则，在系统中尽量使用关联关系来代替继承关系，因此大部分结构型模式都是对象结构型模式</p><p>结构型模式共有七种：</p><table><thead><tr><th><strong>设计原则名称</strong></th><th><strong>定义</strong></th><th><strong>使用频率</strong></th></tr></thead><tbody><tr><td>适配器模式<br />（Adapter Pattern）</td><td>将一个类的接口转换成客户希望的另一个接口。适配器模式让那些不兼容的类可以一起工作</td><td>⭐⭐⭐⭐</td></tr><tr><td>桥接模式<br />（Bridge Pattern）</td><td>将抽象部分与它的实现部分解耦，使得两者能够独立变化</td><td>⭐⭐⭐</td></tr><tr><td>组合模式<br />（Composite Pattern）</td><td>组合多个对象形成树形结构以表示具有部分-整体关系的层次结构。组合模式让客户端可以统一对待单个对象和组合对象</td><td>⭐⭐⭐⭐</td></tr><tr><td>装饰模式<br />（Decorator Pattern）</td><td>动态地给一个对象增加一些额外的职责。就扩展功能而言，装饰模式提供了一种比使用子类更加灵活的代替方案</td><td>⭐⭐⭐</td></tr><tr><td>外观模式<br />（Facade Pattern）</td><td>为子系统的一组接口提供一个统一的入口。外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用</td><td>⭐⭐⭐⭐⭐</td></tr><tr><td>享元模式<br />（Flyweight Pattern）</td><td>运用共享技术有效地支持大量细粒度对象的复用</td><td>⭐</td></tr><tr><td>代理模式<br />（Proxy Pattern）</td><td>给某一个对象提供一个代理或占位符，并由代理对象来控制原对象的访问</td><td>⭐⭐⭐⭐</td></tr></tbody></table><p><a name="NzaO7"></a></p><h1 id="二、适配器模式"><a href="#二、适配器模式" class="headerlink" title="二、适配器模式"></a>二、适配器模式</h1><p>算法适配。 现有一个接口DataOperation定义了排序方法sort(int[])和查找方法search(int[],int)，已知类QuickSort的quickSort(int[])方法实现了快速排序算法，类BinarySearch的binarySearch(int[],int)方法实现了二分查找算法。现使用适配器模式设计一个系统，在不修改源代码的情况下将类QuickSort和类BinarySearch的方法适配到DataOperation接口中<br><a name="ennM2"></a></p><h2 id="1-目标类"><a href="#1-目标类" class="headerlink" title="1. 目标类"></a>1. 目标类</h2><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">DataOperation</span> </span>&#123;<br>    <span class="hljs-keyword">int</span>[] sort(<span class="hljs-keyword">int</span>[] a);<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">search</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] a,<span class="hljs-keyword">int</span> b)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="VvxHR"></a></p><h2 id="2-适配者"><a href="#2-适配者" class="headerlink" title="2. 适配者"></a>2. 适配者</h2><p><a name="puq8E"></a></p><h3 id="2-1-BinarySearch"><a href="#2-1-BinarySearch" class="headerlink" title="2.1 BinarySearch"></a>2.1 BinarySearch</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BinarySearch</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">binarySearch</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] a,<span class="hljs-keyword">int</span> b)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> Arrays.binarySearch(a, b);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="ULc8S"></a></p><h3 id="2-2-QuickSort"><a href="#2-2-QuickSort" class="headerlink" title="2.2 QuickSort"></a>2.2 QuickSort</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">QuickSort</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] quickSort(<span class="hljs-keyword">int</span>[] a) &#123;<br>        Arrays.sort(a);<br>        <span class="hljs-keyword">return</span> a;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="ASc6V"></a></p><h2 id="3-适配器"><a href="#3-适配器" class="headerlink" title="3. 适配器"></a>3. 适配器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Adapter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">DataOperation</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> BinarySearch binarySearch;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> QuickSort quickSort;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Adapter</span><span class="hljs-params">()</span> </span>&#123;<br>        binarySearch = <span class="hljs-keyword">new</span> BinarySearch();<br>        quickSort = <span class="hljs-keyword">new</span> QuickSort();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] sort(<span class="hljs-keyword">int</span>[] a) &#123;<br>        <span class="hljs-keyword">return</span> quickSort.quickSort(a);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">search</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] a, <span class="hljs-keyword">int</span> b)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> binarySearch.binarySearch(a, b);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><a name="RepMf"></a></p><h2 id="4-客户端代码"><a href="#4-客户端代码" class="headerlink" title="4. 客户端代码"></a>4. 客户端代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">Adapter adapter = <span class="hljs-keyword">new</span> Adapter();         <br><span class="hljs-keyword">int</span>[] a = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">3</span>,<span class="hljs-number">7</span>,<span class="hljs-number">5</span>,<span class="hljs-number">9</span>,<span class="hljs-number">3</span>,<span class="hljs-number">10</span>&#125;;        <br>System.out.println(adapter.search(a, <span class="hljs-number">9</span>));<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i : adapter.sort(a)) &#123;          <br>    System.out.print(i+<span class="hljs-string">&quot; &quot;</span>);             <br>&#125;                                        <br></code></pre></td></tr></table></figure><p><a name="Ad8ch"></a></p><h2 id="5-优缺点和适用场景"><a href="#5-优缺点和适用场景" class="headerlink" title="5. 优缺点和适用场景"></a>5. 优缺点和适用场景</h2><p><a name="Z4XLm"></a></p><h3 id="5-1-优点"><a href="#5-1-优点" class="headerlink" title="5.1 优点"></a>5.1 优点</h3><ul><li>将目标类和适配者类解耦，无须修改原有结构</li><li>增加了类的透明性和复用性，具体业务都封装在适配者类中，并且适配者类可以重复适用</li><li>灵活性和扩张性都非常好，只需要灵活更换适配器即可</li></ul><p><a name="QJFjc"></a></p><h3 id="5-2-缺点"><a href="#5-2-缺点" class="headerlink" title="5.2 缺点"></a>5.2 缺点</h3><p>由于类适配器模式的缺点较多，根据合成复用原则也适用较少，所以只总结了对象适配器模式的缺点：</p><ul><li><p>实现过程较为复杂，在该模式下如果适配器中需要置换适配者类的方法，那么就需要更改原代码，这样不符合开闭原则，所以需要另外建子类完成，增加系统复杂度<br><a name="GtfPj"></a></p><h2 id=""><a href="#" class="headerlink" title=""></a><br /></h2><p><a name="YzOKd"></a></p><h3 id="5-3-适用场景"><a href="#5-3-适用场景" class="headerlink" title="5.3 适用场景"></a>5.3 适用场景</h3></li><li><p>系统中需要使用一些现有的类，而这些类的接口（例如方法名）不符合系统的需要，甚至没有这些类的源代码</p></li><li><p>想创建一个可以重复使用的类，用于和一些彼此之间没有太大关联的类（包括在将来想引进的类）一起工作</p></li></ul><p><a name="T3N8u"></a></p><h1 id="三、桥接模式"><a href="#三、桥接模式" class="headerlink" title="三、桥接模式"></a>三、桥接模式</h1><p>毛笔和蜡笔是两种常见的文具，它们都归属于画笔。假如需要大、中、小 3 种型号的画笔，能够绘制 12 种不同的颜色，如果使用蜡笔，需要准备 3 × 12 = 36 支，但如果使用毛笔，只需要提供 3 种型号的毛笔，外加一个包含 12 种颜色的调色板，涉及的对象个数仅为 3 + 12 = 15，远小于 36，却能实现与 36 支蜡笔同样的功能。<br />请使用桥接模式实现毛笔绘制的系统结构</p><p><a name="VFeao"></a></p><h2 id="1-抽象类"><a href="#1-抽象类" class="headerlink" title="1. 抽象类"></a>1. 抽象类</h2><p><a name="FlZA3"></a></p><h3 id="1-1-WritingBrush"><a href="#1-1-WritingBrush" class="headerlink" title="1.1 WritingBrush"></a>1.1 WritingBrush</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WritingBrush</span> </span>&#123;<br><br>    <span class="hljs-keyword">protected</span> Color color;<br><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> String <span class="hljs-title">draw</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Color <span class="hljs-title">getColor</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> color;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setColor</span><span class="hljs-params">(Color color)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.color = color;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><a name="thqr6"></a></p><h2 id="2-具体抽象类"><a href="#2-具体抽象类" class="headerlink" title="2. 具体抽象类"></a>2. 具体抽象类</h2><p><a name="THsLR"></a></p><h3 id="2-1-BigWritingBrush"><a href="#2-1-BigWritingBrush" class="headerlink" title="2.1 BigWritingBrush"></a>2.1 BigWritingBrush</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BigWritingBrush</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WritingBrush</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> String <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;使用大号毛笔，染上&quot;</span> + color.coloured() + <span class="hljs-string">&quot;后绘画&quot;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><a name="hOIGD"></a></p><h3 id="2-2-MidWritingBrush"><a href="#2-2-MidWritingBrush" class="headerlink" title="2.2 MidWritingBrush"></a>2.2 MidWritingBrush</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MidWritingBrush</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WritingBrush</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> String <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;使用中号毛笔，染上&quot;</span> + color.coloured() + <span class="hljs-string">&quot;后绘画&quot;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><a name="XRVu6"></a></p><h2 id="3-实现类接口"><a href="#3-实现类接口" class="headerlink" title="3. 实现类接口"></a>3. 实现类接口</h2><p><a name="Tj4Ln"></a></p><h3 id="3-1-Color"><a href="#3-1-Color" class="headerlink" title="3.1 Color"></a>3.1 Color</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Color</span> </span>&#123;<br>    <span class="hljs-function">String <span class="hljs-title">coloured</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="F7O0k"></a></p><h2 id="4-具体实现类"><a href="#4-具体实现类" class="headerlink" title="4. 具体实现类"></a>4. 具体实现类</h2><p><a name="YYlXP"></a></p><h3 id="4-1-Red"><a href="#4-1-Red" class="headerlink" title="4.1 Red"></a>4.1 Red</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Red</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Color</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">coloured</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;红色&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="aCuMF"></a></p><h3 id="4-2-Green"><a href="#4-2-Green" class="headerlink" title="4.2 Green"></a>4.2 Green</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Green</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Color</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">coloured</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;绿色&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="ts7NV"></a></p><h2 id="5-客户端代码"><a href="#5-客户端代码" class="headerlink" title="5. 客户端代码"></a>5. 客户端代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        WritingBrush bigWritingBrush = <span class="hljs-keyword">new</span> BigWritingBrush();<br><br>        Color red = <span class="hljs-keyword">new</span> Red();<br>        Color green = <span class="hljs-keyword">new</span> Green();<br><br>        bigWritingBrush.setColor(red);<br>        System.out.println(bigWritingBrush.draw());<br><br>        bigWritingBrush.setColor(green);<br>        System.out.println(bigWritingBrush.draw());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="FqvMx"></a></p><h2 id="-1"><a href="#-1" class="headerlink" title=""></a></h2><p><a name="ohaDf"></a></p><h2 id="6-优缺点和适用场景"><a href="#6-优缺点和适用场景" class="headerlink" title="6. 优缺点和适用场景"></a>6. 优缺点和适用场景</h2><p><a name="v3fOY"></a></p><h3 id="6-1-优点"><a href="#6-1-优点" class="headerlink" title="6.1 优点"></a>6.1 优点</h3><ul><li><p>解耦。分离抽象接口及其实现部分</p></li><li><p>取代多层继承方案。更贴和合成复用原则</p></li><li><p>提高可扩展性。在抽象和接口两个维度中进行维护时均不需要修改任何一个维度，符合开闭原则<br><a name="SNB4l"></a></p><h3 id="6-2-缺点"><a href="#6-2-缺点" class="headerlink" title="6.2 缺点"></a>6.2 缺点</h3></li><li><p>增加系统的理解和设计难度</p></li><li><p>需要正确地识别出抽象和实现两个维度<br><a name="CCqED"></a></p><h3 id="6-3-适用场景"><a href="#6-3-适用场景" class="headerlink" title="6.3 适用场景"></a>6.3 适用场景</h3></li><li><p>如果一个系统需要在抽象化和具体化之间增加更多的灵活性，避免在两个层次之间建立静态的继承关系，通过调节模式可以使他们在抽象层建立一个关联关系</p></li><li><p>抽象部分和实现部分可以用继承的方式独立扩张，而不互相影响，在程序运行时，可以动态地加一个抽象化子类的对象，和一个实现化子类的对象进行组合，即系统需要对抽象化对象和实现化对象进行动态耦合</p></li><li><p>一个类存在两个或多个独立变化的维度，且这两个或多个维度都需要独立进行扩张 </p></li><li><p> 对于那些不希望使用继承或因为多层继承导致系统类的个数急剧增加的系统，桥接模式尤为使用 </p></li></ul><p><a name="CIAWB"></a></p><h1 id="四、组合模式"><a href="#四、组合模式" class="headerlink" title="四、组合模式"></a>四、组合模式</h1><p>某软件公司要开发一个杀毒软件，该软件既可以对某个文件夹（Folder）杀毒，也可以对某个指定的文件（File）杀毒。该软件还可以根据各类文件的特点为不同类型的文件提供不同德杀毒方式，例如图像文件（ImageFile）和文本文件（TextFile）的杀毒方式就有所差异。<br />使用组合模式来设计该杀毒软件的整体框架</p><p>以下采用的是安全组合模式，还有一种透明组合模式，但安全性不高，存在无意义的方法</p><p><a name="Nl0bg"></a></p><h2 id="1-抽象构件"><a href="#1-抽象构件" class="headerlink" title="1. 抽象构件"></a>1. 抽象构件</h2><p><a name="oU6ht"></a></p><h3 id="1-1-KillVirus"><a href="#1-1-KillVirus" class="headerlink" title="1.1 KillVirus"></a>1.1 KillVirus</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">KillVirus</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">killVirus</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="mZ6Bk"></a></p><h3 id="1-2-AbstractFile"><a href="#1-2-AbstractFile" class="headerlink" title="1.2 AbstractFile"></a>1.2 AbstractFile</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AbstractFile</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">KillVirus</span> </span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="hQUkn"></a></p><h2 id="2-叶子构件"><a href="#2-叶子构件" class="headerlink" title="2. 叶子构件"></a>2. 叶子构件</h2><p><a name="KHUFf"></a></p><h3 id="2-1-File"><a href="#2-1-File" class="headerlink" title="2.1 File"></a>2.1 File</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">File</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractFile</span> </span>&#123;<br><br>    <span class="hljs-keyword">protected</span> String name;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">File</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">killVirus</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-comment">// 文件特有的方法，而文件夹没有，比如修改扩展名</span><br>&#125;<br></code></pre></td></tr></table></figure><p><a name="CgH5V"></a></p><h3 id="2-2-ImageFile"><a href="#2-2-ImageFile" class="headerlink" title="2.2 ImageFile"></a>2.2 ImageFile</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ImageFile</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">File</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ImageFile</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(name);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">killVirus</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;- - - - 对图片文件&#x27;&quot;</span> + name + <span class="hljs-string">&quot;&#x27;进行杀毒&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="Fwd6X"></a></p><h3 id="2-3-TextFile"><a href="#2-3-TextFile" class="headerlink" title="2.3 TextFile"></a>2.3 TextFile</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TextFile</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">File</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">TextFile</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(name);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">killVirus</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;- - - - 对文本文件&#x27;&quot;</span> + name + <span class="hljs-string">&quot;&#x27;进行杀毒&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="ym0Ny"></a></p><h2 id="3-容器构件"><a href="#3-容器构件" class="headerlink" title="3. 容器构件"></a>3. 容器构件</h2><p><a name="EXEcN"></a></p><h3 id="3-1-Folder"><a href="#3-1-Folder" class="headerlink" title="3.1 Folder"></a>3.1 Folder</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Folder</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractFile</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> ArrayList&lt;AbstractFile&gt; files = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Folder</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(AbstractFile file)</span> </span>&#123;<br>        files.add(file);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(AbstractFile file)</span> </span>&#123;<br>        files.remove(file);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">killVirus</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;* * * * 对文件夹&#x27;&quot;</span> + name + <span class="hljs-string">&quot;&#x27;进行杀毒&quot;</span>);<br>        <span class="hljs-keyword">for</span> (AbstractFile file : files) &#123;<br>            file.killVirus();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="X8sVN"></a></p><h2 id="4-客户端代码-1"><a href="#4-客户端代码-1" class="headerlink" title="4. 客户端代码"></a>4. 客户端代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Folder folder1, folder2;<br><br>        File file1, file2, file3, file4;<br><br>        file1 = <span class="hljs-keyword">new</span> ImageFile(<span class="hljs-string">&quot;小龙女.jpg&quot;</span>);<br>        file2 = <span class="hljs-keyword">new</span> ImageFile(<span class="hljs-string">&quot;张无忌.png&quot;</span>);<br>        file3 = <span class="hljs-keyword">new</span> TextFile(<span class="hljs-string">&quot;葵花宝典.doc&quot;</span>);<br>        file4 = <span class="hljs-keyword">new</span> TextFile(<span class="hljs-string">&quot;九阳真经.txt&quot;</span>);<br><br>        folder1 = <span class="hljs-keyword">new</span> Folder(<span class="hljs-string">&quot;图片文件夹&quot;</span>);<br>        folder2 = <span class="hljs-keyword">new</span> Folder(<span class="hljs-string">&quot;文本文件夹&quot;</span>);<br><br>        folder1.add(file1);<br>        folder1.add(file2);<br><br>        folder2.add(file3);<br>        folder2.add(file4);<br><br>        folder1.add(folder2);<br><br>        folder1.killVirus();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="Ao3lI"></a></p><h2 id="5-优缺点和适用场景-1"><a href="#5-优缺点和适用场景-1" class="headerlink" title="5. 优缺点和适用场景"></a>5. 优缺点和适用场景</h2><p><a name="eG9qg"></a></p><h3 id="5-1-优点-1"><a href="#5-1-优点-1" class="headerlink" title="5.1 优点"></a>5.1 优点</h3><ul><li><p>为树形结构的面向对象实现提供了一种灵活的解决方案，通过对叶子对象和容器对象的递归组合可以形成复杂的树形结构，但对树形结构的控制却非常简单<br><a name="utM2K"></a></p><h3 id="5-2-缺点-1"><a href="#5-2-缺点-1" class="headerlink" title="5.2 缺点"></a>5.2 缺点</h3></li><li><p>很难对容器中的构建类进行类型限制。比如上述例子中想针对一个文件夹只存图片文件，因为容器类和叶子类它们都源于同一个抽象层，所以较难实现<br><a name="iE29w"></a></p><h3 id="5-3-适用场景-1"><a href="#5-3-适用场景-1" class="headerlink" title="5.3 适用场景"></a>5.3 适用场景</h3></li><li><p>在具有整体和部分的层次结构中希望通过一种方式忽略整体与部分的差异，并且客户端可以一致地对待它们</p></li><li><p>在一个使用面向对象语言开发的系统中需要处理一个树形结构</p></li><li><p>在一个系统中能够分离出叶子对象和容器对象，而且它们的类型不固定，需要增加一些新的类型</p></li></ul><p><a name="kDObt"></a></p><h1 id="五、装饰模式"><a href="#五、装饰模式" class="headerlink" title="五、装饰模式"></a>五、装饰模式</h1><p>某构件库提供了大量的基本构建，如窗体、文本框、列表框等，由于在使用该构建库时用户经常要求定制一些特殊的显示效果，如带滚动条的窗体、带黑色边框的文本框、既带滚动条又带黑色边框的列表框等，因此经常需要对该构件库进行扩展以增强其功能<br />请使用装饰模式来设计该图形节面构件库</p><p><a name="lrrvl"></a></p><h2 id="1-抽象构建"><a href="#1-抽象构建" class="headerlink" title="1. 抽象构建"></a>1. 抽象构建</h2><p><a name="GlGdM"></a></p><h3 id="1-1-Component"><a href="#1-1-Component" class="headerlink" title="1.1 Component"></a>1.1 Component</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Component</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="KICMZ"></a></p><h2 id="2-具体构件"><a href="#2-具体构件" class="headerlink" title="2. 具体构件"></a>2. 具体构件</h2><p><a name="ubo5L"></a></p><h3 id="2-1-TextBox"><a href="#2-1-TextBox" class="headerlink" title="2.1 TextBox"></a>2.1 TextBox</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TextBox</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;显示文本框&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="ln67L"></a></p><h3 id="2-2-Window"><a href="#2-2-Window" class="headerlink" title="2.2 Window"></a>2.2 Window</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Window</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;显示窗体&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="igBAq"></a></p><h2 id="3-抽象装饰类"><a href="#3-抽象装饰类" class="headerlink" title="3. 抽象装饰类"></a>3. 抽象装饰类</h2><p><a name="k2azr"></a></p><h3 id="3-1-ComponentDecorator"><a href="#3-1-ComponentDecorator" class="headerlink" title="3.1 ComponentDecorator"></a>3.1 ComponentDecorator</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ComponentDecorator</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> Component component;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ComponentDecorator</span><span class="hljs-params">(Component component)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.component = component;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span> </span>&#123;<br>        component.display();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="mnTPN"></a></p><h2 id="4-具体装饰类"><a href="#4-具体装饰类" class="headerlink" title="4. 具体装饰类"></a>4. 具体装饰类</h2><p><a name="RloHj"></a></p><h3 id="4-1-BlackBorderDecorator"><a href="#4-1-BlackBorderDecorator" class="headerlink" title="4.1 BlackBorderDecorator"></a>4.1 BlackBorderDecorator</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BlackBorderDecorator</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ComponentDecorator</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">BlackBorderDecorator</span><span class="hljs-params">(Component component)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(component);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span> </span>&#123;<br>        setBlackBorder();<br>        <span class="hljs-keyword">super</span>.display();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setBlackBorder</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;增加黑边框&quot;</span>);<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p><a name="mEZj1"></a></p><h3 id="4-2-ScrollBarDecorator"><a href="#4-2-ScrollBarDecorator" class="headerlink" title="4.2 ScrollBarDecorator"></a>4.2 ScrollBarDecorator</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ScrollBarDecorator</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ComponentDecorator</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ScrollBarDecorator</span><span class="hljs-params">(Component component)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(component);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span> </span>&#123;<br>        setScrollBar();<br>        <span class="hljs-keyword">super</span>.display();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setScrollBar</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;增加滚动条&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><a name="rxN8G"></a></p><h2 id="5-客户端代码-1"><a href="#5-客户端代码-1" class="headerlink" title="5. 客户端代码"></a>5. 客户端代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Component textBox, window;<br>        textBox = <span class="hljs-keyword">new</span> TextBox();<br>        window = <span class="hljs-keyword">new</span> Window();<br><br>        textBox.display();<br>        window.display();<br><br>        ComponentDecorator blackBorderDeco, scrollBarDeco;<br>        blackBorderDeco = <span class="hljs-keyword">new</span> BlackBorderDecorator(textBox);<br>        scrollBarDeco = <span class="hljs-keyword">new</span> ScrollBarDecorator(window);<br><br>        blackBorderDeco.display();<br>        scrollBarDeco.display();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="KfvZ1"></a></p><h2 id="6-优缺点和适用场景-1"><a href="#6-优缺点和适用场景-1" class="headerlink" title="6. 优缺点和适用场景"></a>6. 优缺点和适用场景</h2><p><a name="RLMw7"></a></p><h3 id="6-1-优点-1"><a href="#6-1-优点-1" class="headerlink" title="6.1 优点"></a>6.1 优点</h3><ul><li><p>对于扩展一个对象的功能，装饰模式比继承更加灵活，不会导致类的个数急剧增加</p></li><li><p>可以通过一种动态的方式来扩展一个对象的功能，通过配置文件可以在运行时选择不同的具体装饰类，从而实现不同的行为  </p></li><li><p>可以对一个对象进行多次装饰，通过使用不同的具体装饰类以及这些装饰类的排列组合，可以创造出很多不同行为的组合，得到功能强大的对象  </p></li><li><p>具体构建类与具体装饰类可以独立变化，用户可以根据需要增加新的具体构建类和具体装饰类，原有类库代码无需改变，符合开闭原则<br><a name="B6ULK"></a></p><h3 id="6-2-缺点-1"><a href="#6-2-缺点-1" class="headerlink" title="6.2 缺点"></a>6.2 缺点</h3></li><li><p>在一定程度上会影响程序的性能。因为适用装饰模式时会产生很多小对象，势必会占用更多的系统资源</p></li><li><p>系统较为复杂。虽然提供了一种比继承更加灵活、机动的解决方案，但同时也意味着更容易出错，排错更加困难<br><a name="WpWlD"></a></p><h3 id="6-3-适用场景-1"><a href="#6-3-适用场景-1" class="headerlink" title="6.3 适用场景"></a>6.3 适用场景</h3></li><li><p>在不影响其他对象的情况下以动态、透明的方式给单个对象添加职责</p></li><li><p>当不能采用继承的方式对系统进行扩展或者采用继承不利于系统扩展和维护时</p></li></ul><p>而不能采用继承的方式主要有两种情况：<br />第一类：系统存在大量的独立的扩展，为支持每一种扩展或者扩展之间的组合将产生大量的子类，使得子类数目爆炸增长<br />第二类：该类被定义为不能继承类例如被 final 字段修饰</p><p><a name="WzqIh"></a></p><h1 id="六、外观模式"><a href="#六、外观模式" class="headerlink" title="六、外观模式"></a>六、外观模式</h1><p>在电脑主机中只需要按下主机的开机按钮，即可调用其他硬件设备的启动方法，如内存的自检(check)、CPU的运行(run)、硬盘的读取(read)、操作系统的载入(load)等，如果某一过程发生错误则电脑启动失败<br />使用外观模式模拟该过程</p><p><a name="cymVf"></a></p><h2 id="1-外观角色"><a href="#1-外观角色" class="headerlink" title="1. 外观角色"></a>1. 外观角色</h2><p><a name="o1mGd"></a></p><h3 id="1-1-Boot"><a href="#1-1-Boot" class="headerlink" title="1.1 Boot"></a>1.1 Boot</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Boot</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> flag = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">private</span> Lock lock = <span class="hljs-keyword">new</span> ReentrantLock();<br><br>    <span class="hljs-keyword">private</span> Check check = <span class="hljs-keyword">new</span> Check();<br>    <span class="hljs-keyword">private</span> Load load = <span class="hljs-keyword">new</span> Load();<br>    <span class="hljs-keyword">private</span> Read read = <span class="hljs-keyword">new</span> Read();<br>    <span class="hljs-keyword">private</span> Run run = <span class="hljs-keyword">new</span> Run();<br><br>    <span class="hljs-keyword">private</span> Condition checkCondition = lock.newCondition();<br>    <span class="hljs-keyword">private</span> Condition loadCondition = lock.newCondition();<br>    <span class="hljs-keyword">private</span> Condition readCondition = lock.newCondition();<br>    <span class="hljs-keyword">private</span> Condition runCondition = lock.newCondition();<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">check</span><span class="hljs-params">()</span></span>&#123;<br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">while</span> (flag != <span class="hljs-number">1</span>)&#123;<br>                checkCondition.await();<br>            &#125;<br>            check.check();<br>            flag = <span class="hljs-number">2</span>;<br>            loadCondition.signal();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;内存检测失败！&quot;</span>);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">load</span><span class="hljs-params">()</span></span>&#123;<br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">while</span> (flag != <span class="hljs-number">2</span>)&#123;<br>                loadCondition.await();<br>            &#125;<br>            load.load();<br>            flag = <span class="hljs-number">3</span>;<br>            readCondition.signal();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;载入操作系统失败！&quot;</span>);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">while</span> (flag != <span class="hljs-number">3</span>)&#123;<br>                readCondition.await();<br>            &#125;<br>            read.read();<br>            flag = <span class="hljs-number">4</span>;<br>            runCondition.signal();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;读取硬盘失败！&quot;</span>);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span>&#123;<br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">while</span> (flag != <span class="hljs-number">4</span>)&#123;<br>                runCondition.await();<br>            &#125;<br>            run.run();<br>            flag = <span class="hljs-number">0</span>;<br>            System.out.println(<span class="hljs-string">&quot;启动成功！&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;运行CPU！&quot;</span>);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">boot</span><span class="hljs-params">()</span></span>&#123;<br>        check();<br>        load();<br>        read();<br>        run();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="XdqlU"></a></p><h2 id="2-子系统角色"><a href="#2-子系统角色" class="headerlink" title="2. 子系统角色"></a>2. 子系统角色</h2><p><a name="kQNWb"></a></p><h3 id="2-1-Check"><a href="#2-1-Check" class="headerlink" title="2.1 Check"></a>2.1 Check</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Check</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">check</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;正在对内存检测&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;内存检测失败！&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="t37Ke"></a></p><h3 id="2-2-Load"><a href="#2-2-Load" class="headerlink" title="2.2 Load"></a>2.2 Load</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Load</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">load</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;正在载入操作系统&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;载入操作系统失败！&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="UoQgR"></a></p><h3 id="2-3-Read"><a href="#2-3-Read" class="headerlink" title="2.3 Read"></a>2.3 Read</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Read</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;正在读取硬盘&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;读取硬盘失败！&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="KTOJC"></a></p><h3 id="2-4-Run"><a href="#2-4-Run" class="headerlink" title="2.4 Run"></a>2.4 Run</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Run</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;正在运行CPU&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;运行CPU失败！&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="Y43SG"></a></p><h2 id="3-客户端代码"><a href="#3-客户端代码" class="headerlink" title="3. 客户端代码"></a>3. 客户端代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    Boot boot = <span class="hljs-keyword">new</span> Boot();<br>    boot.boot();<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="NuzKq"></a></p><h2 id="4-优缺点和适用场景"><a href="#4-优缺点和适用场景" class="headerlink" title="4. 优缺点和适用场景"></a>4. 优缺点和适用场景</h2><p><a name="TZpOe"></a></p><h3 id="4-1-优点"><a href="#4-1-优点" class="headerlink" title="4.1 优点"></a>4.1 优点</h3><ul><li><p>对客户端屏蔽了子系统组件</p></li><li><p>实现了子系统和客户端之间的松耦合关系</p></li><li><p>子系统对象的修改不会影响到其他子系统对象<br><a name="U2077"></a></p><h3 id="4-2-缺点"><a href="#4-2-缺点" class="headerlink" title="4.2 缺点"></a>4.2 缺点</h3></li><li><p>不能限制客户端直接适用子系统类</p></li><li><p>如果设计不当，增加新的子系统类困难需要修改外观类的源代码<br><a name="Sm2rP"></a></p><h3 id="4-3-适用场景"><a href="#4-3-适用场景" class="headerlink" title="4.3 适用场景"></a>4.3 适用场景</h3></li><li><p>当需要访问一系列复杂的子系统时，需要提供一个简单的入口、</p></li><li><p>客户端与多个子系统之间存在很大的依赖性，需要减低客户端和子系统之间的耦合度</p></li></ul><p><a name="JCPmQ"></a></p><h1 id="七、享元模式"><a href="#七、享元模式" class="headerlink" title="七、享元模式"></a>七、享元模式</h1><p>开发一个围棋软件，但围棋棋盘中包含大量的黑子和白子，它们的形状、大小一模一样，只是出现的位置不同而已。如果将每一个棋子作为一个独立的对象存储在内存中，将导致该围棋软件在运行时所需要的内存空间较大，那么如何降低运行代价、提供系统性能是需要解决的一个问题<br />为了解决该问题，适用享元模式设计该围棋软件的系统架构</p><p><a name="MOGAE"></a></p><h2 id="1-抽象享元类"><a href="#1-抽象享元类" class="headerlink" title="1. 抽象享元类"></a>1. 抽象享元类</h2><p><a name="bO5zl"></a></p><h3 id="1-1-GoChessPiece"><a href="#1-1-GoChessPiece" class="headerlink" title="1.1 GoChessPiece"></a>1.1 GoChessPiece</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GoChessPiece</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> String <span class="hljs-title">getColor</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">(Coordinates coordinates)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;棋子颜色：&quot;</span> + getColor() + <span class="hljs-string">&quot;棋子位置：&quot;</span> + coordinates.getX() + <span class="hljs-string">&quot;,&quot;</span> + coordinates.getY());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="j7srL"></a></p><h2 id="2-具体享元类"><a href="#2-具体享元类" class="headerlink" title="2. 具体享元类"></a>2. 具体享元类</h2><p><a name="CNyqG"></a></p><h3 id="2-1-BlackGoChessPiece"><a href="#2-1-BlackGoChessPiece" class="headerlink" title="2.1 BlackGoChessPiece"></a>2.1 BlackGoChessPiece</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BlackGoChessPiece</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">GoChessPiece</span> </span>&#123;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getColor</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;黑色&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="yECws"></a></p><h3 id="2-2-WhiteGoChessPiece"><a href="#2-2-WhiteGoChessPiece" class="headerlink" title="2.2 WhiteGoChessPiece"></a>2.2 WhiteGoChessPiece</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WhiteGoChessPiece</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">GoChessPiece</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getColor</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;白色&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="XjRTb"></a></p><h2 id="3-享元工厂类"><a href="#3-享元工厂类" class="headerlink" title="3. 享元工厂类"></a>3. 享元工厂类</h2><p><a name="amWjd"></a></p><h3 id="3-1-GoChessPieceFactory"><a href="#3-1-GoChessPieceFactory" class="headerlink" title="3.1 GoChessPieceFactory"></a>3.1 GoChessPieceFactory</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GoChessPieceFactory</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * IoDH单例模式</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">GoChessPieceFactory</span><span class="hljs-params">()</span> </span>&#123;&#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HolderClass</span> </span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> GoChessPieceFactory instance = <span class="hljs-keyword">new</span> GoChessPieceFactory();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> GoChessPieceFactory <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> HolderClass.instance;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 享元池</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ConcurrentHashMap&lt;String, GoChessPiece&gt; flyweightPool;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        flyweightPool = <span class="hljs-keyword">new</span> ConcurrentHashMap&lt;&gt;();<br>        GoChessPiece black, white;<br>        black = <span class="hljs-keyword">new</span> BlackGoChessPiece();<br>        white = <span class="hljs-keyword">new</span> WhiteGoChessPiece();<br><br>        flyweightPool.put(<span class="hljs-string">&quot;b&quot;</span>, black);<br>        flyweightPool.put(<span class="hljs-string">&quot;w&quot;</span>, white);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> GoChessPiece <span class="hljs-title">getGoChessPiece</span><span class="hljs-params">(String color)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> flyweightPool.get(color);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="CMIHF"></a></p><h2 id="4-客户端代码-2"><a href="#4-客户端代码-2" class="headerlink" title="4. 客户端代码"></a>4. 客户端代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        GoChessPiece black1, black2, black3, white1, white2;<br><br>        black1 = GoChessPieceFactory.getGoChessPiece(<span class="hljs-string">&quot;b&quot;</span>);<br>        black2 = GoChessPieceFactory.getGoChessPiece(<span class="hljs-string">&quot;b&quot;</span>);<br>        black3 = GoChessPieceFactory.getGoChessPiece(<span class="hljs-string">&quot;b&quot;</span>);<br><br>        white1 = GoChessPieceFactory.getGoChessPiece(<span class="hljs-string">&quot;w&quot;</span>);<br>        white2 = GoChessPieceFactory.getGoChessPiece(<span class="hljs-string">&quot;w&quot;</span>);<br><br>        black1.display(<span class="hljs-keyword">new</span> Coordinates(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>));<br>        black2.display(<span class="hljs-keyword">new</span> Coordinates(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>));<br>        black3.display(<span class="hljs-keyword">new</span> Coordinates(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>));<br><br>        white1.display(<span class="hljs-keyword">new</span> Coordinates(<span class="hljs-number">5</span>, <span class="hljs-number">4</span>));<br>        white2.display(<span class="hljs-keyword">new</span> Coordinates(<span class="hljs-number">4</span>, <span class="hljs-number">5</span>));<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="tleHj"></a></p><h2 id="5-优缺点和适用场景-2"><a href="#5-优缺点和适用场景-2" class="headerlink" title="5. 优缺点和适用场景"></a>5. 优缺点和适用场景</h2><p><a name="P0XZe"></a></p><h3 id="5-1-优点-2"><a href="#5-1-优点-2" class="headerlink" title="5.1 优点"></a>5.1 优点</h3><ul><li><p>减少内存中的对象数量</p></li><li><p>耦合低，享元对象可以在不同的环境下适用<br><a name="MZaQd"></a></p><h3 id="5-2-缺点-2"><a href="#5-2-缺点-2" class="headerlink" title="5.2 缺点"></a>5.2 缺点</h3></li><li><p>提高系统复杂度<br><a name="XmnwE"></a></p><h3 id="5-3-适用场景-2"><a href="#5-3-适用场景-2" class="headerlink" title="5.3 适用场景"></a>5.3 适用场景</h3></li><li><p>一个系统中有大量相同或者相似的对象，造成内存的大量耗费</p></li><li><p>需要使用一个享元池存储需要被频繁适用的享元对象</p></li></ul><p><a name="G2Ekt"></a></p><h1 id="八、代理模式"><a href="#八、代理模式" class="headerlink" title="八、代理模式"></a>八、代理模式</h1><p>在某应用软件中需要记录业务方法的调用日志，在不修改现有业务类的基础上为每一个类提供一个日志记录代理类，在中输出日志，如在业务方法method()调用之前输出“方法method()被调用，调用时间为2012-10-10 10：10：10”</p><p><a name="Kjery"></a></p><h2 id="1-抽象主题角色"><a href="#1-抽象主题角色" class="headerlink" title="1. 抽象主题角色"></a>1. 抽象主题角色</h2><p><a name="MYWyz"></a></p><h3 id="1-1-UserService"><a href="#1-1-UserService" class="headerlink" title="1.1 UserService"></a>1.1 UserService</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserService</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">select</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">del</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="odxDq"></a></p><h2 id="2-代理主题角色"><a href="#2-代理主题角色" class="headerlink" title="2. 代理主题角色"></a>2. 代理主题角色</h2><p><a name="uSTgW"></a></p><h3 id="2-1-UserServiceProxy"><a href="#2-1-UserServiceProxy" class="headerlink" title="2.1 UserServiceProxy"></a>2.1 UserServiceProxy</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">InvocationHandler</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> Object target;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">UserServiceProxy</span><span class="hljs-params">(Object target)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.target = target;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setTarget</span><span class="hljs-params">(Object target)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.target = target;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getProxy</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> Proxy.newProxyInstance(<span class="hljs-keyword">this</span>.getClass().getClassLoader(),<br>                target.getClass().getInterfaces(), <span class="hljs-keyword">this</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>        log(method.getName());<br>        method.invoke(target, args);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">log</span><span class="hljs-params">(String methodName)</span> </span>&#123;<br>        System.out.println(LocalDateTime.now().format(DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss:SSS&quot;</span>)) + <span class="hljs-string">&quot;调用了&quot;</span> + methodName);<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p><a name="Lh2pT"></a></p><h2 id="3-真实主题角色"><a href="#3-真实主题角色" class="headerlink" title="3. 真实主题角色"></a>3. 真实主题角色</h2><p><a name="x7G9I"></a></p><h3 id="3-1-UserServiceImpl"><a href="#3-1-UserServiceImpl" class="headerlink" title="3.1 UserServiceImpl"></a>3.1 UserServiceImpl</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">select</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;执行查询用户&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">del</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;执行删除用户&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;执行修改用户&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;执行插入用户&quot;</span>);<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p><a name="VmglO"></a></p><h2 id="4-客户端代码-3"><a href="#4-客户端代码-3" class="headerlink" title="4. 客户端代码"></a>4. 客户端代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    UserService userService = <span class="hljs-keyword">new</span> UserServiceImpl();<br>    UserServiceProxy userServiceProxy = <span class="hljs-keyword">new</span> UserServiceProxy(userService);<br>    UserService proxy = (UserService) userServiceProxy.getProxy();<br>    proxy.select();<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="qZaxT"></a></p><h2 id="5-优缺点和适用场景-3"><a href="#5-优缺点和适用场景-3" class="headerlink" title="5. 优缺点和适用场景"></a>5. 优缺点和适用场景</h2><p><a name="x3IFX"></a></p><h3 id="5-1-优点-3"><a href="#5-1-优点-3" class="headerlink" title="5.1 优点"></a>5.1 优点</h3><ul><li><p>能够协调使用调用者和被调用者，降低了系统耦合度</p></li><li><p>具有较好的灵活性和扩展性，可以进行 AOP</p></li><li><p>此外，不同类型的代理模式具有独特的优点，具体请君网上查找<br><a name="mZ6M3"></a></p><h3 id="5-2-缺点-3"><a href="#5-2-缺点-3" class="headerlink" title="5.2 缺点"></a>5.2 缺点</h3></li><li><p>需要进行额外的工作，并且较为复杂<br><a name="W4FXX"></a></p><h3 id="5-3-适用场景-3"><a href="#5-3-适用场景-3" class="headerlink" title="5.3 适用场景"></a>5.3 适用场景</h3></li><li><p>AOP等等</p></li><li><p>好多😀，例如远程代理、缓冲代理、权限代理、智能引用代理</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java 设计模式</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>创建型模式</title>
    <link href="/2022/05/15/Java%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <url>/2022/05/15/Java%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p><a name="a11edfd6"></a></p><h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><p>创建型模式（Creational Pattern）关注对象的创建过程，在系统开发中应用非常广泛<br />这种模式对类的实例化过程进行了抽象，能够将软件模块中<strong>对象的创建和对象的使用分离</strong>，对用户隐藏了类的实力的创建细节，这样会带来如下好处：</p><ul><li>无须关心创建对象的细节</li><li>降低系统的耦合度</li><li>让设计方案更易于修改和扩展</li></ul><p>而每一种创建型模式都会基于下列三点：</p><ul><li>创建什么（What）</li><li>由谁创建（Who）</li><li>何时创建（When）</li></ul><p>创建型模式共有六种：</p><table><thead><tr><th><strong>设计原则名称</strong></th><th><strong>定义</strong></th><th><strong>使用频率</strong></th></tr></thead><tbody><tr><td>简单工厂模式<br />（Simple Factory Pattern）</td><td>定义一个工程类，它可以根据参数的不同，返回不同类的实例，被创建的实例通常都具有共同的父类</td><td>⭐⭐⭐</td></tr><tr><td>工厂方法模式<br />（Factory Method Pattern）</td><td>定义一个用于创建对象的接口，但是让子类决定将哪一个类实例化。工厂方法模式让一个类的实例化延迟到其子类</td><td>⭐⭐⭐⭐⭐</td></tr><tr><td>抽象工厂模式<br />（Abstract Factory Pattern）</td><td>提供一个创建一系列相关或相互依赖对象的接口，而无须指定它们具体的类</td><td>⭐⭐⭐⭐⭐</td></tr><tr><td>建造者模式<br />（Builder Pattern）</td><td>将一个复杂对象的构造与它的表示分离，使得同样的构造过程可以创建不同的表示</td><td>⭐⭐</td></tr><tr><td>原型模式<br />（Prototype Pattern）</td><td>使用原型实例指定待创建对象的类型，并且通过复制这个原型来创建新的对象</td><td>⭐⭐⭐</td></tr><tr><td>单例模式<br />（Singleton Pattern）</td><td>确保一个类只有一个实例，并提供一个全局的访问点来访问这个唯一实例</td><td>⭐⭐⭐⭐</td></tr></tbody></table><p><a name="NzaO7"></a></p><h1 id="二、简单工厂模式"><a href="#二、简单工厂模式" class="headerlink" title="二、简单工厂模式"></a>二、简单工厂模式</h1><p>实现一个简单的加减乘除计算器<br><a name="uNIFJ"></a></p><h2 id="1-创建什么"><a href="#1-创建什么" class="headerlink" title="1. 创建什么"></a>1. 创建什么</h2><p><a name="aAgxh"></a></p><h3 id="1-1-Operation"><a href="#1-1-Operation" class="headerlink" title="1.1 Operation"></a>1.1 Operation</h3><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Operation</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> result;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getResult</span><span class="hljs-params">(<span class="hljs-keyword">double</span> num1, <span class="hljs-keyword">double</span> num2)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="KZuEs"></a></p><h3 id="1-2-Add"><a href="#1-2-Add" class="headerlink" title="1.2 Add"></a>1.2 Add</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Add</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Operation</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getResult</span><span class="hljs-params">(<span class="hljs-keyword">double</span> num1, <span class="hljs-keyword">double</span> num2)</span> </span>&#123;<br>        result = num1 + num2;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="odkV1"></a></p><h3 id="1-3-Sub"><a href="#1-3-Sub" class="headerlink" title="1.3 Sub"></a>1.3 Sub</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sub</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Operation</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getResult</span><span class="hljs-params">(<span class="hljs-keyword">double</span> num1, <span class="hljs-keyword">double</span> num2)</span> </span>&#123;<br>        result = num1 - num2;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="nWZpj"></a></p><h3 id="1-4-Mul"><a href="#1-4-Mul" class="headerlink" title="1.4 Mul"></a>1.4 Mul</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Mul</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Operation</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getResult</span><span class="hljs-params">(<span class="hljs-keyword">double</span> num1, <span class="hljs-keyword">double</span> num2)</span> </span>&#123;<br>        result = num1 * num2;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="zGWil"></a></p><h3 id="1-5-Div"><a href="#1-5-Div" class="headerlink" title="1.5 Div"></a>1.5 Div</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Div</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Operation</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getResult</span><span class="hljs-params">(<span class="hljs-keyword">double</span> num1, <span class="hljs-keyword">double</span> num2)</span> </span>&#123;<br>        result = num1 / num2;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="mliO8"></a></p><h2 id="2-由谁创建"><a href="#2-由谁创建" class="headerlink" title="2. 由谁创建"></a>2. 由谁创建</h2><p><a name="k3ocY"></a></p><h3 id="2-1-OperationFactory"><a href="#2-1-OperationFactory" class="headerlink" title="2.1 OperationFactory"></a>2.1 OperationFactory</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OperationFactory</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> Operation operation;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">OperationFactory</span><span class="hljs-params">(Operation operation)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.operation = operation;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Operation <span class="hljs-title">createOperation</span><span class="hljs-params">(String operation)</span> </span>&#123;<br>        <span class="hljs-keyword">switch</span> (operation) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;+&quot;</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> add();<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;-&quot;</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> sub();<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;*&quot;</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> mul();<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;/&quot;</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> div();<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="sIf40"></a></p><h2 id="3-何时创建"><a href="#3-何时创建" class="headerlink" title="3. 何时创建"></a>3. 何时创建</h2><p><a name="dXCsK"></a></p><h3 id="3-1-createOperation方法"><a href="#3-1-createOperation方法" class="headerlink" title="3.1 createOperation方法"></a>3.1 createOperation方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Operation <span class="hljs-title">createOperation</span><span class="hljs-params">(String operation)</span> </span>&#123;<br>    <span class="hljs-keyword">switch</span> (operation) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;+&quot;</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> add();<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;-&quot;</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> sub();<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;*&quot;</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> mul();<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;/&quot;</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> div();<br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="kSSQu"></a></p><h2 id="4-客户端代码"><a href="#4-客户端代码" class="headerlink" title="4. 客户端代码"></a>4. 客户端代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">Operation operation = OperationFactory.createOperation(<span class="hljs-string">&quot;/&quot;</span>);<br><span class="hljs-keyword">if</span> (operation != <span class="hljs-keyword">null</span>) &#123;                                    <br>    System.out.println(operation.getResult(<span class="hljs-number">3</span>, <span class="hljs-number">0</span>));          <br>&#125; <span class="hljs-keyword">else</span> &#123;                                                    <br>    System.out.println(<span class="hljs-string">&quot;不正常输入！&quot;</span>);                           <br>&#125;                                                           <br></code></pre></td></tr></table></figure><p><a name="FRUOr"></a></p><h2 id="5-优缺点及适用场景"><a href="#5-优缺点及适用场景" class="headerlink" title="5. 优缺点及适用场景"></a>5. 优缺点及适用场景</h2><p><a name="nP2Bs"></a></p><h3 id="5-1-优点"><a href="#5-1-优点" class="headerlink" title="5.1 优点"></a>5.1 优点</h3><ul><li><p>无须知道所创建的具体产品的类名，只需要知道对应的参数即可<br><a name="ofdh0"></a></p><h3 id="5-2-缺点"><a href="#5-2-缺点" class="headerlink" title="5.2 缺点"></a>5.2 缺点</h3></li><li><p>职责过重，工厂类集中了所有产品的创建逻辑</p></li><li><p>增加了系统的复杂度和理解难度</p></li><li><p>系统扩展困难，一旦需要添加新产品就不得不修改工厂逻辑，一定程度上违背了开闭原则<br><a name="aKiTs"></a></p><h3 id="5-3-适用场景"><a href="#5-3-适用场景" class="headerlink" title="5.3 适用场景"></a>5.3 适用场景</h3></li><li><p>工厂类负责创建的对象比较少，这样就可以避免工厂方法中的业务逻辑过于复杂</p></li><li><p>客户端只知道工厂类的参数，对如何创建对象并不关心</p></li></ul><p><a name="wmXBX"></a></p><h1 id="三、工厂方法模式"><a href="#三、工厂方法模式" class="headerlink" title="三、工厂方法模式"></a>三、工厂方法模式</h1><p>输出数据图形，曲线图（LineDiagram）创建器生成曲线图，柱形图（ColumnDiagram）创建器生成柱形图<br><a name="tjzog"></a></p><h2 id="1-创建什么-1"><a href="#1-创建什么-1" class="headerlink" title="1. 创建什么"></a>1. 创建什么</h2><p><a name="IkVPc"></a></p><h3 id="1-1-Diagram"><a href="#1-1-Diagram" class="headerlink" title="1.1 Diagram"></a>1.1 Diagram</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Diagram</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">create</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="vYCwn"></a></p><h3 id="1-2-LineDiagram"><a href="#1-2-LineDiagram" class="headerlink" title="1.2 LineDiagram"></a>1.2 LineDiagram</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LineDiagram</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Diagram</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">create</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;生成曲线图&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="K0JjV"></a></p><h3 id="1-3-ColumnDiagram"><a href="#1-3-ColumnDiagram" class="headerlink" title="1.3 ColumnDiagram"></a>1.3 ColumnDiagram</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ColumnDiagram</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Diagram</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">create</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;生成柱形图&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="InbIl"></a></p><h2 id="2-由谁创建-1"><a href="#2-由谁创建-1" class="headerlink" title="2. 由谁创建"></a>2. 由谁创建</h2><p><a name="IxX1t"></a></p><h3 id="2-1-DiagramFactroy"><a href="#2-1-DiagramFactroy" class="headerlink" title="2.1 DiagramFactroy"></a>2.1 DiagramFactroy</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">DiagramFactory</span> </span>&#123;<br>    <span class="hljs-function">Diagram <span class="hljs-title">createDiagram</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="vRe8j"></a></p><h3 id="2-2-LineDiagramFactory"><a href="#2-2-LineDiagramFactory" class="headerlink" title="2.2 LineDiagramFactory"></a>2.2 LineDiagramFactory</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LineDiagramFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">DiagramFactory</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Diagram <span class="hljs-title">createDiagram</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> LineDiagram();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="SwRn3"></a></p><h3 id="2-3-ColumnDiagramFactory"><a href="#2-3-ColumnDiagramFactory" class="headerlink" title="2.3 ColumnDiagramFactory"></a>2.3 ColumnDiagramFactory</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ColumnDiagramFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">DiagramFactory</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Diagram <span class="hljs-title">createDiagram</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ColumnDiagram();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="t99bF"></a></p><h2 id="3-何时创建-1"><a href="#3-何时创建-1" class="headerlink" title="3. 何时创建"></a>3. 何时创建</h2><p>具体工厂中实现了抽象工厂的<code>createDiagram()</code>方法<br><a name="GehnO"></a></p><h2 id="4-客户端代码-1"><a href="#4-客户端代码-1" class="headerlink" title="4. 客户端代码"></a>4. 客户端代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">DiagramFactory diagramFactory;                                  <br>Diagram diagram;                                                <br><span class="hljs-keyword">try</span> &#123;                                                           <br>    diagramFactory = <span class="hljs-keyword">new</span> LineDiagramFactory(); <span class="hljs-comment">// 可引入配置文件和反射机制实现</span><br>    diagram = diagramFactory.createDiagram();                   <br>    diagram.create();                                           <br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;                                         <br>    e.printStackTrace();                                        <br>&#125;                                                               <br></code></pre></td></tr></table></figure><p><a name="V38kB"></a></p><h2 id="5-优缺点及适用场景-1"><a href="#5-优缺点及适用场景-1" class="headerlink" title="5. 优缺点及适用场景"></a>5. 优缺点及适用场景</h2><p><a name="JgHcI"></a></p><h3 id="5-1-优点-1"><a href="#5-1-优点-1" class="headerlink" title="5.1 优点"></a>5.1 优点</h3><ul><li><p>解耦。用户只关心产品对应的工厂，无须关心实现细节，甚至无须知道具体产品的类名</p></li><li><p>可扩展性，完全符合开闭原则。例如添加新产品时，无须修改抽象产品和抽象工厂的方法<br><a name="T4zXs"></a></p><h3 id="5-2-缺点-1"><a href="#5-2-缺点-1" class="headerlink" title="5.2 缺点"></a>5.2 缺点</h3></li><li><p>复杂度较高。添加新产品时既需要添加新产品的具体类也要添加新工厂的具体类</p></li><li><p>有一定的抽象性和理解难度。因为考虑到可扩展性，引入了抽象层，在客户端代码中也需要通过抽象层进行定义<br><a name="OsS3i"></a></p><h3 id="5-3-适用场景-1"><a href="#5-3-适用场景-1" class="headerlink" title="5.3 适用场景"></a>5.3 适用场景</h3></li><li><p>客户端不需要他所需要的对象的类</p></li><li><p>抽象工厂类通过其子类来指定创建哪个对象<br><a name="ki8n1"></a></p><h1 id="四、抽象工厂模式"><a href="#四、抽象工厂模式" class="headerlink" title="四、抽象工厂模式"></a>四、抽象工厂模式</h1><p>某系统为了改进数据库操作的性能，自定义数据为连接对象(Connection)和语句(Statement)对象，可针对不同类型的数据库提供不同的连接对象和语句对象，如提供Oracle或MySQL专用连接类和语句类，而且用户可以通过配置文件等方式根据实际需要动态更换系统数据库。<br><a name="KAoxT"></a></p><h2 id="1-创建什么-2"><a href="#1-创建什么-2" class="headerlink" title="1. 创建什么"></a>1. 创建什么</h2><p>产品族：</p></li><li><p>Mysql 相关</p></li><li><p>Oracle 相关</p></li></ul><p>产品等级结构：</p><ul><li><p>连接对象 Connection</p></li><li><p>语句对象 Statement<br><a name="JTiu2"></a></p><h3 id="1-1-Connection"><a href="#1-1-Connection" class="headerlink" title="1.1 Connection"></a>1.1 Connection</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Connection</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getConnection</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="FmYDF"></a></p><h3 id="1-2-MysqlConnection"><a href="#1-2-MysqlConnection" class="headerlink" title="1.2 MysqlConnection"></a>1.2 MysqlConnection</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MysqlConnection</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Connection</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getConnection</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Mysql连接对象&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="eDt3T"></a></p><h3 id="1-3-OracleConnection"><a href="#1-3-OracleConnection" class="headerlink" title="1.3 OracleConnection"></a>1.3 OracleConnection</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OracleConnection</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Connection</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getConnection</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Oracle连接对象&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="BFYOy"></a></p><h3 id="1-4-Statement"><a href="#1-4-Statement" class="headerlink" title="1.4 Statement"></a>1.4 Statement</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Statement</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getStatement</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="TcJXy"></a></p><h3 id="1-5-MysqlStatement"><a href="#1-5-MysqlStatement" class="headerlink" title="1.5 MysqlStatement"></a>1.5 MysqlStatement</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MysqlStatement</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Statement</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getStatement</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Mysql语句对象&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="g7i5a"></a></p><h3 id="1-6-OracleStatement"><a href="#1-6-OracleStatement" class="headerlink" title="1.6 OracleStatement"></a>1.6 OracleStatement</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OracleStatement</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Statement</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getStatement</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Oracle语句对象&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="TPvAy"></a></p><h2 id="2-由谁创建-2"><a href="#2-由谁创建-2" class="headerlink" title="2. 由谁创建"></a>2. 由谁创建</h2><p><a name="F3RoA"></a></p><h3 id="2-1-DataBaseFactory"><a href="#2-1-DataBaseFactory" class="headerlink" title="2.1 DataBaseFactory"></a>2.1 DataBaseFactory</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">DataBaseFactory</span> </span>&#123;<br>    <span class="hljs-function">Connection <span class="hljs-title">getConnection</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function">Statement <span class="hljs-title">getStatement</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="PFb4z"></a></p><h3 id="2-2-MysqlDataBaseFactory"><a href="#2-2-MysqlDataBaseFactory" class="headerlink" title="2.2 MysqlDataBaseFactory"></a>2.2 MysqlDataBaseFactory</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MysqlDataBaseFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">DataBaseFactory</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Connection <span class="hljs-title">getConnection</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> MysqlConnection();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Statement <span class="hljs-title">getStatement</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> MysqlStatement();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="oWjNY"></a></p><h3 id="2-3-OracleDataBaseFactory"><a href="#2-3-OracleDataBaseFactory" class="headerlink" title="2.3 OracleDataBaseFactory"></a>2.3 OracleDataBaseFactory</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OracleDataBaseFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">DataBaseFactory</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Connection <span class="hljs-title">getConnection</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> OracleConnection();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Statement <span class="hljs-title">getStatement</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> OracleStatement();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="HkqDO"></a></p><h2 id="3-何时创建-2"><a href="#3-何时创建-2" class="headerlink" title="3. 何时创建"></a>3. 何时创建</h2><p>由确定的工厂创造确定的产品<br><a name="Eiv8Y"></a></p><h2 id="4-客户端代码-2"><a href="#4-客户端代码-2" class="headerlink" title="4. 客户端代码"></a>4. 客户端代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">DataBaseFactory dataBaseFactory = <span class="hljs-keyword">new</span> MysqlDataBaseFactory(); <span class="hljs-comment">// 可引入配置文件和反射机制实现</span><br>Connection connection = dataBaseFactory.getConnection();                       <br>Statement statement = dataBaseFactory.getStatement();                          <br>connection.getConnection();                                                    <br>statement.getStatement();                                                      <br></code></pre></td></tr></table></figure><p><a name="IQCYc"></a></p><h2 id="5-优缺点及适用场景-2"><a href="#5-优缺点及适用场景-2" class="headerlink" title="5. 优缺点及适用场景"></a>5. 优缺点及适用场景</h2><p><a name="rnvT8"></a></p><h3 id="5-1-优点-2"><a href="#5-1-优点-2" class="headerlink" title="5.1 优点"></a>5.1 优点</h3></li><li><p>解耦。用户只关心产品对应的工厂，无须关心实现细节，甚至无须知道具体产品的类名</p></li><li><p>可扩展性，完全符合开闭原则。例如添加新的产品族时，无须修改抽象产品和抽象工厂的方法<br><a name="fl6gN"></a></p><h3 id="5-2-缺点-2"><a href="#5-2-缺点-2" class="headerlink" title="5.2 缺点"></a>5.2 缺点</h3></li><li><p>起初设计时难度较大，需要考虑周全。添加新的产品等级结构时，需要修改抽象工厂的方法，违背了开闭原则。例如在此基础上新增产品等级结构对象 Exception，那么对应的产品族 Mysql、Oracle 均需要新增 MysqlException、OracleException，并且基类 DataBaseFactory 也需要新增方法 getException，同时其子了 MysqlDataBaseFactory、OracleDataBaseFactory 也均需要另外实现 getException 方法<br><a name="nQXU3"></a></p><h3 id="5-3-适用场景-2"><a href="#5-3-适用场景-2" class="headerlink" title="5.3 适用场景"></a>5.3 适用场景</h3></li><li><p>用户只关心产品对应的工厂，无须关心实现细节，甚至无须知道具体产品的类名，这是所有类型的工厂模式都是很重要的</p></li><li><p>系统中有一个以上的产品族</p></li><li><p>属于同一个产品族的产品将在一起使用，它们之间可以没有任何关系，但是它们都有共同的约束，例如操作系统下的按钮和文本框，按钮与文本框之间没有直接关系，但是它们都是属于某一个操作系统下的，此时具有一个共同的约束条件，即操作系统的类型</p></li><li><p>产品等级结构稳定</p></li></ul><p><a name="v4qlq"></a></p><h1 id="五、建造者模式"><a href="#五、建造者模式" class="headerlink" title="五、建造者模式"></a>五、建造者模式</h1><p>设计一个游戏角色，它包含性别、脸型等多个部分组成，不同角色的性别、脸型、服装、发型等外部特性都有差异，例如“天使”拥有美丽的面容和披肩的长发；而“恶魔”极其丑陋，留着光头并穿一件刺眼的黑衣</p><p><a name="wLiel"></a></p><h2 id="1-创建什么-3"><a href="#1-创建什么-3" class="headerlink" title="1. 创建什么"></a>1. 创建什么</h2><p><a name="LKpPl"></a></p><h3 id="1-1-Actor"><a href="#1-1-Actor" class="headerlink" title="1.1 Actor"></a>1.1 Actor</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Actor</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> String type;<br><br>    <span class="hljs-keyword">private</span> String sex;<br><br>    <span class="hljs-keyword">private</span> String face;<br><br>    <span class="hljs-keyword">private</span> String costume;<br><br>    <span class="hljs-keyword">private</span> String hairstyle;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getType</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> type;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setType</span><span class="hljs-params">(String type)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.type = type;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getSex</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> sex;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setSex</span><span class="hljs-params">(String sex)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.sex = sex;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getFace</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> face;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setFace</span><span class="hljs-params">(String face)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.face = face;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getCostume</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> costume;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCostume</span><span class="hljs-params">(String costume)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.costume = costume;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getHairstyle</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> hairstyle;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setHairstyle</span><span class="hljs-params">(String hairstyle)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.hairstyle = hairstyle;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="QjDt0"></a></p><h2 id="2-由谁创建-3"><a href="#2-由谁创建-3" class="headerlink" title="2. 由谁创建"></a>2. 由谁创建</h2><p><a name="lDiQY"></a></p><h3 id="2-1-ActorBuilder"><a href="#2-1-ActorBuilder" class="headerlink" title="2.1 ActorBuilder"></a>2.1 ActorBuilder</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ActorBuilder</span> </span>&#123;<br><br>    <span class="hljs-keyword">protected</span> Actor actor = <span class="hljs-keyword">new</span> Actor();<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildType</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildSex</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildFace</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildCostume</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildHairstyle</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 是否是光头？&lt;br&gt;</span><br><span class="hljs-comment">     * 钩子方法，控制是否执行&#123;<span class="hljs-doctag">@link</span> #buildHairstyle()&#125;</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 默认为 false</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isBareHeaded</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Actor <span class="hljs-title">buildActor</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> actor;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="R1Oy2"></a></p><h3 id="2-2-AngelBuilder"><a href="#2-2-AngelBuilder" class="headerlink" title="2.2 AngelBuilder"></a>2.2 AngelBuilder</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AngelBuilder</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ActorBuilder</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildType</span><span class="hljs-params">()</span> </span>&#123;<br>        actor.setType(<span class="hljs-string">&quot;天使&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildSex</span><span class="hljs-params">()</span> </span>&#123;<br>        actor.setSex(<span class="hljs-string">&quot;女&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildFace</span><span class="hljs-params">()</span> </span>&#123;<br>        actor.setFace(<span class="hljs-string">&quot;漂亮脸蛋&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildCostume</span><span class="hljs-params">()</span> </span>&#123;<br>        actor.setCostume(<span class="hljs-string">&quot;白裙&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildHairstyle</span><span class="hljs-params">()</span> </span>&#123;<br>        actor.setHairstyle(<span class="hljs-string">&quot;披肩长发&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="eRFar"></a></p><h3 id="2-3-DevilBuilder"><a href="#2-3-DevilBuilder" class="headerlink" title="2.3 DevilBuilder"></a>2.3 DevilBuilder</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DevilBuilder</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ActorBuilder</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildType</span><span class="hljs-params">()</span> </span>&#123;<br>        actor.setType(<span class="hljs-string">&quot;恶魔&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildSex</span><span class="hljs-params">()</span> </span>&#123;<br>        actor.setSex(<span class="hljs-string">&quot;男&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildFace</span><span class="hljs-params">()</span> </span>&#123;<br>        actor.setFace(<span class="hljs-string">&quot;丑陋脸蛋&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildCostume</span><span class="hljs-params">()</span> </span>&#123;<br>        actor.setCostume(<span class="hljs-string">&quot;刺眼黑衣&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildHairstyle</span><span class="hljs-params">()</span> </span>&#123;<br>        actor.setHairstyle(<span class="hljs-string">&quot;光头&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isBareHeaded</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="l9uw5"></a></p><h2 id="3-何时创建-3"><a href="#3-何时创建-3" class="headerlink" title="3. 何时创建"></a>3. 何时创建</h2><p><a name="XgOjM"></a></p><h3 id="3-1-ActorDirector"><a href="#3-1-ActorDirector" class="headerlink" title="3.1 ActorDirector"></a>3.1 ActorDirector</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ActorDirector</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Actor <span class="hljs-title">construct</span><span class="hljs-params">(ActorBuilder ab)</span> </span>&#123;<br>        Actor actor;<br>        ab.buildType();<br>        ab.buildSex();<br>        ab.buildFace();<br>        ab.buildCostume();<br>        <span class="hljs-keyword">if</span> (!ab.isBareHeaded()) &#123;<br>            ab.buildHairstyle();<br>        &#125;<br>        actor = ab.buildActor();<br>        <span class="hljs-keyword">return</span> actor;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="Kr1cO"></a></p><h2 id="4-客户端代码-3"><a href="#4-客户端代码-3" class="headerlink" title="4. 客户端代码"></a>4. 客户端代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Actor actor = <span class="hljs-keyword">new</span> Actor();                                       <br>ActorDirector actorDirector = <span class="hljs-keyword">new</span> ActorDirector();               <br>ActorBuilder angelBuilder = <span class="hljs-keyword">new</span> AngelBuilder(); <span class="hljs-comment">// 可引入配置文件和反射机制实现</span><br>actor = actorDirector.construct(angelBuilder);                   <br></code></pre></td></tr></table></figure><p><a name="JTt2c"></a></p><h2 id="5-优缺点及适用场景-3"><a href="#5-优缺点及适用场景-3" class="headerlink" title="5. 优缺点及适用场景"></a>5. 优缺点及适用场景</h2><p><a name="g3l5n"></a></p><h3 id="5-1-优点-3"><a href="#5-1-优点-3" class="headerlink" title="5.1 优点"></a>5.1 优点</h3><ul><li><p>耦合性低。客户端不必知道产品内部的组成细节，将产品本身与产品的创建过程解耦，使得相同的创建过程可以创建不同的产品对象</p></li><li><p>扩展方便。每一个具体建造者相对独立，与其他建造者无关。</p></li><li><p>可以精细地控制产品地创建过程。将复杂产品的创建步骤分解在不同的方法中，使得创建过程更加清晰，也方便程序进行控制<br><a name="PYSGV"></a></p><h3 id="5-2-缺点-3"><a href="#5-2-缺点-3" class="headerlink" title="5.2 缺点"></a>5.2 缺点</h3></li><li><p>有一定的局限性。适用建造者模式通常创建的产品有较多的共同点，其组成部分相似，如果产品间差异性很大，例如很多组成部分都不同，那么就不适合适用</p></li><li><p>增加理解难度和运行成本。如果产品的内部变化复杂，困难会导致需要定义很多具体建造者类来实现，这样会使系统变得庞大<br><a name="eCKvF"></a></p><h3 id="5-3-适用场景-3"><a href="#5-3-适用场景-3" class="headerlink" title="5.3 适用场景"></a>5.3 适用场景</h3></li><li><p>需要生成的产品对象有复杂的内部结构，这些产品对象通常包含多个成员变量</p></li><li><p>需要生成的产品对象的属性相互依赖，需要指定其生成的顺序</p></li><li><p>对象的创建过程，独立于创建该对象的内在建造者模式中，通过引入指挥者类，将创建过程封装在指挥者类中，而不在建造者类和客户类中  </p></li><li><p>隔离复杂对象的创建和使用，并使得相同的创建过程可以创建不同的产品<br><a name="ioJd7"></a></p><h1 id="六、原型模式"><a href="#六、原型模式" class="headerlink" title="六、原型模式"></a>六、原型模式</h1><p>请为某销售管理系统设计并实现一个客户类Customer，在客户类中包含一个名为客户地址的成员变量，客户地址的类型为Address，用浅克隆和深克隆分别实现Customer对象的复制<br><a name="Kn9OS"></a></p><h2 id="深克隆和浅克隆"><a href="#深克隆和浅克隆" class="headerlink" title="深克隆和浅克隆"></a>深克隆和浅克隆</h2><p>浅克隆：</p></li><li><p>基于同一个类型成员变量的地址</p></li><li><p>复制原型对象</p></li><li><p>复制基本类型的值</p></li></ul><p>深克隆：</p><ul><li>复制同一个类型成员变量的地址</li><li>复制原型对象</li><li>复制基本类型的值</li></ul><p><a name="gudvJ"></a></p><h2 id="1-创建什么-4"><a href="#1-创建什么-4" class="headerlink" title="1. 创建什么"></a>1. 创建什么</h2><p><a name="XdbAE"></a></p><h3 id="1-1-Address"><a href="#1-1-Address" class="headerlink" title="1.1 Address"></a>1.1 Address</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Address</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br>    <br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Address</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><a name="EQqVP"></a></p><h2 id="2-由谁创建-4"><a href="#2-由谁创建-4" class="headerlink" title="2. 由谁创建"></a>2. 由谁创建</h2><p><a name="Io2yd"></a></p><h3 id="2-1-Customer"><a href="#2-1-Customer" class="headerlink" title="2.1 Customer"></a>2.1 Customer</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Customer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span>, <span class="hljs-title">Cloneable</span> </span>&#123;<br>    <br>    <span class="hljs-keyword">private</span> Address address;<br>    <br>    <span class="hljs-keyword">private</span> String name;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Address <span class="hljs-title">getAddress</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> address;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAddress</span><span class="hljs-params">(Address address)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.address = address;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Customer <span class="hljs-title">deepClone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException </span>&#123;<br>        ByteArrayOutputStream bao = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream oos = <span class="hljs-keyword">new</span> ObjectOutputStream(bao);<br>        oos.writeObject(<span class="hljs-keyword">this</span>);<br>        ByteArrayInputStream bis = <span class="hljs-keyword">new</span> ByteArrayInputStream(bao.toByteArray());<br>        ObjectInputStream ois = <span class="hljs-keyword">new</span> ObjectInputStream(bis);<br>        <span class="hljs-keyword">return</span> (Customer) ois.readObject();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Customer <span class="hljs-title">clone</span><span class="hljs-params">()</span> </span>&#123;<br>        Object object;<br>        <span class="hljs-keyword">try</span> &#123;<br>            object = <span class="hljs-keyword">super</span>.clone();<br>            <span class="hljs-keyword">return</span> (Customer) object;<br>        &#125; <span class="hljs-keyword">catch</span> (CloneNotSupportedException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;不支持负责&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="SN9hi"></a></p><h2 id="3-何时创建-4"><a href="#3-何时创建-4" class="headerlink" title="3. 何时创建"></a>3. 何时创建</h2><p>Customer 的深克隆方法 deepClone 和浅克隆方法 clone<br><a name="a8cu7"></a></p><h2 id="4-客户端代码-4"><a href="#4-客户端代码-4" class="headerlink" title="4. 客户端代码"></a>4. 客户端代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">shallow</span><span class="hljs-params">()</span></span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;浅克隆：&quot;</span>);<br>    Customer customerPrototype = <span class="hljs-keyword">new</span> Customer();<br>    customerPrototype.setAddress(<span class="hljs-keyword">new</span> Address(<span class="hljs-string">&quot;北京&quot;</span>));<br>    Customer customerClone = customerPrototype.clone();<br>    <span class="hljs-comment">// 对象比较</span><br>    System.out.println(customerPrototype == customerClone);<br>    System.out.println(customerPrototype.equals(customerClone));<br>    <span class="hljs-comment">// 属性类比较</span><br>    System.out.println(customerPrototype.getAddress() == customerClone.getAddress());<br>    System.out.println(customerPrototype.getAddress().equals(customerClone.getAddress()));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deep</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException </span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;深克隆：&quot;</span>);<br>    Customer customerPrototype = <span class="hljs-keyword">new</span> Customer();<br>    customerPrototype.setAddress(<span class="hljs-keyword">new</span> Address(<span class="hljs-string">&quot;南京&quot;</span>));<br>    Customer customerClone = customerPrototype.deepClone();<br>    <span class="hljs-comment">// 对象比较</span><br>    System.out.println(customerPrototype == customerClone);<br>    System.out.println(customerPrototype.equals(customerClone));<br>    <span class="hljs-comment">// 属性类比较</span><br>    System.out.println(customerPrototype.getAddress() == customerClone.getAddress());<br>    System.out.println(customerPrototype.getAddress().equals(customerClone.getAddress()));<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="hbBdl"></a></p><h2 id="5-优缺点及适用场景-4"><a href="#5-优缺点及适用场景-4" class="headerlink" title="5. 优缺点及适用场景"></a>5. 优缺点及适用场景</h2><p><a name="GaqcK"></a></p><h3 id="5-1-优点-4"><a href="#5-1-优点-4" class="headerlink" title="5.1 优点"></a>5.1 优点</h3><ul><li><p>提高效率。使用原型模式创建对象比直接new一个对象在性能上要好的多，因为Object类的clone方法是一个本地方法， 它直接操作内存中的二进制流，特别是复制大对象时，性能的差别非常明显。<br><a name="haRgN"></a></p><h3 id="5-2-缺点-4"><a href="#5-2-缺点-4" class="headerlink" title="5.2 缺点"></a>5.2 缺点</h3></li><li><p>违背了开闭原则。需要为每个需要克隆的类提供clone方法</p></li><li><p>可能会提高复杂度。当克隆的代码比较复杂，存在多重的嵌套引用，如果要实现深克隆就需要为每一层对象都支持深克隆<br><a name="QglZc"></a></p><h3 id="5-3-适用场景-4"><a href="#5-3-适用场景-4" class="headerlink" title="5.3 适用场景"></a>5.3 适用场景</h3></li><li><p>创建新对象成本较大</p></li><li><p>系统要保存对象的状态，而对象的状态变化很小</p></li><li><p>复杂度较低，不存在多重的嵌套引用<br><a name="ckHHI"></a></p><h1 id="七、单例模式"><a href="#七、单例模式" class="headerlink" title="七、单例模式"></a>七、单例模式</h1><p><a name="XCa4w"></a></p><h2 id="1-创建什么-5"><a href="#1-创建什么-5" class="headerlink" title="1. 创建什么"></a>1. 创建什么</h2><p>自己<br><a name="x6cKu"></a></p><h2 id="2-由谁创建-5"><a href="#2-由谁创建-5" class="headerlink" title="2. 由谁创建"></a>2. 由谁创建</h2><p>自己，下列提供三种单例模式<br><a name="JpFU8"></a></p><h3 id="2-1-EagerSingleton"><a href="#2-1-EagerSingleton" class="headerlink" title="2.1 EagerSingleton"></a>2.1 EagerSingleton</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EagerSingleton</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> EagerSingleton instance = <span class="hljs-keyword">new</span> EagerSingleton();<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">EagerSingleton</span><span class="hljs-params">()</span> </span>&#123;&#125;;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> EagerSingleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="vj3Gk"></a></p><h3 id="2-2-LazySingleton"><a href="#2-2-LazySingleton" class="headerlink" title="2.2 LazySingleton"></a>2.2 LazySingleton</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LazySingleton</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">static</span> LazySingleton instance = <span class="hljs-keyword">null</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">LazySingleton</span><span class="hljs-params">()</span> </span>&#123;&#125;;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> LazySingleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (instance == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">synchronized</span> (LazySingleton.class) &#123;<br>                <span class="hljs-keyword">if</span> (instance == <span class="hljs-keyword">null</span>) &#123;<br>                    instance = <span class="hljs-keyword">new</span> LazySingleton();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="L9I0d"></a></p><h3 id="2-3-IoDHSingleton"><a href="#2-3-IoDHSingleton" class="headerlink" title="2.3 IoDHSingleton"></a>2.3 IoDHSingleton</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IoDHSingleton</span> </span>&#123; <span class="hljs-comment">// Initialization on Demand Holder</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">IoDHSingleton</span><span class="hljs-params">()</span> </span>&#123;&#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HolderClass</span> </span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> IoDHSingleton instance = <span class="hljs-keyword">new</span> IoDHSingleton();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> IoDHSingleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> HolderClass.instance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="th4JI"></a></p><h2 id="3-何时创建-5"><a href="#3-何时创建-5" class="headerlink" title="3. 何时创建"></a>3. 何时创建</h2><p>自己<br><a name="Ewo5O"></a></p><h2 id="4-客户端代码-5"><a href="#4-客户端代码-5" class="headerlink" title="4. 客户端代码"></a>4. 客户端代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">IoDHSingleton instance = IoDHSingleton.getInstance();<br></code></pre></td></tr></table></figure><p><a name="eZwbr"></a></p><h2 id="5-优缺点及适用场景-5"><a href="#5-优缺点及适用场景-5" class="headerlink" title="5. 优缺点及适用场景"></a>5. 优缺点及适用场景</h2><p><a name="CxGIX"></a></p><h3 id="5-1-优点-5"><a href="#5-1-优点-5" class="headerlink" title="5.1 优点"></a>5.1 优点</h3></li><li><p>提供了唯一实例的受控访问</p></li><li><p>节约资源。因为系统中只存在一个这样的实例<br><a name="YtuyH"></a></p><h3 id="5-2-缺点-5"><a href="#5-2-缺点-5" class="headerlink" title="5.2 缺点"></a>5.2 缺点</h3></li><li><p>扩展困难。没有抽象层</p></li><li><p>职责过重。因为单例类可能既提供了业务方法，也需要提供创建自己的方法<br><a name="gffJj"></a></p><h3 id="5-3-适用场景-5"><a href="#5-3-适用场景-5" class="headerlink" title="5.3 适用场景"></a>5.3 适用场景</h3></li><li><p>系统中只需要一个实例对象</p></li><li><p>客户调用类的单个实例只允许使用一个公共访问点</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java 设计模式</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>面向对象设计原则</title>
    <link href="/2022/05/14/Java%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
    <url>/2022/05/14/Java%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/</url>
    
    <content type="html"><![CDATA[<p><a name="a11edfd6"></a></p><h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><p>简而言之就是讲究两点：</p><ul><li><strong>可维护性（Maintainability）</strong></li><li><strong>可复用性（Reusability）</strong></li></ul><p>常用的面向对象设计原则有七种：</p><table><thead><tr><th><strong>设计原则名称</strong></th><th><strong>定义</strong></th><th><strong>使用频率</strong></th></tr></thead><tbody><tr><td>单一职责原则<br />（Single Responsibility Principle，SRP）</td><td>一个对象应该只包含单一的职责，并且该职责被完整地封装在一个类中</td><td>⭐⭐⭐⭐</td></tr><tr><td>开闭原则<br />（Open-Closed Principle，OCP）</td><td>软件实体应当对扩展开放，对修改关闭</td><td>⭐⭐⭐⭐⭐</td></tr><tr><td>里氏代换原则<br />（Liskov Substitution Principle，LSP）</td><td>所有引用基类的地方必须能透明地使用其子类的对象</td><td>⭐⭐⭐⭐⭐</td></tr><tr><td>依赖倒转原则<br />（Dependence Inversion Principle，DIP）</td><td>高层模块不应该依赖低层模块，它们都应该依赖抽象。抽象不应该依赖于细节，细节应该依赖于抽象</td><td>⭐⭐⭐⭐⭐</td></tr><tr><td>接口隔离原则<br />（Interface Segregation Principal，ISP）</td><td>客户端不应该依赖那些它不需要的接口</td><td>⭐⭐</td></tr><tr><td>合成复用原则<br />（Composite Reuse Principal，CRP）</td><td>优先使用对象组合，而不是通过继承来达到复用的目的</td><td>⭐⭐⭐⭐</td></tr><tr><td>迪米特法则<br />（Law of Demeter，LoD）</td><td>每一个软件单位对其他单位都只有最少的知识，而且局限于那些本单位密切相关的软件单位</td><td>⭐⭐⭐</td></tr></tbody></table><p><a name="zwHLn"></a></p><h1 id="二、面向对象设计原则"><a href="#二、面向对象设计原则" class="headerlink" title="二、面向对象设计原则"></a>二、面向对象设计原则</h1><p><a name="CpQIu"></a></p><h2 id="1-单一职责原则"><a href="#1-单一职责原则" class="headerlink" title="1. 单一职责原则"></a>1. 单一职责原则</h2><p><strong>简而言之就是控制类的粒度大小</strong><br />如下图类：</p><table><thead><tr><th><strong>CustomerDataChart</strong></th></tr></thead><tbody><tr><td></td></tr><tr><td>+ getConnection() : Connection<br />+ findCustomers() : List<br />+ createChart() : void<br />+ displayChart() : void</td></tr></tbody></table><p>使用单一职责原则对其重构后需要3个类：</p><ul><li>DbUtil：负责连接数据库，其中包含方法 getConnection()</li><li>CustomerDao：负责操作数据库中的 Customer 表，包括增删改查操作，例如 findCustomers()</li><li>CustomerDataChart：负责图表的生成和显示，包括 createCharte() 和 displayChart() 方法</li></ul><p><a name="otwSh"></a></p><h2 id="2-开闭原则"><a href="#2-开闭原则" class="headerlink" title="2. 开闭原则"></a>2. 开闭原则</h2><p>就是指软件实体应尽量在不修改原有代码的情况下进行扩展<br />为了满足开闭原则，需要对系统进行<strong>抽象化设计，抽象化是开闭原则的关键</strong><br />在 Java 中，可以为系统定义一个相对稳定的抽象层，而将不同的实现行为移至具体的实现层中完成<br />例如，<strong>接口、抽象类等机制，可以通过它们定义抽象层，再通过具体类进行扩展</strong><br />因此，如果需要修改系统的行为，无须对抽象层进行修改，只需增加新的具体类来实现新的业务功能即可</p><p><a name="nQ0rX"></a></p><h2 id="3-里氏代换原则"><a href="#3-里氏代换原则" class="headerlink" title="3. 里氏代换原则"></a>3. 里氏代换原则</h2><p>举例说明就是，我喜欢动物，那我一定喜欢狗，因为狗是动物的子类；但是我喜欢狗，不能因此推断出<br />我喜欢所有动物。<br />里氏代换是实现开闭原则的重要方式之一，由于在使用基类对象的地方都可以使用子类对象，<br /><strong>因此在程序中尽量使用基类类型来对对象进行定义</strong>，而在运行时再确定子类类型，用子类对象代替父类对象</p><p><a name="qJak8"></a></p><h2 id="4-依赖倒转原则"><a href="#4-依赖倒转原则" class="headerlink" title="4. 依赖倒转原则"></a>4. 依赖倒转原则</h2><p>通俗地讲，<strong>就是高层模块定义接口，低层模块负责实现</strong><br />比如可以在高层模块中定义接口，低层模块中定义类，并继承接口，实现接口中的所有成员</p><p>在实际项目开发过程中，开闭原则、里氏代换原则、依赖倒转原则常常会同时出现<br /><strong>开闭原则是目标，里氏代换原则是基础，依赖倒转是手段</strong></p><p><a name="JOJoy"></a></p><h2 id="5-接口隔离原则"><a href="#5-接口隔离原则" class="headerlink" title="5. 接口隔离原则"></a>5. 接口隔离原则</h2><p>简而言之，<strong>当一个接口太大时需要将它分割成一些更细小的接口，使用该接口的客户端仅需知道与之相关的方法即可</strong><br />在使用时也需要主要<strong>控制接口的粒度</strong>，接口不能太小，如果太小会导致系统中的接口泛滥，不利于维护；接口也不能太大，太大就违背了接口隔离原则</p><p><a name="D2bFN"></a></p><h2 id="6-合成复用原则"><a href="#6-合成复用原则" class="headerlink" title="6. 合成复用原则"></a>6. 合成复用原则</h2><p>同释义，<strong>优先使用对象组合</strong>，而不是通过继承来达到复用的目的<br />为什么不适用继承来达到复用？<br />问题在于继承复用会破坏系统的封装性，因为继承会将实现细节暴露给子类，如果基类发生改变，那么子类也不得不发生改变</p><p><a name="KL7J6"></a></p><h2 id="7-迪米特原则"><a href="#7-迪米特原则" class="headerlink" title="7. 迪米特原则"></a>7. 迪米特原则</h2><p><strong>不要和“陌生人”说话，而你的朋友是：</strong></p><ol><li>当前对象本身（this）</li><li>以参数形式传入到当前对象方法中的对象</li><li>当前对象的成员对象</li><li>如果当前对象的成员对象是一个集合，那么集合中的元素也都是朋友</li><li>当前对象所创建的对象</li></ol>]]></content>
    
    
    <categories>
      
      <category>Java 设计模式</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>进程的调度算法</title>
    <link href="/2022/04/04/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E8%BF%9B%E7%A8%8B%E7%9A%84%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/"/>
    <url>/2022/04/04/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E8%BF%9B%E7%A8%8B%E7%9A%84%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="一、调度算法的评价指标"><a href="#一、调度算法的评价指标" class="headerlink" title="一、调度算法的评价指标"></a>一、调度算法的评价指标</h1><p><img src="/image/image-20220404230911592.png" alt="image-20220404230911592"></p><h2 id="1-CPU-利用率"><a href="#1-CPU-利用率" class="headerlink" title="1. CPU 利用率"></a>1. CPU 利用率</h2><p><img src="/image/image-20220404231107986.png" alt="image-20220404231107986"></p><h2 id="2-系统吞吐量"><a href="#2-系统吞吐量" class="headerlink" title="2. 系统吞吐量"></a>2. 系统吞吐量</h2><p><img src="/image/image-20220404231216684.png" alt="image-20220404231216684"></p><h2 id="3-周转时间"><a href="#3-周转时间" class="headerlink" title="3. 周转时间"></a>3. 周转时间</h2><p><img src="/image/image-20220404231717341.png" alt="image-20220404231717341"></p><p><img src="/image/image-20220404231806882.png" alt="image-20220404231806882"></p><h2 id="4-等待时间"><a href="#4-等待时间" class="headerlink" title="4. 等待时间"></a>4. 等待时间</h2><p><img src="/image/image-20220404231905790.png" alt="image-20220404231905790"></p><h2 id="5-响应时间"><a href="#5-响应时间" class="headerlink" title="5. 响应时间"></a>5. 响应时间</h2><p><img src="/image/image-20220404231934537.png" alt="image-20220404231934537"></p><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h2><p><img src="/image/image-20220404232018018.png" alt="image-20220404232018018"></p><h1 id="二、调度算法"><a href="#二、调度算法" class="headerlink" title="二、调度算法"></a>二、调度算法</h1><h2 id="1-先来先服务-FCFS"><a href="#1-先来先服务-FCFS" class="headerlink" title="1. 先来先服务 FCFS"></a>1. 先来先服务 FCFS</h2><p><img src="/image/image-20220404233209135.png" alt="image-20220404233209135"></p><p><img src="/image/image-20220404233446041.png" alt="image-20220404233446041"></p><h2 id="2-短作业优先-SJF"><a href="#2-短作业优先-SJF" class="headerlink" title="2. 短作业优先 SJF"></a>2. 短作业优先 SJF</h2><p><img src="/image/image-20220404234530360.png" alt="image-20220404234530360"></p><h3 id="非抢占式"><a href="#非抢占式" class="headerlink" title="非抢占式"></a>非抢占式</h3><p><img src="/image/image-20220404233653049.png" alt="image-20220404233653049"></p><h3 id="抢占式"><a href="#抢占式" class="headerlink" title="抢占式"></a>抢占式</h3><p><img src="/image/image-20220404234057118.png" alt="image-20220404234057118"></p><h2 id="3-高响应比优先-HRRN"><a href="#3-高响应比优先-HRRN" class="headerlink" title="3. 高响应比优先 HRRN"></a>3. 高响应比优先 HRRN</h2><p><img src="/image/image-20220404235026765.png" alt="image-20220404235026765"></p><p><img src="/image/image-20220404235152192.png" alt="image-20220404235152192"></p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><p><img src="/image/image-20220404235303408.png" alt="image-20220404235303408"></p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>MongoDB学习</title>
    <link href="/2022/03/24/MongoDB/mongodb%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/03/24/MongoDB/mongodb%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="一、CURD"><a href="#一、CURD" class="headerlink" title="一、CURD"></a>一、CURD</h1><h2 id="1-增加"><a href="#1-增加" class="headerlink" title="1. 增加"></a>1. 增加</h2><h3 id="单条文档"><a href="#单条文档" class="headerlink" title="单条文档"></a>单条文档</h3><figure class="highlight sql"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><pre><code class="hljs sql">db.collection.insert() &#123;<br><span class="hljs-operator">&lt;</span>document<span class="hljs-operator">&gt;</span><br>&#125;<br><br>第一种用法：<br>db.user.insert(&#123;<br>    name: &quot;wu&quot;,<br>    age: <span class="hljs-number">20</span><br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="多条文档"><a href="#多条文档" class="headerlink" title="多条文档"></a>多条文档</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql">db.collection.insert() &#123;<br>[<br>        <span class="hljs-operator">&lt;</span>document <span class="hljs-number">1</span><span class="hljs-operator">&gt;</span>,<br>        <span class="hljs-operator">&lt;</span>document <span class="hljs-number">2</span><span class="hljs-operator">&gt;</span>,<br>        &#123;<br>        writeConcern: <span class="hljs-operator">&lt;</span>bit<span class="hljs-operator">&gt;</span>,<br>        ordered: <span class="hljs-operator">&lt;</span><span class="hljs-type">boolean</span><span class="hljs-operator">&gt;</span><br>        &#125;<br>    ]<br>&#125;<br><br>第二种用法：db.user.insert([<br>    &#123;name: &quot;wu&quot;, age: <span class="hljs-number">20</span>&#125;,<br>    &#123;name: &quot;wu1&quot;, age: <span class="hljs-number">21</span>&#125;<br>]);<br></code></pre></td></tr></table></figure><h4 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h4><ul><li><strong>writeConcern</strong>： 写入策略，默认为 <code>1</code> ，即要求确认写操作，<code>0</code> 是不要求</li><li><strong>ordered</strong>： 指定是否按顺序写入，默认为 <code>ture</code> 按顺序写入</li></ul><h3 id="脚本方式"><a href="#脚本方式" class="headerlink" title="脚本方式"></a>脚本方式</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">for</span> (let i <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i <span class="hljs-operator">&lt;</span> <span class="hljs-number">100</span>; i<span class="hljs-operator">+</span><span class="hljs-operator">+</span>) &#123;<br>db.user.insert(&#123;<br>......<br>&#125;)<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">db.集合名.<span class="hljs-keyword">insert</span>()，功能涵盖 insertOne() 和 insertMany()<br><br>db.集合名.insertOne()<br>同 db.集合名.<span class="hljs-keyword">insert</span>() 的第一种用法<br><br>db.集合名.insertMany()<br>同 db.集合名.<span class="hljs-keyword">insert</span>() 的第二种用法<br></code></pre></td></tr></table></figure><h2 id="2-删除"><a href="#2-删除" class="headerlink" title="2. 删除"></a>2. 删除</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">db.集合名.remove(<br><span class="hljs-operator">&lt;</span>query<span class="hljs-operator">&gt;</span><br>    &#123;<br>    justOne: <span class="hljs-operator">&lt;</span><span class="hljs-type">boolean</span><span class="hljs-operator">&gt;</span>,<br>    writeConcern: <span class="hljs-operator">&lt;</span>document<span class="hljs-operator">&gt;</span><br>    &#125;<br>)<br></code></pre></td></tr></table></figure><ul><li><h3 id="参数说明-1"><a href="#参数说明-1" class="headerlink" title="参数说明"></a>参数说明</h3></li><li><p><strong>query</strong>： 可选删除的文档的条件</p></li><li><p><strong>justOne</strong>： 如果设为 <code>true</code> 或 <code>1</code> 代表只删除一个文档；如果不设置该参数，默认为 <code>false</code>，表示删除所有匹配条件的文档</p></li><li><p><strong>writeConcern</strong>： 可选抛出异常的级别</p></li></ul><h2 id="3-更改"><a href="#3-更改" class="headerlink" title="3. 更改"></a>3. 更改</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql">db.collection.update(<br><span class="hljs-operator">&lt;</span>query<span class="hljs-operator">&gt;</span>,<br><span class="hljs-operator">&lt;</span>update<span class="hljs-operator">&gt;</span>,<br>&#123;<br>upsert: <span class="hljs-operator">&lt;</span><span class="hljs-type">boolean</span><span class="hljs-operator">&gt;</span>,<br>multi: <span class="hljs-operator">&lt;</span><span class="hljs-type">boolean</span><span class="hljs-operator">&gt;</span>,<br>writeConcern: <span class="hljs-operator">&lt;</span>document<span class="hljs-operator">&gt;</span><br>&#125;<br>)<br></code></pre></td></tr></table></figure><h3 id="参数说明-2"><a href="#参数说明-2" class="headerlink" title="参数说明"></a>参数说明</h3><ul><li><strong>query</strong>： 条件，类似 <code>sql</code> 中 <code>update</code> 语句后的 <code>where</code></li><li><strong>update</strong>： 更新内容，类似 <code>sql</code> 中 <code>update</code> 语句后的 <code>set</code></li><li><strong>upsert</strong>： 可选，如果不存在 <code>update</code> 的记录，是否插入 <code>objNew</code>，<code>true</code> 为插入，默认为 <code>false</code></li><li><strong>multi</strong>： 可选，默认是 <code>false</code>， 只更新找到的第一条记录；如果 <code>true</code>，则更新所有匹配条件的值</li><li><strong>writeConcern</strong>： 可选，抛出异常的级别</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs sql">db.collection.update(## 相当于先删除后更新，把符合条件的内容删除后，更新成语句中的 <span class="hljs-operator">&lt;</span>document<span class="hljs-operator">&gt;</span><br>    ## 删除第一条 name 为 zhangsan 的数据，替换为 name 为 lusi，age 为 <span class="hljs-number">21</span><br>    &#123;<br>name: &quot;zhangsan&quot;<br>&#125;,<br>    &#123;<br>    name: &quot;lusi&quot;,<br>    age: <span class="hljs-number">21</span><br>    &#125;<br>)<br><br>db.collection.update(## 保留原来的数据更新，但是只更新符合条件的第一条数据<br>    ## 更新第一条 name 为 zhangsan 的数据，在保留其他数据的情况下更新 name 为 xiaoming<br>    &#123;<br>name: &quot;zhangsan&quot;,<br>&#125;,<br>    &#123;<br>    $<span class="hljs-keyword">set</span>:<br>    &#123;<br>    name: &quot;xiaoming&quot;<br>    &#125;<br>    &#125;<br>)<br><br>db.collection.update(## 保留原来的数据更新，并且更新符合条件的所有数据<br>    ## 更新所有zhangsan 的数据，在保留其他数据的情况下更新 name 为 xiaoming<br>    &#123;<br>name: &quot;zhangsan&quot;,<br>&#125;,<br>    &#123;<br>    $<span class="hljs-keyword">set</span>:<br>    &#123;<br>    name: &quot;xiaoming&quot;<br>    &#125;<br>    &#125;<br>    multi: <span class="hljs-literal">true</span>,<br>    upsert: <span class="hljs-literal">true</span><br>)<br></code></pre></td></tr></table></figure><h2 id="4-查询"><a href="#4-查询" class="headerlink" title="4. 查询"></a>4. 查询</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apl">pretty() 方法以格式化的方式显示所有文档<br></code></pre></td></tr></table></figure><h1 id="二、索引"><a href="#二、索引" class="headerlink" title="二、索引"></a>二、索引</h1><h2 id="1-创建"><a href="#1-创建" class="headerlink" title="1. 创建"></a>1. 创建</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs sql">db.collection.createIndex(key, options)<br>如：<br>db.collection.createIndex(<br>    &#123;<br>    title: <span class="hljs-number">1</span>,## 为 title 字段创建升序索引<br>    &#125;<br>)<br><br>又如：<br>db.collection.createIndex(<br>&#123;<br>    name:<span class="hljs-number">1</span>## 为 name 字段创建升序索引<br>    &#125;,<br>    &#123;<br>    name: <span class="hljs-string">&#x27;name_index&#x27;</span>,## 指定索引名为 name_index<br>    expireAfterSecondes: <span class="hljs-number">15</span>,## 指定索引的存在 <span class="hljs-number">15</span>s 的过期时间<br>    <span class="hljs-keyword">unique</span>: <span class="hljs-literal">true</span>## 指定 name 为唯一索引<br>    &#125;<br>)<br><br>复合索引：一个索引的值是由多个 key 进行维护的索引<br>db.collection.createIndex(<br>    &#123;<br>    name: <span class="hljs-number">1</span>,## 为 name 字段创建升序索引<br>    age: <span class="hljs-number">-1</span>## 为 age 字段创建降序索引<br>    &#125;,<br>    &#123;<br>    name: <span class="hljs-string">&#x27;name_age_index&#x27;</span><br>    &#125;<br>)<br></code></pre></td></tr></table></figure><p><strong>说明：</strong>语法中 <code>key</code> 值为你要创建的索引字段，<code>1</code> 为<strong>升序</strong>创建索引，<code>-1</code> 为<strong>降序</strong></p><h2 id="2-删除-1"><a href="#2-删除-1" class="headerlink" title="2. 删除"></a>2. 删除</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">db.collections.dropIndexes();<br></code></pre></td></tr></table></figure><h3 id="指定"><a href="#指定" class="headerlink" title="指定"></a>指定</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">db.collections.dropIndex(&quot;索引名称&quot;)<br></code></pre></td></tr></table></figure><h2 id="3-查看"><a href="#3-查看" class="headerlink" title="3. 查看"></a>3. 查看</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">db.collection.getIndexes()<br></code></pre></td></tr></table></figure><h3 id="大小"><a href="#大小" class="headerlink" title="大小"></a>大小</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">db.collection.totalIndexSize();<br></code></pre></td></tr></table></figure><h1 id="三、聚合查询"><a href="#三、聚合查询" class="headerlink" title="三、聚合查询"></a>三、聚合查询</h1><p>类似于 <code>SQL</code> 中的 <code>count(*)</code>，主要用于处理数据（诸如求平均值，求和等）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql">db.collection.aggregate([<br>&#123;<br>$<span class="hljs-keyword">group</span>: &#123;<br>_id: &quot;$by_user&quot;,<br>num_tutorial: &#123;<br>$sum: <span class="hljs-number">1</span><br>&#125;<br>&#125;<br>&#125;<br>])<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>MongoDB</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Elasticsearch学习</title>
    <link href="/2022/03/21/Elasticsearch/Elasticsearch%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/03/21/Elasticsearch/Elasticsearch%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在互联网中，我们查询的信息主要包括文章、视频、图片、网站信息等等</p><p>根据数据的格式，我们会将数据分为三大类：</p><ul><li><p><strong>结构化数据</strong>，通常表现为二维的表结构，例如<code>MySQL</code>、<code>Oracle</code> 中的表结构数据</p><ul><li>优点：方便管理，方便查询</li><li>缺点：扩张结构较难</li></ul></li><li><p><strong>非结构化数据</strong>，无法用二维表表示的数据，例如服务器日志、通讯记录、工作文档、报表等，这些数据维度管，数据量大，数据的存储、查询成本大，往往需要专业的人员和统计模型进行处理，通常会将这些数据保存到 <code>NoSQL</code> 数据库中去，例如 <code>Redis</code> 、 <code>MongoDB</code>，通常是以 <code>key - value</code> 键值对</p><ul><li>优点：查询快</li><li>缺点：由于他们的非特征性和歧义性，会更难理解</li></ul></li><li><p><strong>半结构化数据</strong>，将数据结构和内容混在一起，没有明显的区分，例如存储员工的简历，通常装载在<code>XML</code>、<code>Html</code>等中 ，保存在 <code>MongoDB</code>、<code>Redis</code> 、<code>HBase</code> 中</p><ul><li>优点：能够灵活的扩展</li><li>缺点：查询内容不易</li></ul></li></ul><p>如何快速、准确地查询结构化数据、非结构化数据当中的内容，<code>ElasticSearch</code> 就是为此诞生的</p><h1 id="一、索引"><a href="#一、索引" class="headerlink" title="一、索引"></a>一、索引</h1><p>索引创建之后是<strong>不允许被修改</strong>的，只能被删除</p><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><figure class="highlight sql"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs sql">## 查看 es 中的所有索引<br><span class="hljs-keyword">GET</span> <span class="hljs-operator">/</span>_cat<span class="hljs-operator">/</span>indices<br><br>## 查看 es 中的所有索引，包含标题<br><span class="hljs-keyword">GET</span> <span class="hljs-operator">/</span>_cat<span class="hljs-operator">/</span>indices?v<br></code></pre></td></tr></table></figure><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql">## 创建索引<br>PUT <span class="hljs-operator">/</span>索引名<br><br>## 创建索引，并设置属性<br>PUT <span class="hljs-operator">/</span>索引名<br>&#123;<br>&quot;settings&quot;: &#123;<br>&quot;number_of_shards&quot;: <span class="hljs-number">1</span>,## 指定主分片的数量<br>&quot;number_of_replicas&quot;: <span class="hljs-number">0</span>## 指定副本分片的数量<br>&#125; <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> <span class="hljs-operator">/</span>索引名<br></code></pre></td></tr></table></figure><h1 id="二、映射"><a href="#二、映射" class="headerlink" title="二、映射"></a>二、映射</h1><ul><li>字符串类型：keyword、text</li><li>数字类型：integer、long</li><li>小数类型：float、double</li><li>布尔类型：boolean</li><li>日期类型：date</li></ul><h2 id="创建-1"><a href="#创建-1" class="headerlink" title="创建"></a>创建</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs sql">## 创建商品索引 products 指定 mapping &#123;<br>id,<br>title,<br>price,<br>created_at,<br>description<br>&#125;<br>PUT <span class="hljs-operator">/</span>products<br>&#123;<br>&quot;settings&quot;: &#123;<br>&quot;number_of_shards&quot;: <span class="hljs-number">1</span>,## 指定主分片的数量<br>&quot;number_of_replicas&quot;: <span class="hljs-number">0</span>## 指定副本分片的数量<br>&#125;,<br>&quot;mappings&quot;: &#123;<br>&quot;properties&quot;: &#123;<br>&quot;id&quot;: &#123;<br>&quot;type&quot;: &quot;integer&quot;<br>&#125;,<br>&quot;title&quot;: &#123;<br>&quot;type&quot;: &quot;keyword&quot;<br>&#125;,<br>&quot;price&quot;: &#123;<br>&quot;type&quot;: &quot;double&quot;<br>&#125;,<br>&quot;created_at&quot;: &#123;<br>&quot;type&quot;: &quot;date&quot;<br>&#125;,<br>&quot;description&quot;: &#123;<br>&quot;type&quot;: &quot;text&quot;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">GET</span> <span class="hljs-operator">/</span>索引名<span class="hljs-operator">/</span>_mapping<br></code></pre></td></tr></table></figure><h1 id="三、文档"><a href="#三、文档" class="headerlink" title="三、文档"></a>三、文档</h1><h2 id="创建-2"><a href="#创建-2" class="headerlink" title="创建"></a>创建</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sql">POST <span class="hljs-operator">/</span>索引名<span class="hljs-operator">/</span>_doc<span class="hljs-operator">/</span>id ## 指定文档 id<br>如：<br><br>POST <span class="hljs-operator">/</span>products<span class="hljs-operator">/</span>_doc<span class="hljs-operator">/</span><span class="hljs-number">1</span><br>&#123;<br>&quot;title&quot;: &quot;iphone13&quot;,<br>&quot;price&quot;: <span class="hljs-number">8999.9</span>,<br>&quot;created_at&quot;: &quot;2021-09-15&quot;,<br>&quot;description&quot;: &quot;xxxxxxx&quot;<br>&#125;<br><br>POST <span class="hljs-operator">/</span>索引名<span class="hljs-operator">/</span>_doc ## 不指定文档 id，那么内部将会自动分配一个 uuid<br>如：<br><br>POST <span class="hljs-operator">/</span>products<span class="hljs-operator">/</span>_doc<span class="hljs-operator">/</span><span class="hljs-number">1</span><br>&#123;<br>&quot;title&quot;: &quot;iphone13&quot;,<br>&quot;price&quot;: <span class="hljs-number">8999.9</span>,<br>&quot;created_at&quot;: &quot;2021-09-15&quot;,<br>&quot;description&quot;: &quot;xxxxxxx&quot;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="查询-1"><a href="#查询-1" class="headerlink" title="查询"></a>查询</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">GET</span> <span class="hljs-operator">/</span>索引名<span class="hljs-operator">/</span>_doc<span class="hljs-operator">/</span>id<br></code></pre></td></tr></table></figure><h2 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> <span class="hljs-operator">/</span>索引名<span class="hljs-operator">/</span>_doc<span class="hljs-operator">/</span>id<br></code></pre></td></tr></table></figure><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 第一种方式<br>PUT <span class="hljs-operator">/</span>索引名<span class="hljs-operator">/</span>_doc<span class="hljs-operator">/</span>id<br>如：<br>PUT <span class="hljs-operator">/</span>products<span class="hljs-operator">/</span>doc<span class="hljs-operator">/</span><span class="hljs-number">1</span> ## 先删除，再插入。可能会导致原来存有的映射丢失<br>&#123;<br>&quot;title&quot;: &quot;iphone14&quot;<br>&#125;<br><br># 第二种方式<br>POST <span class="hljs-operator">/</span>索引名<span class="hljs-operator">/</span>_doc<span class="hljs-operator">/</span>id<span class="hljs-operator">/</span>_update<br>&#123;<br>&quot;doc&quot;: &#123;<br><br>&#125;<br>&#125;<br>如：<br>POST <span class="hljs-operator">/</span>products<span class="hljs-operator">/</span>_doc<span class="hljs-operator">/</span><span class="hljs-number">1</span><span class="hljs-operator">/</span>_update<br>&#123;<br>&quot;doc&quot;: &#123;<br>&quot;title&quot;: &quot;iphone14&quot;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="五、批量操作-bulk"><a href="#五、批量操作-bulk" class="headerlink" title="五、批量操作 _bulk"></a>五、批量操作 _bulk</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 文档批量操作 _bulk<br>POST <span class="hljs-operator">/</span>索引名<span class="hljs-operator">/</span>_doc<span class="hljs-operator">/</span>_bulk<br>如：<br>POST <span class="hljs-operator">/</span>products<span class="hljs-operator">/</span>_doc<span class="hljs-operator">/</span>_bulk<br># 特别注意：<br># 一、批操作不能回车换行<br># 二、不是一个原子性操作，不会因为某一条有误而导致整个批操作失败<br><br># 以下是关于 添加 更新 删除 的批操作<br>&#123;&quot;index&quot;: &#123;&quot;_id&quot;: <span class="hljs-number">2</span>&#125;&#125;<br> &#123;&quot;id&quot;: <span class="hljs-number">2</span>,&quot;title&quot;: &quot;日本豆&quot;,&quot;price&quot;: <span class="hljs-number">1.8</span>,&quot;created_at&quot;: &quot;2012-11-12&quot;,&quot;description&quot;: &quot;好难吃的日本豆！&quot;&#125;<br>&#123;&quot;update&quot;:&#123;&quot;_id&quot;: <span class="hljs-number">3</span>&#125;&#125;<br> &#123;&quot;doc&quot;:&#123;&quot;title&quot;:&quot;小于豆腐&quot;&#125;&#125;<br>&#123;&quot;delete&quot;:&#123;&quot;_id&quot;:<span class="hljs-number">2</span>&#125;&#125;<br></code></pre></td></tr></table></figure><h1 id="六、Query-Domain-Specified-Language-DSL"><a href="#六、Query-Domain-Specified-Language-DSL" class="headerlink" title="六、Query Domain Specified Language(DSL)"></a>六、Query Domain Specified Language(DSL)</h1><p><code>Query DSL</code> 是利用 <code>Rest API</code> 传递 <code>JSON</code> 格式的请求体数据与 <code>ES</code> 进行交互</p><p>这种方式的查询语法让 <code>ES</code> 检索变得更加强大，更加简洁</p><p><strong>语法</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">Get</span> <span class="hljs-operator">/</span>索引名<span class="hljs-operator">/</span>_doc<span class="hljs-operator">/</span>_search &#123;Json格式请求体数据&#125;<br>或<br><span class="hljs-keyword">Get</span> <span class="hljs-operator">/</span>索引名<span class="hljs-operator">/</span>_search &#123;Json格式请求体数据&#125;<br></code></pre></td></tr></table></figure><h2 id="查询所有-match-all"><a href="#查询所有-match-all" class="headerlink" title="查询所有 [match_all]"></a>查询所有 [match_all]</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">Get</span> <span class="hljs-operator">/</span>索引名<span class="hljs-operator">/</span>_doc<span class="hljs-operator">/</span>_search <span class="hljs-operator">|</span> <span class="hljs-keyword">Get</span> <span class="hljs-operator">/</span>索引名<span class="hljs-operator">/</span>_search<br>&#123;<br>&quot;query&quot;: &#123;<br>&quot;match_all&quot;: &#123;&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="关键词查询-term"><a href="#关键词查询-term" class="headerlink" title="关键词查询 [term]"></a>关键词查询 [term]</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 注意：term 基于关键词查询<br># 一、查询 keyword 类型时，不会进行分词，所以要使用全部内容进行搜索<br># 二、查询 text 类型时，默认 es 标准分词器对中文单字分词，对英文单词分词<br># 三、查询 <span class="hljs-type">integer</span>、<span class="hljs-keyword">double</span>、<span class="hljs-keyword">double</span>、<span class="hljs-type">date</span> 类型时，不会进行分词<br><span class="hljs-keyword">Get</span> <span class="hljs-operator">/</span>索引名<span class="hljs-operator">/</span>_doc<span class="hljs-operator">/</span>_search <span class="hljs-operator">|</span> <span class="hljs-keyword">Get</span> <span class="hljs-operator">/</span>索引名<span class="hljs-operator">/</span>_search<br>&#123;<br>&quot;query&quot;: &#123;<br>&quot;term&quot;: &#123;<br>&quot;映射名&quot;: &#123;<br>&quot;value&quot;: xxxx<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>如：<br><span class="hljs-keyword">GET</span> <span class="hljs-operator">/</span>products<span class="hljs-operator">/</span>_search<br>&#123;<br>&quot;query&quot;: &#123;<br>&quot;term&quot;: &#123;<br>&quot;price&quot;: &#123;<br>&quot;value&quot;: <span class="hljs-number">49999</span><br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>在 <code>ES</code> 中除了 <code>text</code> 类型会进行分词，其余类型均不会分词</li><li>在 <code>ES</code> 中默认使用标准分词器，即对中文是单字分词，英文是单词分词</li></ul><h2 id="范围查询-range"><a href="#范围查询-range" class="headerlink" title="范围查询 [range]"></a>范围查询 [range]</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">Get</span> <span class="hljs-operator">/</span>索引名<span class="hljs-operator">/</span>_doc<span class="hljs-operator">/</span>_search <span class="hljs-operator">|</span> <span class="hljs-keyword">Get</span> <span class="hljs-operator">/</span>索引名<span class="hljs-operator">/</span>_search<br>&#123;<br>&quot;query&quot;: &#123;<br>&quot;range&quot;: &#123;<br>&quot;映射名&quot;: &#123;<br><br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>如：<br><span class="hljs-keyword">GET</span> <span class="hljs-operator">/</span>products<span class="hljs-operator">/</span>_search<br>&#123;<br>&quot;query&quot;: &#123;<br>&quot;range&quot;: &#123;<br>&quot;price&quot;: &#123;<br>&quot;gte&quot;: <span class="hljs-number">1400</span>,<br>&quot;lte&quot;: <span class="hljs-number">9999</span><br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="前缀查询-prefix"><a href="#前缀查询-prefix" class="headerlink" title="前缀查询 [prefix]"></a>前缀查询 [prefix]</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">Get</span> <span class="hljs-operator">/</span>索引名<span class="hljs-operator">/</span>_doc<span class="hljs-operator">/</span>_search <span class="hljs-operator">|</span> <span class="hljs-keyword">Get</span> <span class="hljs-operator">/</span>索引名<span class="hljs-operator">/</span>_search<br>&#123;<br>&quot;query&quot;: &#123;<br>&quot;prefix&quot;: &#123;<br>&quot;映射名&quot;: &#123;<br>&quot;value&quot;: &quot;xxx&quot;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>如：<br><span class="hljs-keyword">GET</span> <span class="hljs-operator">/</span>products<span class="hljs-operator">/</span>_search<br>&#123;<br>&quot;query&quot;: &#123;<br>&quot;prefix&quot;: &#123;<br>&quot;title&quot;: &#123;<br>&quot;value&quot;: &quot;ipho&quot;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="通配符查询-wildcard"><a href="#通配符查询-wildcard" class="headerlink" title="通配符查询 [wildcard]"></a>通配符查询 [wildcard]</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">Get</span> <span class="hljs-operator">/</span>索引名<span class="hljs-operator">/</span>_doc<span class="hljs-operator">/</span>_search <span class="hljs-operator">|</span> <span class="hljs-keyword">Get</span> <span class="hljs-operator">/</span>索引名<span class="hljs-operator">/</span>_search<br># ? 用来匹配一个任意字符<br># <span class="hljs-operator">*</span> 用来匹配多个任意字符<br>&#123;<br>&quot;query&quot;: &#123;<br>&quot;wildcard&quot;: &#123;<br>&quot;映射名&quot;: &#123;<br>&quot;value&quot;: &quot;x*?&quot;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>如：<br><span class="hljs-keyword">GET</span> <span class="hljs-operator">/</span>products<span class="hljs-operator">/</span>_search<br>&#123;<br>&quot;query&quot;: &#123;<br>&quot;wildcard&quot;: &#123;<br>&quot;description&quot;: &#123;<br>&quot;value&quot;: &quot;inp*&quot;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="多-id-查询-ids"><a href="#多-id-查询-ids" class="headerlink" title="多 id 查询 [ids]"></a>多 id 查询 [ids]</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">Get</span> <span class="hljs-operator">/</span>索引名<span class="hljs-operator">/</span>_doc<span class="hljs-operator">/</span>_search <span class="hljs-operator">|</span> <span class="hljs-keyword">Get</span> <span class="hljs-operator">/</span>索引名<span class="hljs-operator">/</span>_search<br>&#123;<br>&quot;query&quot;: &#123;<br>&quot;ids&quot;: &#123;<br>&quot;values&quot;: [<br>            &quot;id1&quot;,<br>            &quot;id2&quot;<br>            ]<br>&#125;<br>&#125;<br>&#125;<br>如：<br><span class="hljs-keyword">GET</span> <span class="hljs-operator">/</span>products<span class="hljs-operator">/</span>_search<br>&#123;<br>&quot;query&quot;: &#123;<br>&quot;ids&quot;: &#123;<br>&quot;values&quot;: [&quot;xxxxxx&quot;, &quot;xxxxxxxxxx&quot;]<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="模糊查询-fuzzy"><a href="#模糊查询-fuzzy" class="headerlink" title="模糊查询 [fuzzy]"></a>模糊查询 [fuzzy]</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 注意：最大模糊错误在 <span class="hljs-number">0</span> <span class="hljs-operator">-</span> <span class="hljs-number">2</span> 之间<br><span class="hljs-keyword">Get</span> <span class="hljs-operator">/</span>索引名<span class="hljs-operator">/</span>_doc<span class="hljs-operator">/</span>_search <span class="hljs-operator">|</span> <span class="hljs-keyword">Get</span> <span class="hljs-operator">/</span>索引名<span class="hljs-operator">/</span>_search<br>&#123;<br>&quot;query&quot;: &#123;<br>&quot;fuzzy&quot;: &#123;<br>&quot;映射名&quot;: &quot;xxxx&quot;<br>&#125;<br>&#125;<br>&#125;<br>如：<br><span class="hljs-keyword">GET</span> <span class="hljs-operator">/</span>products<span class="hljs-operator">/</span>_search<br>&#123;<br>&quot;query&quot;: &#123;<br>&quot;fuzzy&quot;: &#123;<br>&quot;description&quot;: &quot;iphoneoooes&quot;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><ul><li>搜索关键词长度小于等于 2 不允许存在模糊</li><li>搜索关键词长度 3 - 5 允许存在一次模糊</li><li>搜索关键词长度大于等于 5 允许存在两次模糊</li></ul><h2 id="布尔查询-bool"><a href="#布尔查询-bool" class="headerlink" title="布尔查询 [bool]"></a>布尔查询 [bool]</h2><blockquote><p>用来组合多个条件实现复杂查询</p><p><strong>must</strong>：相当于 &amp;&amp; 同时成立</p><p><strong>should</strong>：相当于 || 成立一个就行</p><p><strong>must_not</strong>：相当于 ！ 不能满足一个</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">Get</span> <span class="hljs-operator">/</span>索引名<span class="hljs-operator">/</span>_doc<span class="hljs-operator">/</span>_search <span class="hljs-operator">|</span> <span class="hljs-keyword">Get</span> <span class="hljs-operator">/</span>索引名<span class="hljs-operator">/</span>_search<br>&#123;<br>&quot;query&quot;: &#123;<br>&quot;bool&quot;: &#123;<br>&quot;should | must | must_not&quot;: &#123;<br><br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>如：<br># 查询满足 id 为 <span class="hljs-number">1</span> 或 title 含有豆腐的值<br><span class="hljs-keyword">GET</span> <span class="hljs-operator">/</span>products<span class="hljs-operator">/</span>_search<br>&#123;<br>&quot;query&quot;: &#123;<br>&quot;bool&quot;: &#123;<br>&quot;should&quot;: [<br>                &#123;<br>                &quot;ids&quot;: &#123;<br>                &quot;values&quot;: [<span class="hljs-number">1</span>]<br>                &#125;<br>                &#125;,<br>                &#123;<br>                &quot;term&quot;: &#123;<br>                &quot;title&quot;: &#123;<br>                &quot;values&quot;: &quot;豆腐&quot;<br>                &#125;<br>                &#125;<br>                &#125;<br>            ]<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="多字段查询-multi-match"><a href="#多字段查询-multi-match" class="headerlink" title="多字段查询 [multi_match]"></a>多字段查询 [multi_match]</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"># query 根据字段类型选择是否分词：<br># 如果 fields 中含有不分词，将查询条件作为整体进行查询<br># 如果 fields 中含有分词，将查询条件分词之后进行查询<br><span class="hljs-keyword">Get</span> <span class="hljs-operator">/</span>索引名<span class="hljs-operator">/</span>_doc<span class="hljs-operator">/</span>_search <span class="hljs-operator">|</span> <span class="hljs-keyword">Get</span> <span class="hljs-operator">/</span>索引名<span class="hljs-operator">/</span>_search<br>&#123;<br>&quot;query&quot;: &#123;<br>&quot;multi_match&quot;: &#123;<br>&quot;query&quot;: &quot;xxxxx&quot;,<br>&quot;fields&quot;: [&quot;映射名1&quot;, &quot;映射名2&quot;]<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="默认字段分词查询-query-string"><a href="#默认字段分词查询-query-string" class="headerlink" title="默认字段分词查询 [query_string]"></a>默认字段分词查询 [query_string]</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sql"># query 根据字段类型选择是否分词：<br># 如果 fields 中含有不分词，将查询条件作为整体进行查询<br># 如果 fields 中含有分词，将查询条件分词之后进行查询<br><span class="hljs-keyword">Get</span> <span class="hljs-operator">/</span>索引名<span class="hljs-operator">/</span>_doc<span class="hljs-operator">/</span>_search <span class="hljs-operator">|</span> <span class="hljs-keyword">Get</span> <span class="hljs-operator">/</span>索引名<span class="hljs-operator">/</span>_search<br>&#123;<br>&quot;query&quot;: &#123;<br>&quot;query_string&quot;: &#123;<br>&quot;default_field&quot;: &quot;映射名&quot;<br>&quot;query&quot;: &quot;xxxxxx&quot;<br>&#125;<br>&#125;<br>&#125;<br>如：<br><span class="hljs-keyword">GET</span> <span class="hljs-operator">/</span>products<span class="hljs-operator">/</span>_search<br>&#123;<br>&quot;query&quot;: &#123;<br>&quot;query_string&quot;: &#123;<br>&quot;default_field&quot;: &quot;description&quot;,<br>&quot;query&quot;: &quot;屏幕真的很不错&quot;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="返回指定条数-size"><a href="#返回指定条数-size" class="headerlink" title="返回指定条数 [size]"></a>返回指定条数 [size]</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">Get</span> <span class="hljs-operator">/</span>索引名<span class="hljs-operator">/</span>_doc<span class="hljs-operator">/</span>_search <span class="hljs-operator">|</span> <span class="hljs-keyword">Get</span> <span class="hljs-operator">/</span>索引名<span class="hljs-operator">/</span>_search<br>&#123;<br>&quot;query&quot;: &#123;<br>...<br>&#125;,<br>&quot;size&quot;: n<br>&#125;<br>如：<br><span class="hljs-keyword">GET</span> <span class="hljs-operator">/</span>products<span class="hljs-operator">/</span>_search<br>&#123;<br>&quot;query&quot;: &#123;<br>&quot;match_all&quot;: &#123;&#125;<br>&#125;,<br>&quot;size&quot;: <span class="hljs-number">5</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="分页查询-from"><a href="#分页查询-from" class="headerlink" title="分页查询 [from]"></a>分页查询 [from]</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">Get</span> <span class="hljs-operator">/</span>索引名<span class="hljs-operator">/</span>_doc<span class="hljs-operator">/</span>_search <span class="hljs-operator">|</span> <span class="hljs-keyword">Get</span> <span class="hljs-operator">/</span>索引名<span class="hljs-operator">/</span>_search<br>&#123;<br>&quot;query&quot;: &#123;<br>...<br>&#125;,<br>&quot;from&quot;: 从第几页开始查询<br>&quot;size&quot;: 每页大小<br>&#125;<br>如：<br><span class="hljs-keyword">GET</span> <span class="hljs-operator">/</span>products<span class="hljs-operator">/</span>_search<br>&#123;<br>&quot;query&quot;: &#123;<br>&quot;match_all&quot;: &#123;&#125;<br>&#125;,<br>&quot;from&quot;: <span class="hljs-number">0</span><br>&quot;size&quot;: <span class="hljs-number">5</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="指定字段排序-sort"><a href="#指定字段排序-sort" class="headerlink" title="指定字段排序 [sort]"></a>指定字段排序 [sort]</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">Get</span> <span class="hljs-operator">/</span>索引名<span class="hljs-operator">/</span>_doc<span class="hljs-operator">/</span>_search <span class="hljs-operator">|</span> <span class="hljs-keyword">Get</span> <span class="hljs-operator">/</span>索引名<span class="hljs-operator">/</span>_search<br>&#123;<br>&quot;query&quot;: &#123;<br>...<br>&#125;,<br>&quot;sort&quot;: [<br>&#123;<br>&quot;映射名&quot;: &#123;<br>&quot;order&quot;: &quot;desc&quot;## 默认是降序<br>&#125;<br>&#125;<br>]<br>&#125;<br>如：<br><span class="hljs-keyword">GET</span> <span class="hljs-operator">/</span>products<span class="hljs-operator">/</span>_search<br>&#123;<br>&quot;query&quot;: &#123;<br>&quot;match_all&quot;: &#123;&#125;<br>&#125;,<br>&quot;sort&quot;: [<br>&#123;<br>&quot;price&quot;: &#123;<br>&quot;order&quot;: &quot;desc&quot;<br>&#125;<br>&#125;<br>]<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="放回指定字段-source"><a href="#放回指定字段-source" class="headerlink" title="放回指定字段 [_source]"></a>放回指定字段 [_source]</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">Get</span> <span class="hljs-operator">/</span>索引名<span class="hljs-operator">/</span>_doc<span class="hljs-operator">/</span>_search <span class="hljs-operator">|</span> <span class="hljs-keyword">Get</span> <span class="hljs-operator">/</span>索引名<span class="hljs-operator">/</span>_search<br>&#123;<br>&quot;query&quot;: &#123;<br>...<br>&#125;,<br>&quot;_source&quot;: [&quot;映射名1&quot;, &quot;映射名2&quot;, &quot;映射名3&quot;]<br>&#125;<br>如：<br><span class="hljs-keyword">GET</span> <span class="hljs-operator">/</span>products<span class="hljs-operator">/</span>_search<br>&#123;<br>&quot;query&quot;: &#123;<br>...<br>&#125;,<br>&quot;_source&quot;: [&quot;id&quot;, &quot;title&quot;, &quot;description&quot;]<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Elasticsearch</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Netty优化学习</title>
    <link href="/2022/02/04/Netty/Netty%E4%BC%98%E5%8C%96%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/02/04/Netty/Netty%E4%BC%98%E5%8C%96%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<figure class="highlight awk"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs awk">本文参考了码友 Nyima 的学习笔记<br>https:<span class="hljs-regexp">//</span>nyimac.gitee.io<span class="hljs-regexp">/2021/</span><span class="hljs-number">04</span><span class="hljs-regexp">/25/</span>Netty%E5%<span class="hljs-number">9</span>F%BA%E7%A1%<span class="hljs-number">80</span>/<br></code></pre></td></tr></table></figure><h1 id="参数调优"><a href="#参数调优" class="headerlink" title="参数调优"></a>参数调优</h1><h3 id="CONNECT-TIMEOUT-MILLIS"><a href="#CONNECT-TIMEOUT-MILLIS" class="headerlink" title="CONNECT_TIMEOUT_MILLIS"></a>CONNECT_TIMEOUT_MILLIS</h3><ul><li>属于 <strong>SocketChannal</strong> 的参数</li><li>用在<strong>客户端建立连接</strong>时，如果在指定毫秒内无法连接，会抛出 <code>timeout</code> 异常</li><li><strong>注意</strong>：<code>Netty</code> 中不要用成了<code>SO_TIMEOUT</code> 主要用在阻塞 IO<code>，</code>而 <code>Netty</code> 是非阻塞 <code>IO</code></li></ul><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a><strong>使用</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestParam</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// SocketChannel 5s内未建立连接就抛出异常</span><br>        <span class="hljs-keyword">new</span> Bootstrap().option(ChannelOption.CONNECT_TIMEOUT_MILLIS, <span class="hljs-number">5000</span>);<br>        <br>        <span class="hljs-comment">// ServerSocketChannel 5s内未建立连接就抛出异常</span><br>        <span class="hljs-keyword">new</span> ServerBootstrap().option(ChannelOption.CONNECT_TIMEOUT_MILLIS,<span class="hljs-number">5000</span>);<br>        <span class="hljs-comment">// SocketChannel 5s内未建立连接就抛出异常</span><br>        <span class="hljs-keyword">new</span> ServerBootstrap().childOption(ChannelOption.CONNECT_TIMEOUT_MILLIS, <span class="hljs-number">5000</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConnectionTimeoutTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        NioEventLoopGroup group = <span class="hljs-keyword">new</span> NioEventLoopGroup();<br>        <span class="hljs-keyword">try</span> &#123;<br>            Bootstrap bootstrap = <span class="hljs-keyword">new</span> Bootstrap()<br>                    .group(group)<br>                    .option(ChannelOption.CONNECT_TIMEOUT_MILLIS, <span class="hljs-number">300</span>)<br>                    .channel(NioSocketChannel.class)<br>                    .handler(<span class="hljs-keyword">new</span> LoggingHandler());<br>            ChannelFuture future = bootstrap.connect(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">8080</span>);<br>            future.sync().channel().closeFuture().sync();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>            log.debug(<span class="hljs-string">&quot;time out&quot;</span>);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            group.shutdownGracefully();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>客户端通过 <code>Bootstrap.option</code> 函数来配置参数，<strong>配置参数作用于 <code>SocketChannel</code></strong></p></li><li><p>服务器通过</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">ServerBootstrap</span><br></code></pre></td></tr></table></figure><p>来配置参数，但是对于不同的 Channel 需要选择不同的方法</p><ul><li>通过 <code>option</code> 来配置 <strong>ServerSocketChannel</strong> 上的参数</li><li>通过 <code>childOption</code> 来配置 <strong>SocketChannel</strong> 上的参数</li></ul></li></ul><h4 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h4><p>客户端中连接服务器的线程是 <code>NIO</code> 线程，抛出异常的是主线程。这是如何做到超时判断以及线程通信的呢？</p><p><code>AbstractNioChannel.AbstractNioUnsafe.connect</code>方法中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">connect</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">                <span class="hljs-keyword">final</span> SocketAddress remoteAddress, <span class="hljs-keyword">final</span> SocketAddress localAddress, <span class="hljs-keyword">final</span> ChannelPromise promise)</span> </span>&#123;<br>    <br>    ...<br>        <br>    <span class="hljs-comment">// Schedule connect timeout.</span><br>    <span class="hljs-comment">// 设置超时时间，通过option方法传入的CONNECT_TIMEOUT_MILLIS参数进行设置</span><br>    <span class="hljs-keyword">int</span> connectTimeoutMillis = config().getConnectTimeoutMillis();<br>    <span class="hljs-comment">// 如果超时时间大于0</span><br>    <span class="hljs-keyword">if</span> (connectTimeoutMillis &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// 创建一个定时任务，延时connectTimeoutMillis（设置的超时时间时间）后执行</span><br>        <span class="hljs-comment">// schedule(Runnable command, long delay, TimeUnit unit)</span><br>        connectTimeoutFuture = eventLoop().schedule(<span class="hljs-keyword">new</span> Runnable() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>                <span class="hljs-comment">// 判断是否建立连接，Promise进行NIO线程与主线程之间的通信</span><br>                <span class="hljs-comment">// 如果超时，则通过tryFailure方法将异常放入Promise中</span><br>                <span class="hljs-comment">// 在主线程中抛出</span><br>                ChannelPromise connectPromise = AbstractNioChannel.<span class="hljs-keyword">this</span>.connectPromise;<br>                ConnectTimeoutException cause = <span class="hljs-keyword">new</span> ConnectTimeoutException(<span class="hljs-string">&quot;connection timed out: &quot;</span> + remoteAddress);<br>                <span class="hljs-keyword">if</span> (connectPromise != <span class="hljs-keyword">null</span> &amp;&amp; connectPromise.tryFailure(cause)) &#123;<br>                    close(voidPromise());<br>                &#125;<br>            &#125;<br>        &#125;, connectTimeoutMillis, TimeUnit.MILLISECONDS);<br>    &#125;<br>    <br>   ...<br>        <br>&#125;<br></code></pre></td></tr></table></figure><p>超时的判断<strong>主要是通过 Eventloop 的 schedule 方法和 Promise 共同实现的</strong></p><ul><li>schedule 设置了一个定时任务，延迟<code>connectTimeoutMillis</code>秒后执行该方法</li><li>如果指定时间内没有建立连接，则会执行其中的任务<ul><li>任务负责创建 <code>ConnectTimeoutException</code> 异常，并将异常通过 Pormise 传给主线程并抛出</li></ul></li></ul><h3 id="SO-BACKLOG"><a href="#SO-BACKLOG" class="headerlink" title="SO_BACKLOG"></a>SO_BACKLOG</h3><p>该参数是 <strong>ServerSocketChannel</strong> 的参数</p><h4 id="三次握手与连接队列"><a href="#三次握手与连接队列" class="headerlink" title="三次握手与连接队列"></a>三次握手与连接队列</h4><p>第一次握手时，因为客户端与服务器之间的连接还未完全建立，连接会被放入<strong>半连接队列</strong>中</p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210429211913.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210429211913.png" alt="img"></a></p><p>当完成三次握手以后，连接会被放入<strong>全连接队列中</strong></p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210429211952.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210429211952.png" alt="img"></a></p><p>服务器处理Accept事件是在TCP三次握手，也就是建立连接之后。服务器会从全连接队列中获取连接并进行处理</p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210430094836.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210430094836.png" alt="img"></a></p><p>在 linux 2.2 之前，backlog 大小包括了两个队列的大小，<strong>在 linux 2.2 之后，分别用下面两个参数来控制</strong></p><ul><li>半连接队列 - sync queue<ul><li>大小通过 /proc/sys/net/ipv4/tcp_max_syn_backlog 指定，在 <code>syncookies</code> 启用的情况下，逻辑上没有最大值限制，这个设置便被忽略</li></ul></li><li>全连接队列 - accept queue<ul><li>其大小通过 /proc/sys/net/core/somaxconn 指定，在使用 listen 函数时，<strong>内核会根据传入的 backlog 参数与系统参数，取二者的较小值</strong></li><li>如果 accpet queue 队列满了，server 将发送一个拒绝连接的错误信息到 client</li></ul></li></ul><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>在Netty中，<code>SO_BACKLOG</code>主要用于设置全连接队列的大小。<strong>当处理Accept的速率小于连接建立的速率时，全连接队列中堆积的连接数大于<code>SO_BACKLOG</code>设置的值是，便会抛出异常</strong></p><p><strong>设置方式如下</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 设置全连接队列，大小为2</span><br><span class="hljs-keyword">new</span> ServerBootstrap().option(ChannelOption.SO_BACKLOG, <span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><h4 id="使用测试"><a href="#使用测试" class="headerlink" title="使用测试"></a>使用测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 关键断点:&#123;<span class="hljs-doctag">@link</span> io.netty.channel.nio.NioEventLoop#processSelectedKey(SelectionKey, AbstractNioChannel)&#125;&lt;br&gt;</span><br><span class="hljs-comment"> * 第721行</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Haixin Wu</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022/2/13 20:47</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BackLogServerTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">new</span> ServerBootstrap()<br>                .group(<span class="hljs-keyword">new</span> NioEventLoopGroup())<br>                <span class="hljs-comment">// 全队列阈值，因为netty处理速度较快，较难模拟，所以可以通过断点的方式进行</span><br>                .option(ChannelOption.SO_BACKLOG, <span class="hljs-number">2</span>)<br>                .channel(NioServerSocketChannel.class)<br>                .childHandler(<span class="hljs-keyword">new</span> ChannelInitializer&lt;Channel&gt;() &#123;<br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initChannel</span><span class="hljs-params">(Channel ch)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>                        ch.pipeline().addLast(<span class="hljs-keyword">new</span> LoggingHandler());<br>                    &#125;<br>                &#125;).bind(<span class="hljs-number">8080</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h4><p>backlog参数在<code>NioSocketChannel.doBind</code>方法被使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doBind</span><span class="hljs-params">(SocketAddress localAddress)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>    <span class="hljs-keyword">if</span> (PlatformDependent.javaVersion() &gt;= <span class="hljs-number">7</span>) &#123;<br>        javaChannel().bind(localAddress, config.getBacklog());<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        javaChannel().socket().bind(localAddress, config.getBacklog());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中backlog被保存在了<code>DefaultServerSocketChannelConfig</code>配置类中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">int</span> backlog = NetUtil.SOMAXCONN;<br></code></pre></td></tr></table></figure><p>具体的赋值操作如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java">SOMAXCONN = AccessController.doPrivileged(<span class="hljs-keyword">new</span> PrivilegedAction&lt;Integer&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// Determine the default somaxconn (server socket backlog) value of the platform.</span><br>        <span class="hljs-comment">// The known defaults:</span><br>        <span class="hljs-comment">// - Windows NT Server 4.0+: 200</span><br>        <span class="hljs-comment">// - Linux and Mac OS X: 128</span><br>        <span class="hljs-keyword">int</span> somaxconn = PlatformDependent.isWindows() ? <span class="hljs-number">200</span> : <span class="hljs-number">128</span>;<br>        File file = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;/proc/sys/net/core/somaxconn&quot;</span>);<br>        BufferedReader in = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// file.exists() may throw a SecurityException if a SecurityManager is used, so execute it in the</span><br>            <span class="hljs-comment">// try / catch block.</span><br>            <span class="hljs-comment">// See https://github.com/netty/netty/issues/4936</span><br>            <span class="hljs-keyword">if</span> (file.exists()) &#123;<br>                in = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> FileReader(file));<br>                <span class="hljs-comment">// 将somaxconn设置为Linux配置文件中设置的值</span><br>                somaxconn = Integer.parseInt(in.readLine());<br>                <span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;<br>                    logger.debug(<span class="hljs-string">&quot;&#123;&#125;: &#123;&#125;&quot;</span>, file, somaxconn);<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                ...<br>            &#125;<br>            ...<br>        &#125;  <br>        <span class="hljs-comment">// 返回backlog的值</span><br>        <span class="hljs-keyword">return</span> somaxconn;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>backlog的值会根据操作系统的不同，来</p><p>选择不同的默认值</p><ul><li>Windows 200</li><li>Linux/Mac OS 128</li></ul></li><li><p><strong>如果配置文件<code>/proc/sys/net/core/somaxconn</code>存在</strong>，会读取配置文件中的值，并将backlog的值设置为配置文件中指定的</p></li></ul><h3 id="TCP-NODELAY"><a href="#TCP-NODELAY" class="headerlink" title="TCP_NODELAY"></a>TCP_NODELAY</h3><ul><li>属于 <strong>SocketChannal</strong> 参数</li><li>因为 Nagle 算法，数据包会堆积到一定的数量后一起发送，这就<strong>可能导致数据的发送存在一定的延时</strong></li><li><strong>该参数默认为false</strong>，如果不希望的发送被延时，则需要将该值设置为true</li></ul><h3 id="SO-SNDBUF-amp-SO-RCVBUF"><a href="#SO-SNDBUF-amp-SO-RCVBUF" class="headerlink" title="SO_SNDBUF &amp; SO_RCVBUF"></a>SO_SNDBUF &amp; SO_RCVBUF</h3><ul><li>SO_SNDBUF 属于 <strong>SocketChannal</strong> 参数</li><li>SO_RCVBUF <strong>既可用于 SocketChannal 参数，也可以用于 ServerSocketChannal 参数</strong>（建议设置到 ServerSocketChannal 上）</li><li>该参数用于<strong>指定接收方与发送方的滑动窗口大小</strong></li></ul><h3 id="ALLOCATOR"><a href="#ALLOCATOR" class="headerlink" title="ALLOCATOR"></a>ALLOCATOR</h3><ul><li>属于 <strong>SocketChannal</strong> 参数</li><li>用来配置 ByteBuf 是池化还是非池化，是直接内存还是堆内存</li></ul><h4 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 选择ALLOCATOR参数，设置SocketChannel中分配的ByteBuf类型</span><br><span class="hljs-comment">// 第二个参数需要传入一个ByteBufAllocator，用于指定生成的 ByteBuf 的类型</span><br><span class="hljs-keyword">new</span> ServerBootstrap().childOption(ChannelOption.ALLOCATOR, <span class="hljs-keyword">new</span> PooledByteBufAllocator());<br></code></pre></td></tr></table></figure><p><strong>ByteBufAllocator类型</strong></p><ul><li><p>池化并使用直接内存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// true表示使用直接内存</span><br><span class="hljs-keyword">new</span> PooledByteBufAllocator(<span class="hljs-keyword">true</span>);<br></code></pre></td></tr></table></figure></li><li><p>池化并使用堆内存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// false表示使用堆内存</span><br><span class="hljs-keyword">new</span> PooledByteBufAllocator(<span class="hljs-keyword">false</span>);<br></code></pre></td></tr></table></figure></li><li><p>非池化并使用直接内存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// ture表示使用直接内存</span><br><span class="hljs-keyword">new</span> UnpooledByteBufAllocator(<span class="hljs-keyword">true</span>);<br></code></pre></td></tr></table></figure></li><li><p>非池化并使用堆内存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// false表示使用堆内存</span><br><span class="hljs-keyword">new</span> UnpooledByteBufAllocator(<span class="hljs-keyword">false</span>);<br></code></pre></td></tr></table></figure></li></ul><h3 id="RCVBUF-ALLOCATOR"><a href="#RCVBUF-ALLOCATOR" class="headerlink" title="RCVBUF_ALLOCATOR"></a>RCVBUF_ALLOCATOR</h3><ul><li>属于 <strong>SocketChannal</strong> 参数</li><li><strong>控制 Netty 接收缓冲区大小</strong></li><li>负责入站数据的分配，决定入站缓冲区的大小（并可动态调整），<strong>统一采用 direct 直接内存</strong>，具体池化还是非池化由 allocator 决定</li></ul>]]></content>
    
    
    <categories>
      
      <category>Netty</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Netty进阶学习</title>
    <link href="/2022/01/27/Netty/Netty%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/01/27/Netty/Netty%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><figure class="highlight awk"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs awk">本文参考了码友 Nyima 的学习笔记<br>https:<span class="hljs-regexp">//</span>nyimac.gitee.io<span class="hljs-regexp">/2021/</span><span class="hljs-number">04</span><span class="hljs-regexp">/25/</span>Netty%E5%<span class="hljs-number">9</span>F%BA%E7%A1%<span class="hljs-number">80</span>/<br></code></pre></td></tr></table></figure><h1 id="一、粘包与半包"><a href="#一、粘包与半包" class="headerlink" title="一、粘包与半包"></a>一、粘包与半包</h1><h2 id="1-服务端代码"><a href="#1-服务端代码" class="headerlink" title="1. 服务端代码"></a>1. 服务端代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloServer</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">start</span><span class="hljs-params">()</span> </span>&#123;<br>        NioEventLoopGroup boss = <span class="hljs-keyword">new</span> NioEventLoopGroup(<span class="hljs-number">1</span>);<br>        NioEventLoopGroup worker = <span class="hljs-keyword">new</span> NioEventLoopGroup();<br>        <span class="hljs-keyword">try</span> &#123;<br>            ServerBootstrap serverBootstrap = <span class="hljs-keyword">new</span> ServerBootstrap();<br>            serverBootstrap.channel(NioServerSocketChannel.class);<br>            serverBootstrap.group(boss, worker);<br>            serverBootstrap.childHandler(<span class="hljs-keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initChannel</span><span class="hljs-params">(SocketChannel ch)</span> </span>&#123;<br>                    ch.pipeline().addLast(<span class="hljs-keyword">new</span> LoggingHandler(LogLevel.DEBUG));<br>                    ch.pipeline().addLast(<span class="hljs-keyword">new</span> ChannelInboundHandlerAdapter() &#123;<br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">channelActive</span><span class="hljs-params">(ChannelHandlerContext ctx)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>                            <span class="hljs-comment">// 连接建立时会执行该方法</span><br>                            log.debug(<span class="hljs-string">&quot;connected &#123;&#125;&quot;</span>, ctx.channel());<br>                            <span class="hljs-keyword">super</span>.channelActive(ctx);<br>                        &#125;<br><br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">channelInactive</span><span class="hljs-params">(ChannelHandlerContext ctx)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>                            <span class="hljs-comment">// 连接断开时会执行该方法</span><br>                            log.debug(<span class="hljs-string">&quot;disconnect &#123;&#125;&quot;</span>, ctx.channel());<br>                            <span class="hljs-keyword">super</span>.channelInactive(ctx);<br>                        &#125;<br>                    &#125;);<br>                &#125;<br>            &#125;);<br>            ChannelFuture channelFuture = serverBootstrap.bind(<span class="hljs-number">8080</span>);<br>            log.debug(<span class="hljs-string">&quot;&#123;&#125; binding...&quot;</span>, channelFuture.channel());<br>            channelFuture.sync();<br>            log.debug(<span class="hljs-string">&quot;&#123;&#125; bound...&quot;</span>, channelFuture.channel());<br>            <span class="hljs-comment">// 关闭channel</span><br>            channelFuture.channel().closeFuture().sync();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            log.error(<span class="hljs-string">&quot;server error&quot;</span>, e);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            boss.shutdownGracefully();<br>            worker.shutdownGracefully();<br>            log.debug(<span class="hljs-string">&quot;stopped&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">new</span> HelloServer().start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-客户端代码"><a href="#2-客户端代码" class="headerlink" title="2. 客户端代码"></a>2. 客户端代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloClient</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        NioEventLoopGroup loopGroup = <span class="hljs-keyword">new</span> NioEventLoopGroup();<br>        <span class="hljs-keyword">try</span> &#123;<br>            Bootstrap bootstrap = <span class="hljs-keyword">new</span> Bootstrap();<br>            bootstrap.group(loopGroup);<br>            bootstrap.channel(NioSocketChannel.class);<br>            bootstrap.handler(<span class="hljs-keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initChannel</span><span class="hljs-params">(SocketChannel ch)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>                    log.debug(<span class="hljs-string">&quot;connected...&quot;</span>);<br>                    ch.pipeline().addLast(<span class="hljs-keyword">new</span> ChannelInboundHandlerAdapter() &#123;<br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">channelActive</span><span class="hljs-params">(ChannelHandlerContext ctx)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>                            log.debug(<span class="hljs-string">&quot;sending...&quot;</span>);<br>                            <span class="hljs-comment">// 每次发送16个字节的数据，共发送10次</span><br>                            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>                                ByteBuf buffer = ctx.alloc().buffer();<br>                                buffer.writeBytes(<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[]&#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>&#125;);<br>                                ctx.writeAndFlush(buffer);<br>                            &#125;<br>                        &#125;<br>                    &#125;);<br>                &#125;<br>            &#125;);<br>            ChannelFuture channelFuture = bootstrap.connect(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">8080</span>).sync();<br>            channelFuture.channel().closeFuture().sync();<br><br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            log.error(<span class="hljs-string">&quot;client error&quot;</span>, e);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            loopGroup.shutdownGracefully();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-粘包现象"><a href="#3-粘包现象" class="headerlink" title="3. 粘包现象"></a>3. 粘包现象</h2><p>可见虽然客户端是分别以16字节为单位，通过channel向服务器发送了10次数据，可是<strong>服务器端却只接收了一次，接收数据的大小为160B，即客户端发送的数据总大小，这就是粘包现象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">20</span>:08:<span class="hljs-number">59.269</span> [nioEventLoopGroup-<span class="hljs-number">3</span>-<span class="hljs-number">1</span>] DEBUG io.netty.handler.logging.LoggingHandler - [id: <span class="hljs-number">0x7c21a326</span>, L:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">8080</span> - R:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">1363</span>] READ: 160B<br>         +-------------------------------------------------+<br>         |  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span>  a  b  c  d  e  f |<br>+--------+-------------------------------------------------+----------------+<br>|<span class="hljs-number">00000000</span>| <span class="hljs-number">00</span> <span class="hljs-number">01</span> <span class="hljs-number">02</span> <span class="hljs-number">03</span> <span class="hljs-number">04</span> <span class="hljs-number">05</span> <span class="hljs-number">06</span> <span class="hljs-number">07</span> 08 09 0a 0b 0c <span class="hljs-number">0d</span> 0e <span class="hljs-number">0f</span> |................|<br>|<span class="hljs-number">00000010</span>| <span class="hljs-number">00</span> <span class="hljs-number">01</span> <span class="hljs-number">02</span> <span class="hljs-number">03</span> <span class="hljs-number">04</span> <span class="hljs-number">05</span> <span class="hljs-number">06</span> <span class="hljs-number">07</span> 08 09 0a 0b 0c <span class="hljs-number">0d</span> 0e <span class="hljs-number">0f</span> |................|<br>|<span class="hljs-number">00000020</span>| <span class="hljs-number">00</span> <span class="hljs-number">01</span> <span class="hljs-number">02</span> <span class="hljs-number">03</span> <span class="hljs-number">04</span> <span class="hljs-number">05</span> <span class="hljs-number">06</span> <span class="hljs-number">07</span> 08 09 0a 0b 0c <span class="hljs-number">0d</span> 0e <span class="hljs-number">0f</span> |................|<br>|<span class="hljs-number">00000030</span>| <span class="hljs-number">00</span> <span class="hljs-number">01</span> <span class="hljs-number">02</span> <span class="hljs-number">03</span> <span class="hljs-number">04</span> <span class="hljs-number">05</span> <span class="hljs-number">06</span> <span class="hljs-number">07</span> 08 09 0a 0b 0c <span class="hljs-number">0d</span> 0e <span class="hljs-number">0f</span> |................|<br>|<span class="hljs-number">00000040</span>| <span class="hljs-number">00</span> <span class="hljs-number">01</span> <span class="hljs-number">02</span> <span class="hljs-number">03</span> <span class="hljs-number">04</span> <span class="hljs-number">05</span> <span class="hljs-number">06</span> <span class="hljs-number">07</span> 08 09 0a 0b 0c <span class="hljs-number">0d</span> 0e <span class="hljs-number">0f</span> |................|<br>|<span class="hljs-number">00000050</span>| <span class="hljs-number">00</span> <span class="hljs-number">01</span> <span class="hljs-number">02</span> <span class="hljs-number">03</span> <span class="hljs-number">04</span> <span class="hljs-number">05</span> <span class="hljs-number">06</span> <span class="hljs-number">07</span> 08 09 0a 0b 0c <span class="hljs-number">0d</span> 0e <span class="hljs-number">0f</span> |................|<br>|<span class="hljs-number">00000060</span>| <span class="hljs-number">00</span> <span class="hljs-number">01</span> <span class="hljs-number">02</span> <span class="hljs-number">03</span> <span class="hljs-number">04</span> <span class="hljs-number">05</span> <span class="hljs-number">06</span> <span class="hljs-number">07</span> 08 09 0a 0b 0c <span class="hljs-number">0d</span> 0e <span class="hljs-number">0f</span> |................|<br>|<span class="hljs-number">00000070</span>| <span class="hljs-number">00</span> <span class="hljs-number">01</span> <span class="hljs-number">02</span> <span class="hljs-number">03</span> <span class="hljs-number">04</span> <span class="hljs-number">05</span> <span class="hljs-number">06</span> <span class="hljs-number">07</span> 08 09 0a 0b 0c <span class="hljs-number">0d</span> 0e <span class="hljs-number">0f</span> |................|<br>|00000080| <span class="hljs-number">00</span> <span class="hljs-number">01</span> <span class="hljs-number">02</span> <span class="hljs-number">03</span> <span class="hljs-number">04</span> <span class="hljs-number">05</span> <span class="hljs-number">06</span> <span class="hljs-number">07</span> 08 09 0a 0b 0c <span class="hljs-number">0d</span> 0e <span class="hljs-number">0f</span> |................|<br>|00000090| <span class="hljs-number">00</span> <span class="hljs-number">01</span> <span class="hljs-number">02</span> <span class="hljs-number">03</span> <span class="hljs-number">04</span> <span class="hljs-number">05</span> <span class="hljs-number">06</span> <span class="hljs-number">07</span> 08 09 0a 0b 0c <span class="hljs-number">0d</span> 0e <span class="hljs-number">0f</span> |................|<br>+--------+-------------------------------------------------+----------------+<br><br></code></pre></td></tr></table></figure><h2 id="4-半包现象"><a href="#4-半包现象" class="headerlink" title="4. 半包现象"></a>4. 半包现象</h2><p>首先将客户端-服务器之间的 <strong>channel 容量</strong>进行调整，即在服务端中添加代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 调整channel的容量</span><br>serverBootstrap.option(ChannelOption.SO_RCVBUF, <span class="hljs-number">10</span>);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">5901</span> [nioEventLoopGroup-<span class="hljs-number">3</span>-<span class="hljs-number">1</span>] DEBUG io.netty.handler.logging.LoggingHandler  - [id: <span class="hljs-number">0xc73284f3</span>, L:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">8080</span> - R:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">49679</span>] READ: 36B<br>         +-------------------------------------------------+<br>         |  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span>  a  b  c  d  e  f |<br>+--------+-------------------------------------------------+----------------+<br>|<span class="hljs-number">00000000</span>| <span class="hljs-number">00</span> <span class="hljs-number">01</span> <span class="hljs-number">02</span> <span class="hljs-number">03</span> <span class="hljs-number">04</span> <span class="hljs-number">05</span> <span class="hljs-number">06</span> <span class="hljs-number">07</span> 08 09 0a 0b 0c <span class="hljs-number">0d</span> 0e <span class="hljs-number">0f</span> |................|<br>|<span class="hljs-number">00000010</span>| <span class="hljs-number">00</span> <span class="hljs-number">01</span> <span class="hljs-number">02</span> <span class="hljs-number">03</span> <span class="hljs-number">04</span> <span class="hljs-number">05</span> <span class="hljs-number">06</span> <span class="hljs-number">07</span> 08 09 0a 0b 0c <span class="hljs-number">0d</span> 0e <span class="hljs-number">0f</span> |................|<br>|<span class="hljs-number">00000020</span>| <span class="hljs-number">00</span> <span class="hljs-number">01</span> <span class="hljs-number">02</span> <span class="hljs-number">03</span>                                     |....            |<br>+--------+-------------------------------------------------+----------------+<br><br><span class="hljs-number">5901</span> [nioEventLoopGroup-<span class="hljs-number">3</span>-<span class="hljs-number">1</span>] DEBUG io.netty.handler.logging.LoggingHandler  - [id: <span class="hljs-number">0xc73284f3</span>, L:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">8080</span> - R:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">49679</span>] READ: 40B<br>         +-------------------------------------------------+<br>         |  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span>  a  b  c  d  e  f |<br>+--------+-------------------------------------------------+----------------+<br>|<span class="hljs-number">00000000</span>| <span class="hljs-number">04</span> <span class="hljs-number">05</span> <span class="hljs-number">06</span> <span class="hljs-number">07</span> 08 09 0a 0b 0c <span class="hljs-number">0d</span> 0e <span class="hljs-number">0f</span> <span class="hljs-number">00</span> <span class="hljs-number">01</span> <span class="hljs-number">02</span> <span class="hljs-number">03</span> |................|<br>|<span class="hljs-number">00000010</span>| <span class="hljs-number">04</span> <span class="hljs-number">05</span> <span class="hljs-number">06</span> <span class="hljs-number">07</span> 08 09 0a 0b 0c <span class="hljs-number">0d</span> 0e <span class="hljs-number">0f</span> <span class="hljs-number">00</span> <span class="hljs-number">01</span> <span class="hljs-number">02</span> <span class="hljs-number">03</span> |................|<br>|<span class="hljs-number">00000020</span>| <span class="hljs-number">04</span> <span class="hljs-number">05</span> <span class="hljs-number">06</span> <span class="hljs-number">07</span> 08 09 0a 0b                         |........        |<br>+--------+-------------------------------------------------+----------------+<br><br><span class="hljs-number">5901</span> [nioEventLoopGroup-<span class="hljs-number">3</span>-<span class="hljs-number">1</span>] DEBUG io.netty.handler.logging.LoggingHandler  - [id: <span class="hljs-number">0xc73284f3</span>, L:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">8080</span> - R:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">49679</span>] READ: 40B<br>         +-------------------------------------------------+<br>         |  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span>  a  b  c  d  e  f |<br>+--------+-------------------------------------------------+----------------+<br>|<span class="hljs-number">00000000</span>| 0c <span class="hljs-number">0d</span> 0e <span class="hljs-number">0f</span> <span class="hljs-number">00</span> <span class="hljs-number">01</span> <span class="hljs-number">02</span> <span class="hljs-number">03</span> <span class="hljs-number">04</span> <span class="hljs-number">05</span> <span class="hljs-number">06</span> <span class="hljs-number">07</span> 08 09 0a 0b |................|<br>|<span class="hljs-number">00000010</span>| 0c <span class="hljs-number">0d</span> 0e <span class="hljs-number">0f</span> <span class="hljs-number">00</span> <span class="hljs-number">01</span> <span class="hljs-number">02</span> <span class="hljs-number">03</span> <span class="hljs-number">04</span> <span class="hljs-number">05</span> <span class="hljs-number">06</span> <span class="hljs-number">07</span> 08 09 0a 0b |................|<br>|<span class="hljs-number">00000020</span>| 0c <span class="hljs-number">0d</span> 0e <span class="hljs-number">0f</span> <span class="hljs-number">00</span> <span class="hljs-number">01</span> <span class="hljs-number">02</span> <span class="hljs-number">03</span>                         |........        |<br>+--------+-------------------------------------------------+----------------+<br><br><span class="hljs-number">5901</span> [nioEventLoopGroup-<span class="hljs-number">3</span>-<span class="hljs-number">1</span>] DEBUG io.netty.handler.logging.LoggingHandler  - [id: <span class="hljs-number">0xc73284f3</span>, L:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">8080</span> - R:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">49679</span>] READ: 40B<br>         +-------------------------------------------------+<br>         |  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span>  a  b  c  d  e  f |<br>+--------+-------------------------------------------------+----------------+<br>|<span class="hljs-number">00000000</span>| <span class="hljs-number">04</span> <span class="hljs-number">05</span> <span class="hljs-number">06</span> <span class="hljs-number">07</span> 08 09 0a 0b 0c <span class="hljs-number">0d</span> 0e <span class="hljs-number">0f</span> <span class="hljs-number">00</span> <span class="hljs-number">01</span> <span class="hljs-number">02</span> <span class="hljs-number">03</span> |................|<br>|<span class="hljs-number">00000010</span>| <span class="hljs-number">04</span> <span class="hljs-number">05</span> <span class="hljs-number">06</span> <span class="hljs-number">07</span> 08 09 0a 0b 0c <span class="hljs-number">0d</span> 0e <span class="hljs-number">0f</span> <span class="hljs-number">00</span> <span class="hljs-number">01</span> <span class="hljs-number">02</span> <span class="hljs-number">03</span> |................|<br>|<span class="hljs-number">00000020</span>| <span class="hljs-number">04</span> <span class="hljs-number">05</span> <span class="hljs-number">06</span> <span class="hljs-number">07</span> 08 09 0a 0b                         |........        |<br>+--------+-------------------------------------------------+----------------+<br><br><span class="hljs-number">5901</span> [nioEventLoopGroup-<span class="hljs-number">3</span>-<span class="hljs-number">1</span>] DEBUG io.netty.handler.logging.LoggingHandler  - [id: <span class="hljs-number">0xc73284f3</span>, L:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">8080</span> - R:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">49679</span>] READ: 4B<br>         +-------------------------------------------------+<br>         |  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span>  a  b  c  d  e  f |<br>+--------+-------------------------------------------------+----------------+<br>|<span class="hljs-number">00000000</span>| 0c <span class="hljs-number">0d</span> 0e <span class="hljs-number">0f</span>                                     |....            |<br>+--------+-------------------------------------------------+----------------+<br></code></pre></td></tr></table></figure><h3 id="①-注意"><a href="#①-注意" class="headerlink" title="①. 注意"></a>①. 注意</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">serverBootstrap<span class="hljs-selector-class">.option</span>(ChannelOption<span class="hljs-selector-class">.SO_RCVBUF</span>, <span class="hljs-number">10</span>) 影响的底层接收缓冲区（即滑动窗口）大小，<br>仅决定了 netty 读取的最小单位，netty 实际每次读取的一般是它的整数倍<br></code></pre></td></tr></table></figure><h2 id="5-现象分析"><a href="#5-现象分析" class="headerlink" title="5. 现象分析"></a>5. 现象分析</h2><h3 id="①-粘包"><a href="#①-粘包" class="headerlink" title="①. 粘包"></a>①. 粘包</h3><ul><li>现象<ul><li>发送 abc def，接收 abcdef</li></ul></li><li>原因<ul><li>应用层<ul><li>接收方 ByteBuf 设置太大（Netty 默认 1024）</li></ul></li><li>传输层-网络层<ul><li>滑动窗口：假设发送方 256 bytes 表示一个完整报文，但由于接收方处理不及时且<strong>窗口大小足够大（大于256 bytes），这 256 bytes 字节就会缓冲在接收方的滑动窗口中，</strong>当滑动窗口中缓冲了多个报文就会粘包</li><li>Nagle 算法：会造成粘包</li></ul></li></ul></li></ul><h3 id="②-半包"><a href="#②-半包" class="headerlink" title="②. 半包"></a>②. 半包</h3><ul><li>现象<ul><li>发送 abcdef，接收 abc def</li></ul></li><li>原因<ul><li>应用层<ul><li>接收方 ByteBuf 小于实际发送数据量</li></ul></li><li>传输层-网络层<ul><li>滑动窗口：假设接收方的窗口只剩了 128 bytes，发送方的报文大小是 256 bytes，这时<strong>接收方窗口中无法容纳发送方的全部报文，发送方只能先发送前 128 bytes，等待 ack 后才能发送剩余部分，这就造成了半包</strong></li></ul></li><li>数据链路层<ul><li>MSS 限制：当发送的数据超过 MSS 限制后，会将数据切分发送，就会造成半包</li></ul></li></ul></li></ul><h3 id="③-本质"><a href="#③-本质" class="headerlink" title="③. 本质"></a>③. 本质</h3><p>发生粘包与半包现象的本质是<strong>因为 TCP 是流式协议，消息无边界</strong></p><h2 id="6-解决方案"><a href="#6-解决方案" class="headerlink" title="6. 解决方案"></a>6. 解决方案</h2><h3 id="①-短链接"><a href="#①-短链接" class="headerlink" title="①. 短链接"></a>①. 短链接</h3><p><strong>客户端每次向服务器发送数据以后，就与服务器断开连接，此时的消息边界为连接建立到连接断开</strong>。</p><p>这时便无需使用滑动窗口等技术来缓冲数据，则不会发生粘包现象。</p><p>但如果一次性数据发送过多，接收方无法一次性容纳所有数据，还是会发生半包现象，所以<strong>短链接无法解决半包现象</strong></p><p><strong>客户端代码改进</strong></p><p>修改<code>public void channelActive(ChannelHandlerContext ctx)</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">channelActive</span><span class="hljs-params">(ChannelHandlerContext ctx)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>    log.debug(<span class="hljs-string">&quot;sending...&quot;</span>);<br>    ByteBuf buffer = ctx.alloc().buffer(<span class="hljs-number">16</span>);<br>    buffer.writeBytes(<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[]&#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>&#125;);<br>    ctx.writeAndFlush(buffer);<br>    <span class="hljs-comment">// 使用短链接，每次发送完毕后就断开连接</span><br>    ctx.channel().close();<br>&#125;<br></code></pre></td></tr></table></figure><p>将发送步骤整体封装为<code>send()</code>方法，调用10次send()方法，模拟发送10次数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    <span class="hljs-comment">// 发送10次</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>        send();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>运行结果</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">6452</span> [nioEventLoopGroup-<span class="hljs-number">3</span>-<span class="hljs-number">1</span>] DEBUG io.netty.handler.logging.LoggingHandler  - [id: <span class="hljs-number">0x3eb6a684</span>, L:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">8080</span> - R:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">65024</span>] ACTIVE<br><br><span class="hljs-number">6468</span> [nioEventLoopGroup-<span class="hljs-number">3</span>-<span class="hljs-number">1</span>] DEBUG io.netty.handler.logging.LoggingHandler  - [id: <span class="hljs-number">0x3eb6a684</span>, L:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">8080</span> - R:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">65024</span>] READ: 16B<br>         +-------------------------------------------------+<br>         |  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span>  a  b  c  d  e  f |<br>+--------+-------------------------------------------------+----------------+<br>|<span class="hljs-number">00000000</span>| <span class="hljs-number">00</span> <span class="hljs-number">01</span> <span class="hljs-number">02</span> <span class="hljs-number">03</span> <span class="hljs-number">04</span> <span class="hljs-number">05</span> <span class="hljs-number">06</span> <span class="hljs-number">07</span> 08 09 0a 0b 0c <span class="hljs-number">0d</span> 0e <span class="hljs-number">0f</span> |................|<br>+--------+-------------------------------------------------+----------------+<br><br><span class="hljs-number">6468</span> [nioEventLoopGroup-<span class="hljs-number">3</span>-<span class="hljs-number">1</span>] DEBUG io.netty.handler.logging.LoggingHandler  - [id: <span class="hljs-number">0x3eb6a684</span>, L:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">8080</span> ! R:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">65024</span>] INACTIVE<br><br><span class="hljs-number">6483</span> [nioEventLoopGroup-<span class="hljs-number">3</span>-<span class="hljs-number">2</span>] DEBUG io.netty.handler.logging.LoggingHandler  - [id: <span class="hljs-number">0x7dcc31ff</span>, L:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">8080</span> - R:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">65057</span>] ACTIVE<br><br><span class="hljs-number">6483</span> [nioEventLoopGroup-<span class="hljs-number">3</span>-<span class="hljs-number">2</span>] DEBUG io.netty.handler.logging.LoggingHandler  - [id: <span class="hljs-number">0x7dcc31ff</span>, L:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">8080</span> - R:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">65057</span>] READ: 16B<br>         +-------------------------------------------------+<br>         |  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span>  a  b  c  d  e  f |<br>+--------+-------------------------------------------------+----------------+<br>|<span class="hljs-number">00000000</span>| <span class="hljs-number">00</span> <span class="hljs-number">01</span> <span class="hljs-number">02</span> <span class="hljs-number">03</span> <span class="hljs-number">04</span> <span class="hljs-number">05</span> <span class="hljs-number">06</span> <span class="hljs-number">07</span> 08 09 0a 0b 0c <span class="hljs-number">0d</span> 0e <span class="hljs-number">0f</span> |................|<br>+--------+-------------------------------------------------+----------------+<br><br><span class="hljs-number">6483</span> [nioEventLoopGroup-<span class="hljs-number">3</span>-<span class="hljs-number">2</span>] DEBUG io.netty.handler.logging.LoggingHandler  - [id: <span class="hljs-number">0x7dcc31ff</span>, L:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">8080</span> ! R:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">65057</span>] INACTIVE<br><br>...<br></code></pre></td></tr></table></figure><p>客户端先于服务器建立连接，此时控制台打印<code>ACTIVE</code>，之后客户端向服务器发送了16B的数据，发送后断开连接，此时控制台打印<code>INACTIVE</code>，可见<strong>未出现粘包现象</strong></p><h3 id="②-定长解码器"><a href="#②-定长解码器" class="headerlink" title="②. 定长解码器"></a>②. 定长解码器</h3><p>客户端于服务器<strong>约定一个最大长度，保证客户端每次发送的数据长度都不会大于该长度</strong>。</p><p>若发送数据长度不足则需要<strong>补齐</strong>至该长度</p><p>服务器接收数据时，<strong>将接收到的数据按照约定的最大长度进行拆分</strong>，即使发送过程中产生了粘包，也可以通过定长解码器将数据正确地进行拆分。</p><p><strong>服务端需要用到<code>FixedLengthFrameDecoder</code>对数据进行定长解码</strong>，具体使用方法如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 注意这个方法要加到业务handler的前面</span><br>ch.pipeline().addLast(<span class="hljs-keyword">new</span> FixedLengthFrameDecoder(<span class="hljs-number">16</span>));<br></code></pre></td></tr></table></figure><p><strong>客户端代码</strong></p><p>客户端发送数据的代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">channelActive</span><span class="hljs-params">(ChannelHandlerContext ctx)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>    <span class="hljs-comment">// 约定最大长度为16</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> maxLength = <span class="hljs-number">16</span>;<br>    <span class="hljs-comment">// 被发送的数据</span><br>    <span class="hljs-keyword">char</span> c = <span class="hljs-string">&#x27;a&#x27;</span>;<br>    <span class="hljs-comment">// 向服务器发送10个报文</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>        ByteBuf buffer = ctx.alloc().buffer(maxLength);<br>        <span class="hljs-comment">// 定长byte数组，未使用部分会以0进行填充</span><br>        <span class="hljs-keyword">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[maxLength];<br>        <span class="hljs-comment">// 生成长度为0~15的数据</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; (<span class="hljs-keyword">int</span>)(Math.random()*(maxLength-<span class="hljs-number">1</span>)); j++) &#123;<br>            bytes[j] = (<span class="hljs-keyword">byte</span>) c;<br>        &#125;<br>        buffer.writeBytes(bytes);<br>        c++;<br>        <span class="hljs-comment">// 将数据发送给服务器</span><br>        ctx.writeAndFlush(buffer);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>服务器代码</strong></p><p>使用<code>FixedLengthFrameDecoder</code>对粘包数据进行拆分，该handler需要添加在<code>LoggingHandler</code>之前，保证数据被打印时已被拆分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 通过定长解码器对粘包数据进行拆分</span><br>ch.pipeline().addLast(<span class="hljs-keyword">new</span> FixedLengthFrameDecoder(<span class="hljs-number">16</span>));<br>ch.pipeline().addLast(<span class="hljs-keyword">new</span> LoggingHandler(LogLevel.DEBUG));<br></code></pre></td></tr></table></figure><p><strong>运行结果</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">8222</span> [nioEventLoopGroup-<span class="hljs-number">3</span>-<span class="hljs-number">1</span>] DEBUG io.netty.handler.logging.LoggingHandler  - [id: <span class="hljs-number">0xbc122d07</span>, L:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">8080</span> - R:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">52954</span>] READ: 16B<br>         +-------------------------------------------------+<br>         |  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span>  a  b  c  d  e  f |<br>+--------+-------------------------------------------------+----------------+<br>|<span class="hljs-number">00000000</span>| <span class="hljs-number">61</span> <span class="hljs-number">61</span> <span class="hljs-number">61</span> <span class="hljs-number">61</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> |aaaa............|<br>+--------+-------------------------------------------------+----------------+<br><br><span class="hljs-number">8222</span> [nioEventLoopGroup-<span class="hljs-number">3</span>-<span class="hljs-number">1</span>] DEBUG io.netty.handler.logging.LoggingHandler  - [id: <span class="hljs-number">0xbc122d07</span>, L:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">8080</span> - R:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">52954</span>] READ: 16B<br>         +-------------------------------------------------+<br>         |  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span>  a  b  c  d  e  f |<br>+--------+-------------------------------------------------+----------------+<br>|<span class="hljs-number">00000000</span>| <span class="hljs-number">62</span> <span class="hljs-number">62</span> <span class="hljs-number">62</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> |bbb.............|<br>+--------+-------------------------------------------------+----------------+<br><br><br><span class="hljs-number">8222</span> [nioEventLoopGroup-<span class="hljs-number">3</span>-<span class="hljs-number">1</span>] DEBUG io.netty.handler.logging.LoggingHandler  - [id: <span class="hljs-number">0xbc122d07</span>, L:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">8080</span> - R:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">52954</span>] READ: 16B<br>         +-------------------------------------------------+<br>         |  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span>  a  b  c  d  e  f |<br>+--------+-------------------------------------------------+----------------+<br>|<span class="hljs-number">00000000</span>| <span class="hljs-number">63</span> <span class="hljs-number">63</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> |cc..............|<br>+--------+-------------------------------------------------+----------------+<br><br>...<br></code></pre></td></tr></table></figure><h3 id="③-行解码器"><a href="#③-行解码器" class="headerlink" title="③. 行解码器"></a>③. 行解码器</h3><p>行解码器的是<strong>通过分隔符对数据进行拆分</strong>来解决粘包半包问题的</p><p>可以通过<code>LineBasedFrameDecoder(int maxLength)</code>来拆分以<strong>换行符(\n)<strong>为分隔符的数据，也可以通过<code>DelimiterBasedFrameDecoder(int maxFrameLength, ByteBuf... delimiters)</code>来</strong>指定通过什么分隔符来拆分数据（可以传入多个分隔符）</strong></p><p>两种解码器<strong>都需要传入数据的最大长度</strong>，若超出最大长度，会抛出<code>TooLongFrameException</code>异常</p><p><strong>以换行符 \n 为分隔符</strong></p><p><strong>客户端代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">channelActive</span><span class="hljs-params">(ChannelHandlerContext ctx)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>    <span class="hljs-comment">// 约定最大长度为 64</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> maxLength = <span class="hljs-number">64</span>;<br>    <span class="hljs-comment">// 被发送的数据</span><br>    <span class="hljs-keyword">char</span> c = <span class="hljs-string">&#x27;a&#x27;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>        ByteBuf buffer = ctx.alloc().buffer(maxLength);<br>        <span class="hljs-comment">// 生成长度为0~62的数据</span><br>        Random random = <span class="hljs-keyword">new</span> Random();<br>        StringBuilder sb = <span class="hljs-keyword">new</span> StringBuilder();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; (<span class="hljs-keyword">int</span>) (random.nextInt(maxLength - <span class="hljs-number">2</span>)); j++) &#123;<br>            sb.append(c);<br>        &#125;<br>        <span class="hljs-comment">// 数据以 \n 结尾</span><br>        sb.append(<span class="hljs-string">&quot;\n&quot;</span>);<br>        buffer.writeBytes(sb.toString().getBytes(StandardCharsets.UTF_8));<br>        c++;<br>        <span class="hljs-comment">// 将数据发送给服务器</span><br>        ctx.writeAndFlush(buffer);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>服务器代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 通过行解码器对粘包数据进行拆分，以 \n 为分隔符</span><br><span class="hljs-comment">// 需要指定最大长度</span><br>ch.pipeline().addLast(<span class="hljs-keyword">new</span> LineBasedFrameDecoder(<span class="hljs-number">64</span>));<br>ch.pipeline().addLast(<span class="hljs-keyword">new</span> LoggingHandler(LogLevel.DEBUG));<br></code></pre></td></tr></table></figure><p><strong>运行结果</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">4184</span> [nioEventLoopGroup-<span class="hljs-number">3</span>-<span class="hljs-number">1</span>] DEBUG io.netty.handler.logging.LoggingHandler  - [id: <span class="hljs-number">0x9d6ac701</span>, L:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">8080</span> - R:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">58282</span>] READ: 10B<br>         +-------------------------------------------------+<br>         |  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span>  a  b  c  d  e  f |<br>+--------+-------------------------------------------------+----------------+<br>|<span class="hljs-number">00000000</span>| <span class="hljs-number">61</span> <span class="hljs-number">61</span> <span class="hljs-number">61</span> <span class="hljs-number">61</span> <span class="hljs-number">61</span> <span class="hljs-number">61</span> <span class="hljs-number">61</span> <span class="hljs-number">61</span> <span class="hljs-number">61</span> <span class="hljs-number">61</span>                   |aaaaaaaaaa      |<br>+--------+-------------------------------------------------+----------------+<br><br><span class="hljs-number">4184</span> [nioEventLoopGroup-<span class="hljs-number">3</span>-<span class="hljs-number">1</span>] DEBUG io.netty.handler.logging.LoggingHandler  - [id: <span class="hljs-number">0x9d6ac701</span>, L:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">8080</span> - R:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">58282</span>] READ: 11B<br>         +-------------------------------------------------+<br>         |  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span>  a  b  c  d  e  f |<br>+--------+-------------------------------------------------+----------------+<br>|<span class="hljs-number">00000000</span>| <span class="hljs-number">62</span> <span class="hljs-number">62</span> <span class="hljs-number">62</span> <span class="hljs-number">62</span> <span class="hljs-number">62</span> <span class="hljs-number">62</span> <span class="hljs-number">62</span> <span class="hljs-number">62</span> <span class="hljs-number">62</span> <span class="hljs-number">62</span> <span class="hljs-number">62</span>                |bbbbbbbbbbb     |<br>+--------+-------------------------------------------------+----------------+<br><br><span class="hljs-number">4184</span> [nioEventLoopGroup-<span class="hljs-number">3</span>-<span class="hljs-number">1</span>] DEBUG io.netty.handler.logging.LoggingHandler  - [id: <span class="hljs-number">0x9d6ac701</span>, L:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">8080</span> - R:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">58282</span>] READ: 2B<br>         +-------------------------------------------------+<br>         |  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span>  a  b  c  d  e  f |<br>+--------+-------------------------------------------------+----------------+<br>|<span class="hljs-number">00000000</span>| <span class="hljs-number">63</span> <span class="hljs-number">63</span>                                           |cc              |<br>+--------+-------------------------------------------------+----------------+<br><br>...<br></code></pre></td></tr></table></figure><p><strong>以自定义分隔符 \c 为分隔符</strong></p><p>客户端代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">channelActive</span><span class="hljs-params">(ChannelHandlerContext ctx)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>    <span class="hljs-comment">// 约定最大长度为 64</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> maxLength = <span class="hljs-number">64</span>;<br>    <span class="hljs-comment">// 被发送的数据</span><br>    <span class="hljs-keyword">char</span> c = <span class="hljs-string">&#x27;a&#x27;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>        ByteBuf buffer = ctx.alloc().buffer(maxLength);<br>        <span class="hljs-comment">// 生成长度为0~62的数据</span><br>        Random random = <span class="hljs-keyword">new</span> Random();<br>        StringBuilder sb = <span class="hljs-keyword">new</span> StringBuilder();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; (<span class="hljs-keyword">int</span>) (random.nextInt(maxLength - <span class="hljs-number">2</span>)); j++) &#123;<br>            sb.append(c);c<br>        &#125;<br>        <span class="hljs-comment">// 数据以 \c 结尾</span><br>        sb.append(<span class="hljs-string">&quot;\\c&quot;</span>);<br>        buffer.writeBytes(sb.toString().getBytes(StandardCharsets.UTF_8));<br>        c++;<br>        <span class="hljs-comment">// 将数据发送给服务器</span><br>        ctx.writeAndFlush(buffer);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>服务器代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 将分隔符放入ByteBuf中</span><br>ByteBuf bufSet = ch.alloc().buffer().writeBytes(<span class="hljs-string">&quot;\\c&quot;</span>.getBytes(StandardCharsets.UTF_8));<br><span class="hljs-comment">// 通过行解码器对粘包数据进行拆分，以 \c 为分隔符</span><br>ch.pipeline().addLast(<span class="hljs-keyword">new</span> DelimiterBasedFrameDecoder(<span class="hljs-number">64</span>, ch.alloc().buffer().writeBytes(bufSet)));<br>ch.pipeline().addLast(<span class="hljs-keyword">new</span> LoggingHandler(LogLevel.DEBUG));<br></code></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">8246</span> [nioEventLoopGroup-<span class="hljs-number">3</span>-<span class="hljs-number">1</span>] DEBUG io.netty.handler.logging.LoggingHandler  - [id: <span class="hljs-number">0x86215ccd</span>, L:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">8080</span> - R:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">65159</span>] READ: 14B<br>         +-------------------------------------------------+<br>         |  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span>  a  b  c  d  e  f |<br>+--------+-------------------------------------------------+----------------+<br>|<span class="hljs-number">00000000</span>| <span class="hljs-number">61</span> <span class="hljs-number">61</span> <span class="hljs-number">61</span> <span class="hljs-number">61</span> <span class="hljs-number">61</span> <span class="hljs-number">61</span> <span class="hljs-number">61</span> <span class="hljs-number">61</span> <span class="hljs-number">61</span> <span class="hljs-number">61</span> <span class="hljs-number">61</span> <span class="hljs-number">61</span> <span class="hljs-number">61</span> <span class="hljs-number">61</span>       |aaaaaaaaaaaaaa  |<br>+--------+-------------------------------------------------+----------------+<br><br><br><span class="hljs-number">8247</span> [nioEventLoopGroup-<span class="hljs-number">3</span>-<span class="hljs-number">1</span>] DEBUG io.netty.handler.logging.LoggingHandler  - [id: <span class="hljs-number">0x86215ccd</span>, L:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">8080</span> - R:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">65159</span>] READ: 3B<br>         +-------------------------------------------------+<br>         |  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span>  a  b  c  d  e  f |<br>+--------+-------------------------------------------------+----------------+<br>|<span class="hljs-number">00000000</span>| <span class="hljs-number">62</span> <span class="hljs-number">62</span> <span class="hljs-number">62</span>                                        |bbb             |<br>+--------+-------------------------------------------------+----------------+<br><br>...<br></code></pre></td></tr></table></figure><h3 id="④-长度字段解码器"><a href="#④-长度字段解码器" class="headerlink" title="④. 长度字段解码器"></a>④. 长度字段解码器</h3><p>在传送数据时可以在数据中<strong>添加一个用于表示有用数据长度的字段</strong>，在解码时读取出这个用于表明长度的字段，同时读取其他相关参数，即可知道最终需要的数据是什么样子的</p><p><code>LengthFieldBasedFrameDecoder</code>解码器可以提供更为丰富的拆分方法，其构造方法有五个参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">LengthFieldBasedFrameDecoder</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-keyword">int</span> maxFrameLength,</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-keyword">int</span> lengthFieldOffset, <span class="hljs-keyword">int</span> lengthFieldLength,</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-keyword">int</span> lengthAdjustment, <span class="hljs-keyword">int</span> initialBytesToStrip)</span></span><br></code></pre></td></tr></table></figure><p><strong>参数解析</strong></p><ul><li>maxFrameLength 数据最大长度<ul><li>表示数据的最大长度（包括附加信息、长度标识等内容）</li></ul></li><li>lengthFieldOffset <strong>数据长度标识的起始偏移量</strong><ul><li>用于指明数据第几个字节开始是用于标识有用字节长度的，因为前面可能还有其他附加信息</li></ul></li><li>lengthFieldLength <strong>数据长度标识所占字节数</strong>（用于指明有用数据的长度）<ul><li>数据中用于表示有用数据长度的标识所占的字节数</li></ul></li><li>lengthAdjustment <strong>长度表示与有用数据的偏移量</strong><ul><li>用于指明数据长度标识和有用数据之间的距离，因为两者之间还可能有附加信息</li></ul></li><li>initialBytesToStrip <strong>数据读取起点</strong><ul><li>读取起点，<strong>不读取</strong> 0 ~ initialBytesToStrip 之间的数据</li></ul></li></ul><p><strong>参数图解</strong></p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210425200007.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210425200007.png" alt="img"></a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">lengthFieldOffset   = <span class="hljs-number">0</span><br>lengthFieldLength   = <span class="hljs-number">2</span><br>lengthAdjustment    = <span class="hljs-number">0</span><br>initialBytesToStrip = <span class="hljs-number">0</span> (= <span class="hljs-keyword">do</span> not strip header)<br>  <br><span class="hljs-function">BEFORE <span class="hljs-title">DECODE</span> <span class="hljs-params">(<span class="hljs-number">14</span> bytes)</span>         AFTER <span class="hljs-title">DECODE</span> <span class="hljs-params">(<span class="hljs-number">14</span> bytes)</span></span><br><span class="hljs-function">+--------+----------------+      +--------+----------------+</span><br><span class="hljs-function">| Length | Actual Content |-----&gt;| Length | Actual Content |</span><br><span class="hljs-function">| 0x000C | &quot;HELLO, WORLD&quot; |      | 0x000C | &quot;HELLO, WORLD&quot; |</span><br><span class="hljs-function">+--------+----------------+      +--------+----------------+</span><br></code></pre></td></tr></table></figure><p>从0开始即为长度标识，长度标识长度为2个字节</p><p><strong>0x000C</strong> 即为后面 <code>HELLO, WORLD</code>的长度</p><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">lengthFieldOffset   = <span class="hljs-number">0</span><br>lengthFieldLength   = <span class="hljs-number">2</span><br>lengthAdjustment    = <span class="hljs-number">0</span><br>initialBytesToStrip = <span class="hljs-number">2</span> (= the length of the Length field)<br>  <br><span class="hljs-function">BEFORE <span class="hljs-title">DECODE</span> <span class="hljs-params">(<span class="hljs-number">14</span> bytes)</span>         AFTER <span class="hljs-title">DECODE</span> <span class="hljs-params">(<span class="hljs-number">12</span> bytes)</span></span><br><span class="hljs-function">+--------+----------------+      +----------------+</span><br><span class="hljs-function">| Length | Actual Content |-----&gt;| Actual Content |</span><br><span class="hljs-function">| 0x000C | &quot;HELLO, WORLD&quot; |      | &quot;HELLO, WORLD&quot; |</span><br><span class="hljs-function">+--------+----------------+      +----------------+</span><br></code></pre></td></tr></table></figure><p>从0开始即为长度标识，长度标识长度为2个字节，<strong>读取时从第二个字节开始读取</strong>（此处即跳过长度标识）</p><p>因为<strong>跳过了用于表示长度的2个字节</strong>，所以此处直接读取<code>HELLO, WORLD</code></p><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">lengthFieldOffset   = <span class="hljs-number">2</span> (= the length of Header <span class="hljs-number">1</span>)<br>lengthFieldLength   = <span class="hljs-number">3</span><br>lengthAdjustment    = <span class="hljs-number">0</span><br>initialBytesToStrip = <span class="hljs-number">0</span><br>  <br><span class="hljs-function">BEFORE <span class="hljs-title">DECODE</span> <span class="hljs-params">(<span class="hljs-number">17</span> bytes)</span>                      AFTER <span class="hljs-title">DECODE</span> <span class="hljs-params">(<span class="hljs-number">17</span> bytes)</span></span><br><span class="hljs-function">+----------+----------+----------------+      +----------+----------+----------------+</span><br><span class="hljs-function">| Header 1 |  Length  | Actual Content |-----&gt;| Header 1 |  Length  | Actual Content |</span><br><span class="hljs-function">|  0xCAFE  | 0x00000C | &quot;HELLO, WORLD&quot; |      |  0xCAFE  | 0x00000C | &quot;HELLO, WORLD&quot; |</span><br><span class="hljs-function">+----------+----------+----------------+      +----------+----------+----------------+</span><br></code></pre></td></tr></table></figure><p>长度标识<strong>前面还有2个字节的其他内容</strong>（0xCAFE），第三个字节开始才是长度标识，长度表示长度为3个字节(0x00000C)</p><p>Header1中有附加信息，<strong>读取长度标识时需要跳过这些附加信息来获取长度</strong></p><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">lengthFieldOffset   = <span class="hljs-number">0</span><br>lengthFieldLength   = <span class="hljs-number">3</span><br>lengthAdjustment    = <span class="hljs-number">2</span> (= the length of Header <span class="hljs-number">1</span>)<br>initialBytesToStrip = <span class="hljs-number">0</span><br>  <br><span class="hljs-function">BEFORE <span class="hljs-title">DECODE</span> <span class="hljs-params">(<span class="hljs-number">17</span> bytes)</span>                      AFTER <span class="hljs-title">DECODE</span> <span class="hljs-params">(<span class="hljs-number">17</span> bytes)</span></span><br><span class="hljs-function">+----------+----------+----------------+      +----------+----------+----------------+</span><br><span class="hljs-function">|  Length  | Header 1 | Actual Content |-----&gt;|  Length  | Header 1 | Actual Content |</span><br><span class="hljs-function">| 0x00000C |  0xCAFE  | &quot;HELLO, WORLD&quot; |      | 0x00000C |  0xCAFE  | &quot;HELLO, WORLD&quot; |</span><br><span class="hljs-function">+----------+----------+----------------+      +----------+----------+----------------+</span><br></code></pre></td></tr></table></figure><p>从0开始即为长度标识，长度标识长度为3个字节，<strong>长度标识之后还有2个字节的其他内容</strong>（0xCAFE）</p><p>长度标识(0x00000C)表示的是<strong>从其后lengthAdjustment（2个字节）开始的数据的长度，</strong></p><p>**即<code>HELLO, WORLD</code>**，不包括0xCAFE</p><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">lengthFieldOffset   = <span class="hljs-number">1</span> (= the length of HDR1)<br>lengthFieldLength   = <span class="hljs-number">2</span><br>lengthAdjustment    = <span class="hljs-number">1</span> (= the length of HDR2)<br>initialBytesToStrip = <span class="hljs-number">3</span> (= the length of HDR1 + LEN)<br>  <br><span class="hljs-function">BEFORE <span class="hljs-title">DECODE</span> <span class="hljs-params">(<span class="hljs-number">16</span> bytes)</span>                       AFTER <span class="hljs-title">DECODE</span> <span class="hljs-params">(<span class="hljs-number">13</span> bytes)</span></span><br><span class="hljs-function">+------+--------+------+----------------+      +------+----------------+</span><br><span class="hljs-function">| HDR1 | Length | HDR2 | Actual Content |-----&gt;| HDR2 | Actual Content |</span><br><span class="hljs-function">| 0xCA | 0x000C | 0xFE | &quot;HELLO, WORLD&quot; |      | 0xFE | &quot;HELLO, WORLD&quot; |</span><br><span class="hljs-function">+------+--------+------+----------------+      +------+----------------+</span><br></code></pre></td></tr></table></figure><p>长度标识<strong>前面有1个字节的其他内容，后面也有1个字节的其他内容，读取时从长度标识之后3个字节处开始读取</strong>，</p><p>即读取 <code>0xFE HELLO, WORLD</code></p><p><strong>使用EmbeddedChannel模拟测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LTCDecoder</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 模拟服务器</span><br>        <span class="hljs-comment">// 使用EmbeddedChannel测试handler</span><br>        EmbeddedChannel channel = <span class="hljs-keyword">new</span> EmbeddedChannel(<br>                <span class="hljs-comment">// 数据最大长度为1KB，长度标识前后各有1个字节的附加信息，长度标识长度为4个字节（int），最后前截取6位</span><br>                <span class="hljs-keyword">new</span> LengthFieldBasedFrameDecoder(<br>                        <span class="hljs-number">1024</span>,<br>                        <span class="hljs-number">1</span>,<br>                        <span class="hljs-number">4</span>,<br>                        <span class="hljs-number">1</span>,<br>                        <span class="hljs-number">6</span>),<br>                <span class="hljs-keyword">new</span> LoggingHandler(LogLevel.DEBUG)<br>        );<br><br>        <span class="hljs-comment">// 模拟客户端，写入数据</span><br>        ByteBuf buffer = ByteBufAllocator.DEFAULT.buffer();<br>        send(buffer, <span class="hljs-string">&quot;Hello&quot;</span>);<br>        channel.writeInbound(buffer);<br>        send(buffer, <span class="hljs-string">&quot;World&quot;</span>);<br>        channel.writeInbound(buffer);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">send</span><span class="hljs-params">(ByteBuf buf, String msg)</span> </span>&#123;<br>        <span class="hljs-comment">// 得到数据的长度</span><br>        <span class="hljs-keyword">int</span> length = msg.length();<br>        <span class="hljs-keyword">byte</span>[] bytes = msg.getBytes(StandardCharsets.UTF_8);<br>        <span class="hljs-comment">// 将数据信息写入buf</span><br>        <span class="hljs-comment">// 写入长度标识前的其他信息</span><br>        buf.writeByte(<span class="hljs-number">0xCA</span>);<br>        <span class="hljs-comment">// 写入数据长度标识</span><br>        buf.writeInt(length);<br>        <span class="hljs-comment">// 写入长度标识后的其他信息</span><br>        buf.writeByte(<span class="hljs-number">0xFE</span>);<br>        <span class="hljs-comment">// 写入具体的数据</span><br>        buf.writeBytes(bytes);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>运行结果</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">19</span>:<span class="hljs-number">39</span>:<span class="hljs-number">49.124</span> [main] DEBUG io.netty.handler.logging.LoggingHandler - [id: 0xembedded, L:embedded - R:embedded] READ: 5B<br>         +-------------------------------------------------+<br>         |  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span>  a  b  c  d  e  f |<br>+--------+-------------------------------------------------+----------------+<br>|<span class="hljs-number">00000000</span>| <span class="hljs-number">48</span> <span class="hljs-number">65</span> 6c 6c <span class="hljs-number">6f</span>                                  |Hello           |<br>+--------+-------------------------------------------------+----------------+<br><span class="hljs-number">19</span>:<span class="hljs-number">39</span>:<span class="hljs-number">49.126</span> [main] DEBUG io.netty.handler.logging.LoggingHandler - [id: 0xembedded, L:embedded - R:embedded] READ COMPLETE<br><span class="hljs-number">19</span>:<span class="hljs-number">39</span>:<span class="hljs-number">49.126</span> [main] DEBUG io.netty.handler.logging.LoggingHandler - [id: 0xembedded, L:embedded - R:embedded] READ: 5B<br>         +-------------------------------------------------+<br>         |  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span>  a  b  c  d  e  f |<br>+--------+-------------------------------------------------+----------------+<br>|<span class="hljs-number">00000000</span>| <span class="hljs-number">57</span> <span class="hljs-number">6f</span> <span class="hljs-number">72</span> 6c <span class="hljs-number">64</span>                                  |World           |<br>+--------+-------------------------------------------------+----------------+<br><span class="hljs-number">19</span>:<span class="hljs-number">39</span>:<span class="hljs-number">49.126</span> [main] DEBUG io.netty.handler.logging.LoggingHandler - [id: 0xembedded, L:embedded - R:embedded] READ COMPLETE<br></code></pre></td></tr></table></figure><h1 id="二、协议设计与解析"><a href="#二、协议设计与解析" class="headerlink" title="二、协议设计与解析"></a>二、协议设计与解析</h1><h2 id="1-协议的作用"><a href="#1-协议的作用" class="headerlink" title="1. 协议的作用"></a>1. 协议的作用</h2><p>TCP/IP 中消息传输基于流的方式，没有边界</p><p><strong>协议的目的就是划定消息的边界，制定通信双方要共同遵守的通信规则</strong></p><h2 id="2-Redis-协议"><a href="#2-Redis-协议" class="headerlink" title="2. Redis 协议"></a>2. Redis 协议</h2><p>如果我们要向Redis服务器发送一条<code>set name Nyima</code>的指令，需要遵守如下协议</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 该指令一共有3部分，每条指令之后都要添加回车与换行符</span><br>*<span class="hljs-number">3</span>\r\n<br><span class="hljs-comment">// 第一个指令的长度是3</span><br>$<span class="hljs-number">3</span>\r\n<br><span class="hljs-comment">// 第一个指令是set指令</span><br>set\r\n<br><span class="hljs-comment">// 下面的指令以此类推</span><br>$<span class="hljs-number">4</span>\r\n<br>name\r\n<br>$<span class="hljs-number">5</span>\r\n<br>Nyima\r\n<br></code></pre></td></tr></table></figure><p><strong>客户端代码如下</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RedisClient</span> </span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Logger log = LoggerFactory.getLogger(StudyServer.class);<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        NioEventLoopGroup group =  <span class="hljs-keyword">new</span> NioEventLoopGroup();<br>        <span class="hljs-keyword">try</span> &#123;<br>            ChannelFuture channelFuture = <span class="hljs-keyword">new</span> Bootstrap()<br>                    .group(group)<br>                    .channel(NioSocketChannel.class)<br>                    .handler(<span class="hljs-keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;<br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initChannel</span><span class="hljs-params">(SocketChannel ch)</span> </span>&#123;<br>                            <span class="hljs-comment">// 打印日志</span><br>                            ch.pipeline().addLast(<span class="hljs-keyword">new</span> LoggingHandler(LogLevel.DEBUG));<br>                            ch.pipeline().addLast(<span class="hljs-keyword">new</span> ChannelInboundHandlerAdapter() &#123;<br>                                <span class="hljs-meta">@Override</span><br>                                <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">channelActive</span><span class="hljs-params">(ChannelHandlerContext ctx)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>                                    <span class="hljs-comment">// 回车与换行符</span><br>                                    <span class="hljs-keyword">final</span> <span class="hljs-keyword">byte</span>[] LINE = &#123;<span class="hljs-string">&#x27;\r&#x27;</span>,<span class="hljs-string">&#x27;\n&#x27;</span>&#125;;<br>                                    <span class="hljs-comment">// 获得ByteBuf</span><br>                                    ByteBuf buffer = ctx.alloc().buffer();<br>                                    <span class="hljs-comment">// 连接建立后，向Redis中发送一条指令，注意添加回车与换行</span><br>                                    <span class="hljs-comment">// set name Nyima</span><br>                                    buffer.writeBytes(<span class="hljs-string">&quot;*3&quot;</span>.getBytes());<br>                                    buffer.writeBytes(LINE);<br>                                    buffer.writeBytes(<span class="hljs-string">&quot;$3&quot;</span>.getBytes());<br>                                    buffer.writeBytes(LINE);<br>                                    buffer.writeBytes(<span class="hljs-string">&quot;set&quot;</span>.getBytes());<br>                                    buffer.writeBytes(LINE);<br>                                    buffer.writeBytes(<span class="hljs-string">&quot;$4&quot;</span>.getBytes());<br>                                    buffer.writeBytes(LINE);<br>                                    buffer.writeBytes(<span class="hljs-string">&quot;name&quot;</span>.getBytes());<br>                                    buffer.writeBytes(LINE);<br>                                    buffer.writeBytes(<span class="hljs-string">&quot;$5&quot;</span>.getBytes());<br>                                    buffer.writeBytes(LINE);<br>                                    buffer.writeBytes(<span class="hljs-string">&quot;Nyima&quot;</span>.getBytes());<br>                                    buffer.writeBytes(LINE);<br>                                    ctx.writeAndFlush(buffer);<br>                                &#125;<br><br>                            &#125;);<br>                        &#125;<br>                    &#125;)<br>                    .connect(<span class="hljs-keyword">new</span> InetSocketAddress(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">6379</span>));<br>            channelFuture.sync();<br>            <span class="hljs-comment">// 关闭channel</span><br>            channelFuture.channel().close().sync();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">// 关闭group</span><br>            group.shutdownGracefully();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>控制台打印结果</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1600</span> [nioEventLoopGroup-<span class="hljs-number">2</span>-<span class="hljs-number">1</span>] DEBUG io.netty.handler.logging.LoggingHandler  - [id: <span class="hljs-number">0x28c994f1</span>, L:/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">60792</span> - R:localhost/<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>] WRITE: 34B<br>         +-------------------------------------------------+<br>         |  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span>  a  b  c  d  e  f |<br>+--------+-------------------------------------------------+----------------+<br>|<span class="hljs-number">00000000</span>| 2a <span class="hljs-number">33</span> <span class="hljs-number">0d</span> 0a <span class="hljs-number">24</span> <span class="hljs-number">33</span> <span class="hljs-number">0d</span> 0a <span class="hljs-number">73</span> <span class="hljs-number">65</span> <span class="hljs-number">74</span> <span class="hljs-number">0d</span> 0a <span class="hljs-number">24</span> <span class="hljs-number">34</span> <span class="hljs-number">0d</span> |*<span class="hljs-number">3.</span>.$<span class="hljs-number">3.</span>.set..$<span class="hljs-number">4.</span>|<br>|<span class="hljs-number">00000010</span>| 0a 6e <span class="hljs-number">61</span> <span class="hljs-number">6d</span> <span class="hljs-number">65</span> <span class="hljs-number">0d</span> 0a <span class="hljs-number">24</span> <span class="hljs-number">35</span> <span class="hljs-number">0d</span> 0a 4e <span class="hljs-number">79</span> <span class="hljs-number">69</span> <span class="hljs-number">6d</span> <span class="hljs-number">61</span> |.name..$<span class="hljs-number">5.</span>.Nyima|<br>|<span class="hljs-number">00000020</span>| <span class="hljs-number">0d</span> 0a                                           |..              |<br>+--------+-------------------------------------------------+----------------+<br></code></pre></td></tr></table></figure><p><strong>Redis中查询执行结果</strong></p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210426101530.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210426101530.png" alt="img"></a></p><h2 id="3-Http-协议"><a href="#3-Http-协议" class="headerlink" title="3. Http 协议"></a>3. Http 协议</h2><p>HTTP协议在请求行请求头中都有很多的内容，自己实现较为困难，</p><p>可以使用<code>HttpServerCodec</code>作为<strong>服务器端的解码器与编码器，来处理HTTP请求</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// HttpServerCodec 中既有请求的解码器 HttpRequestDecoder 又有响应的编码器 HttpResponseEncoder</span><br><span class="hljs-comment">// Codec(CodeCombine) 一般代表该类既作为 编码器 又作为 解码器</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HttpServerCodec</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">CombinedChannelDuplexHandler</span>&lt;<span class="hljs-title">HttpRequestDecoder</span>, <span class="hljs-title">HttpResponseEncoder</span>&gt;</span><br><span class="hljs-class">        <span class="hljs-keyword">implements</span> <span class="hljs-title">HttpServerUpgradeHandler</span>.<span class="hljs-title">SourceCodec</span></span><br></code></pre></td></tr></table></figure><p><strong>服务器代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HttpServer</span> </span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Logger log = LoggerFactory.getLogger(StudyServer.class);<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        NioEventLoopGroup group = <span class="hljs-keyword">new</span> NioEventLoopGroup();<br>        <span class="hljs-keyword">new</span> ServerBootstrap()<br>                .group(group)<br>                .channel(NioServerSocketChannel.class)<br>                .childHandler(<span class="hljs-keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;<br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initChannel</span><span class="hljs-params">(SocketChannel ch)</span> </span>&#123;<br>                        ch.pipeline().addLast(<span class="hljs-keyword">new</span> LoggingHandler(LogLevel.DEBUG));<br>                        <span class="hljs-comment">// 作为服务器，使用 HttpServerCodec 作为编码器与解码器</span><br>                        ch.pipeline().addLast(<span class="hljs-keyword">new</span> HttpServerCodec());<br>                        <span class="hljs-comment">// 服务器只处理HTTPRequest</span><br>                        ch.pipeline().addLast(<span class="hljs-keyword">new</span> SimpleChannelInboundHandler&lt;HttpRequest&gt;() &#123;<br>                            <span class="hljs-meta">@Override</span><br>                            <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">channelRead0</span><span class="hljs-params">(ChannelHandlerContext ctx, HttpRequest msg)</span> </span>&#123;<br>                                <span class="hljs-comment">// 获得请求uri</span><br>                                log.debug(msg.uri());<br><br>                                <span class="hljs-comment">// 获得完整响应，设置版本号与状态码</span><br>                                DefaultFullHttpResponse response = <span class="hljs-keyword">new</span> DefaultFullHttpResponse(msg.protocolVersion(), HttpResponseStatus.OK);<br>                                <span class="hljs-comment">// 设置响应内容</span><br>                                <span class="hljs-keyword">byte</span>[] bytes = <span class="hljs-string">&quot;&lt;h1&gt;Hello, World!&lt;/h1&gt;&quot;</span>.getBytes(StandardCharsets.UTF_8);<br>                                <span class="hljs-comment">// 设置响应体长度，避免浏览器一直接收响应内容</span><br>                                response.headers().setInt(CONTENT_LENGTH, bytes.length);<br>                                <span class="hljs-comment">// 设置响应体</span><br>                                response.content().writeBytes(bytes);<br><br>                                <span class="hljs-comment">// 写回响应</span><br>                                ctx.writeAndFlush(response);<br>                            &#125;<br>                        &#125;);<br>                    &#125;<br>                &#125;)<br>                .bind(<span class="hljs-number">8080</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>服务器负责处理请求并响应浏览器。所以<strong>只需要处理HTTP请求</strong>即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 服务器只处理HTTPRequest</span><br>ch.pipeline().addLast(<span class="hljs-keyword">new</span> SimpleChannelInboundHandler&lt;HttpRequest&gt;()<br></code></pre></td></tr></table></figure><p>获得请求后，需要返回响应给浏览器。需要创建响应对象<code>DefaultFullHttpResponse</code>，设置HTTP版本号及状态码，为避免浏览器获得响应后，因为获得<code>CONTENT_LENGTH</code>而一直空转，需要添加<code>CONTENT_LENGTH</code>字段，表明响应体中数据的具体长度</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获得完整响应，设置版本号与状态码</span><br>DefaultFullHttpResponse response = <span class="hljs-keyword">new</span> DefaultFullHttpResponse(msg.protocolVersion(), HttpResponseStatus.OK);<br><span class="hljs-comment">// 设置响应内容</span><br><span class="hljs-keyword">byte</span>[] bytes = <span class="hljs-string">&quot;&lt;h1&gt;Hello, World!&lt;/h1&gt;&quot;</span>.getBytes(StandardCharsets.UTF_8);<br><span class="hljs-comment">// 设置响应体长度，避免浏览器一直接收响应内容</span><br>response.headers().setInt(CONTENT_LENGTH, bytes.length);<br><span class="hljs-comment">// 设置响应体</span><br>response.content().writeBytes(bytes);<br></code></pre></td></tr></table></figure><p><strong>运行结果</strong></p><p>浏览器</p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210426111017.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210426111017.png" alt="img"></a></p><p>控制台</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 请求内容</span><br><span class="hljs-number">1714</span> [nioEventLoopGroup-<span class="hljs-number">2</span>-<span class="hljs-number">2</span>] DEBUG io.netty.handler.logging.LoggingHandler  - [id: <span class="hljs-number">0x72630ef7</span>, L:/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>:<span class="hljs-number">0</span>:<span class="hljs-number">0</span>:<span class="hljs-number">0</span>:<span class="hljs-number">0</span>:<span class="hljs-number">0</span>:<span class="hljs-number">1</span>:<span class="hljs-number">8080</span> - R:/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>:<span class="hljs-number">0</span>:<span class="hljs-number">0</span>:<span class="hljs-number">0</span>:<span class="hljs-number">0</span>:<span class="hljs-number">0</span>:<span class="hljs-number">1</span>:<span class="hljs-number">55503</span>] READ: 688B<br>         +-------------------------------------------------+<br>         |  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span>  a  b  c  d  e  f |<br>+--------+-------------------------------------------------+----------------+<br>|<span class="hljs-number">00000000</span>| <span class="hljs-number">47</span> <span class="hljs-number">45</span> <span class="hljs-number">54</span> <span class="hljs-number">20</span> <span class="hljs-number">2f</span> <span class="hljs-number">66</span> <span class="hljs-number">61</span> <span class="hljs-number">76</span> <span class="hljs-number">69</span> <span class="hljs-number">63</span> <span class="hljs-number">6f</span> 6e 2e <span class="hljs-number">69</span> <span class="hljs-number">63</span> <span class="hljs-number">6f</span> |GET /favicon.ico|<br>|<span class="hljs-number">00000010</span>| <span class="hljs-number">20</span> <span class="hljs-number">48</span> <span class="hljs-number">54</span> <span class="hljs-number">54</span> <span class="hljs-number">50</span> <span class="hljs-number">2f</span> <span class="hljs-number">31</span> 2e <span class="hljs-number">31</span> <span class="hljs-number">0d</span> 0a <span class="hljs-number">48</span> <span class="hljs-number">6f</span> <span class="hljs-number">73</span> <span class="hljs-number">74</span> 3a | HTTP/<span class="hljs-number">1.1</span>..Host:|<br>|<span class="hljs-number">00000020</span>| <span class="hljs-number">20</span> 6c <span class="hljs-number">6f</span> <span class="hljs-number">63</span> <span class="hljs-number">61</span> 6c <span class="hljs-number">68</span> <span class="hljs-number">6f</span> <span class="hljs-number">73</span> <span class="hljs-number">74</span> 3a <span class="hljs-number">38</span> <span class="hljs-number">30</span> <span class="hljs-number">38</span> <span class="hljs-number">30</span> <span class="hljs-number">0d</span> | localhost:<span class="hljs-number">8080.</span>|<br>|<span class="hljs-number">00000030</span>| 0a <span class="hljs-number">43</span> <span class="hljs-number">6f</span> 6e 6e <span class="hljs-number">65</span> <span class="hljs-number">63</span> <span class="hljs-number">74</span> <span class="hljs-number">69</span> <span class="hljs-number">6f</span> 6e 3a <span class="hljs-number">20</span> 6b <span class="hljs-number">65</span> <span class="hljs-number">65</span> |.Connection: kee|<br>|<span class="hljs-number">00000040</span>| <span class="hljs-number">70</span> <span class="hljs-number">2d</span> <span class="hljs-number">61</span> 6c <span class="hljs-number">69</span> <span class="hljs-number">76</span> <span class="hljs-number">65</span> <span class="hljs-number">0d</span> 0a <span class="hljs-number">50</span> <span class="hljs-number">72</span> <span class="hljs-number">61</span> <span class="hljs-number">67</span> <span class="hljs-number">6d</span> <span class="hljs-number">61</span> 3a |p-alive..Pragma:|<br>....<br><br><span class="hljs-comment">// 响应内容</span><br><span class="hljs-number">1716</span> [nioEventLoopGroup-<span class="hljs-number">2</span>-<span class="hljs-number">2</span>] DEBUG io.netty.handler.logging.LoggingHandler  - [id: <span class="hljs-number">0x72630ef7</span>, L:/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>:<span class="hljs-number">0</span>:<span class="hljs-number">0</span>:<span class="hljs-number">0</span>:<span class="hljs-number">0</span>:<span class="hljs-number">0</span>:<span class="hljs-number">1</span>:<span class="hljs-number">8080</span> - R:/<span class="hljs-number">0</span>:<span class="hljs-number">0</span>:<span class="hljs-number">0</span>:<span class="hljs-number">0</span>:<span class="hljs-number">0</span>:<span class="hljs-number">0</span>:<span class="hljs-number">0</span>:<span class="hljs-number">1</span>:<span class="hljs-number">55503</span>] WRITE: 61B<br>         +-------------------------------------------------+<br>         |  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span>  a  b  c  d  e  f |<br>+--------+-------------------------------------------------+----------------+<br>|<span class="hljs-number">00000000</span>| <span class="hljs-number">48</span> <span class="hljs-number">54</span> <span class="hljs-number">54</span> <span class="hljs-number">50</span> <span class="hljs-number">2f</span> <span class="hljs-number">31</span> 2e <span class="hljs-number">31</span> <span class="hljs-number">20</span> <span class="hljs-number">32</span> <span class="hljs-number">30</span> <span class="hljs-number">30</span> <span class="hljs-number">20</span> <span class="hljs-number">4f</span> 4b <span class="hljs-number">0d</span> |HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK.|<br>|<span class="hljs-number">00000010</span>| 0a <span class="hljs-number">43</span> <span class="hljs-number">6f</span> 6e <span class="hljs-number">74</span> <span class="hljs-number">65</span> 6e <span class="hljs-number">74</span> <span class="hljs-number">2d</span> 4c <span class="hljs-number">65</span> 6e <span class="hljs-number">67</span> <span class="hljs-number">74</span> <span class="hljs-number">68</span> 3a |.Content-Length:|<br>|<span class="hljs-number">00000020</span>| <span class="hljs-number">20</span> <span class="hljs-number">32</span> <span class="hljs-number">32</span> <span class="hljs-number">0d</span> 0a <span class="hljs-number">0d</span> 0a 3c <span class="hljs-number">68</span> <span class="hljs-number">31</span> 3e <span class="hljs-number">48</span> <span class="hljs-number">65</span> 6c 6c <span class="hljs-number">6f</span> | <span class="hljs-number">22.</span>...&lt;h1&gt;Hello|<br>|<span class="hljs-number">00000030</span>| 2c <span class="hljs-number">20</span> <span class="hljs-number">57</span> <span class="hljs-number">6f</span> <span class="hljs-number">72</span> 6c <span class="hljs-number">64</span> <span class="hljs-number">21</span> 3c <span class="hljs-number">2f</span> <span class="hljs-number">68</span> <span class="hljs-number">31</span> 3e          |, World!&lt;/h1&gt;   |<br>+--------+-------------------------------------------------+----------------+<br></code></pre></td></tr></table></figure><h2 id="4-自定义协议"><a href="#4-自定义协议" class="headerlink" title="4. 自定义协议"></a>4. 自定义协议</h2><h3 id="①-组成要素"><a href="#①-组成要素" class="headerlink" title="①. 组成要素"></a>①. 组成要素</h3><ul><li><strong>魔数</strong>：用来在第一时间判定接收的数据是否为无效数据包</li><li><strong>版本号</strong>：可以支持协议的升级</li><li>序列化算法：消息正文到底采用哪种序列化反序列化方式<ul><li>如：json、protobuf、hessian、jdk</li></ul></li><li><strong>指令类型</strong>：是登录、注册、单聊、群聊… 跟业务相关</li><li><strong>请求序号</strong>：为了双工通信，提供异步能力<ul><li>因为发送请求时是异步的，例如客户端同时发送1 2 3 4</li><li>服务端就可能收到不同的顺序，为了解决这一问题，请求中就需要添加一项<strong>请求序号</strong>加以区别</li></ul></li><li><strong>正文长度</strong></li><li><strong>消息正文</strong></li></ul><h3 id="②-编码器与解码器"><a href="#②-编码器与解码器" class="headerlink" title="②. 编码器与解码器"></a>②. 编码器与解码器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MessageCodec</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ByteToMessageCodec</span>&lt;<span class="hljs-title">Message</span>&gt; </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">encode</span><span class="hljs-params">(ChannelHandlerContext channelHandlerContext, Message msg, ByteBuf out)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">// 设置魔数 4个字节</span><br>        out.writeBytes(<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[]&#123;<span class="hljs-string">&#x27;M&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;S&#x27;</span>,<span class="hljs-string">&#x27;K&#x27;</span>&#125;);<br>        <span class="hljs-comment">// 设置版本号 1个字节</span><br>        out.writeByte(<span class="hljs-number">1</span>);<br>        <span class="hljs-comment">// 设置序列化方式 1个字节</span><br>        out.writeByte(<span class="hljs-number">1</span>);<br>        <span class="hljs-comment">// 设置指令类型 1个字节</span><br>        out.writeByte(msg.getMessageType());<br>        <span class="hljs-comment">// 设置请求序号 4个字节</span><br>        out.writeInt(msg.getSequenceId());<br>        <span class="hljs-comment">// 为了补齐为16个字节，填充1个字节的数据</span><br>        out.writeByte(<span class="hljs-number">0xff</span>);<br><br>        <span class="hljs-comment">// 获得序列化后的msg</span><br>        ByteArrayOutputStream bos = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream oos = <span class="hljs-keyword">new</span> ObjectOutputStream(bos);<br>        oos.writeObject(msg);<br>        <span class="hljs-keyword">byte</span>[] bytes = bos.toByteArray();<br><br>        <span class="hljs-comment">// 获得并设置正文长度 长度用4个字节标识</span><br>        out.writeInt(bytes.length);<br>        <span class="hljs-comment">// 设置消息正文</span><br>        out.writeBytes(bytes);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">decode</span><span class="hljs-params">(ChannelHandlerContext channelHandlerContext, ByteBuf in, List&lt;Object&gt; out)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">// 获取魔数</span><br>        <span class="hljs-keyword">int</span> magic = in.readInt();<br>        <span class="hljs-comment">// 获取版本号</span><br>        <span class="hljs-keyword">byte</span> version = in.readByte();<br>        <span class="hljs-comment">// 获得序列化方式</span><br>        <span class="hljs-keyword">byte</span> seqType = in.readByte();<br>        <span class="hljs-comment">// 获得指令类型</span><br>        <span class="hljs-keyword">byte</span> messageType = in.readByte();<br>        <span class="hljs-comment">// 获得请求序号</span><br>        <span class="hljs-keyword">int</span> sequenceId = in.readInt();<br>        <span class="hljs-comment">// 移除补齐字节</span><br>        in.readByte();<br>        <span class="hljs-comment">// 获得正文长度</span><br>        <span class="hljs-keyword">int</span> length = in.readInt();<br>        <span class="hljs-comment">// 获得正文</span><br>        <span class="hljs-keyword">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[length];<br>        in.readBytes(bytes, <span class="hljs-number">0</span>, length);<br>        ObjectInputStream ois = <span class="hljs-keyword">new</span> ObjectInputStream(<span class="hljs-keyword">new</span> ByteArrayInputStream(bytes));<br>        Message message = (Message) ois.readObject();<br>        <span class="hljs-comment">// 将信息放入List中，传递给下一个handler</span><br>        out.add(message);<br><br>        <span class="hljs-comment">// 打印获得的信息正文</span><br>        System.out.println(<span class="hljs-string">&quot;===========魔数===========&quot;</span>);<br>        System.out.println(magic);<br>        System.out.println(<span class="hljs-string">&quot;===========版本号===========&quot;</span>);<br>        System.out.println(version);<br>        System.out.println(<span class="hljs-string">&quot;===========序列化方法===========&quot;</span>);<br>        System.out.println(seqType);<br>        System.out.println(<span class="hljs-string">&quot;===========指令类型===========&quot;</span>);<br>        System.out.println(messageType);<br>        System.out.println(<span class="hljs-string">&quot;===========请求序号===========&quot;</span>);<br>        System.out.println(sequenceId);<br>        System.out.println(<span class="hljs-string">&quot;===========正文长度===========&quot;</span>);<br>        System.out.println(length);<br>        System.out.println(<span class="hljs-string">&quot;===========正文===========&quot;</span>);<br>        System.out.println(message);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>编码器与解码器方法源于<strong>父类ByteToMessageCodec</strong>，通过该类可以自定义编码器与解码器，<strong>泛型类型为被编码与被解码的类</strong>。此处使用了自定义类Message，代表消息</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scala">public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MessageCodec</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ByteToMessageCodec&lt;Message&gt;Copy</span></span><br></code></pre></td></tr></table></figure></li><li><p>编码器<strong>负责将附加信息与正文信息写入到ByteBuf中</strong>，其中附加信息<strong>总字节数最好为2n，不足需要补齐</strong>。正文内容如果为对象，需要通过<strong>序列化</strong>将其放入到ByteBuf中</p></li><li><p>解码器<strong>负责将ByteBuf中的信息取出，并放入List中</strong>，该List用于将信息传递给下一个handler</p></li></ul><p><strong>测试类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MessageCodecTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>            EmbeddedChannel channel = <span class="hljs-keyword">new</span> EmbeddedChannel();<br>            <span class="hljs-comment">// 添加解码器，避免粘包半包问题</span><br>            channel.pipeline().addLast(<span class="hljs-keyword">new</span> LengthFieldBasedFrameDecoder(<br>                    <span class="hljs-number">1024</span>,<br>                    <span class="hljs-number">12</span>,<br>                    <span class="hljs-number">4</span>,<br>                    <span class="hljs-number">0</span>,<br>                    <span class="hljs-number">0</span>));<br>            channel.pipeline().addLast(<span class="hljs-keyword">new</span> LoggingHandler(LogLevel.DEBUG));<br>            channel.pipeline().addLast(<span class="hljs-keyword">new</span> MessageCodec());<br>            LoginRequestMessage user = <span class="hljs-keyword">new</span> LoginRequestMessage(<span class="hljs-string">&quot;Masker&quot;</span>, <span class="hljs-string">&quot;123&quot;</span>);<br><br>            <span class="hljs-comment">// 测试编码与解码</span><br>            ByteBuf byteBuf = ByteBufAllocator.DEFAULT.buffer();<br>            <span class="hljs-keyword">new</span> MessageCodec().encode(<span class="hljs-keyword">null</span>, user, byteBuf);<br>            channel.writeInbound(byteBuf);<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>测试类中用到了<strong>LengthFieldBasedFrameDecoder</strong>，避免粘包半包问题</li><li><strong>通过 MessageCodec 的 encode 方法将附加信息与正文写入到 ByteBuf 中，通过 channel 执行入站操作。入站时会调用 decode 方法进行解码</strong></li></ul><p><img src="/image/image-20220129172818163.png" alt="image-20220129172818163"></p><h4 id="Ⅰ-模拟半包现象"><a href="#Ⅰ-模拟半包现象" class="headerlink" title="Ⅰ. 模拟半包现象"></a>Ⅰ. 模拟半包现象</h4><p>使用<code>slice</code>方法，将解析得到的 ByteBuf 分割为两部分，再将这两部分入站</p><p><strong>注意：</strong>因为<code>writeInbound</code>方法会调用<code>release</code>方法释放空间，所以为了避免前一部分被释放，需要让它的引用计数 + 1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MessageCodecTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>            EmbeddedChannel channel = <span class="hljs-keyword">new</span> EmbeddedChannel();<br>            <span class="hljs-comment">// 添加解码器，避免粘包半包问题</span><br>        channel.pipeline().addLast(<span class="hljs-keyword">new</span> LoggingHandler(LogLevel.DEBUG));<br>        channel.pipeline().addLast(<span class="hljs-keyword">new</span> LengthFieldBasedFrameDecoder(<br>                    <span class="hljs-number">1024</span>,<br>                    <span class="hljs-number">12</span>,<br>                    <span class="hljs-number">4</span>,<br>                    <span class="hljs-number">0</span>,<br>                    <span class="hljs-number">0</span>));<br>            channel.pipeline().addLast(<span class="hljs-keyword">new</span> MessageCodec());<br>            LoginRequestMessage user = <span class="hljs-keyword">new</span> LoginRequestMessage(<span class="hljs-string">&quot;Masker&quot;</span>, <span class="hljs-string">&quot;123&quot;</span>);<br><br>            <span class="hljs-comment">// 测试编码与解码</span><br>            ByteBuf byteBuf = ByteBufAllocator.DEFAULT.buffer();<br>            <span class="hljs-keyword">new</span> MessageCodec().encode(<span class="hljs-keyword">null</span>, user, byteBuf);<br><br>            ByteBuf byteBuf1 = byteBuf.slice(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>);<br>            ByteBuf byteBuf2 = byteBuf.slice(<span class="hljs-number">100</span>,  byteBuf.readableBytes() - <span class="hljs-number">100</span>);<br><br>            byteBuf1.retain(); <span class="hljs-comment">// 让引用计数 + 1</span><br>            channel.writeInbound(byteBuf1); <span class="hljs-comment">// 会调用 release 使至引用计数 - 1</span><br>            channel.writeInbound(byteBuf2);<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Ⅱ-测试半包结果"><a href="#Ⅱ-测试半包结果" class="headerlink" title="Ⅱ. 测试半包结果"></a>Ⅱ. 测试半包结果</h4><p>可以从日志看到服务端会<strong>分两部分接收</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">17</span>:<span class="hljs-number">39</span>:<span class="hljs-number">25.980</span> [main] DEBUG io.netty.handler.logging.LoggingHandler - [id: 0xembedded, L:embedded - R:embedded] READ: 100B<br>         +-------------------------------------------------+<br>         |  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span>  a  b  c  d  e  f |<br>+--------+-------------------------------------------------+----------------+<br>|<span class="hljs-number">00000000</span>| <span class="hljs-number">4d</span> <span class="hljs-number">41</span> <span class="hljs-number">53</span> 4b <span class="hljs-number">01</span> <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> ff <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> e0 |MASK............|<br>|<span class="hljs-number">00000010</span>| ac ed <span class="hljs-number">00</span> <span class="hljs-number">05</span> <span class="hljs-number">73</span> <span class="hljs-number">72</span> <span class="hljs-number">00</span> <span class="hljs-number">33</span> <span class="hljs-number">63</span> <span class="hljs-number">6f</span> <span class="hljs-number">6d</span> 2e <span class="hljs-number">77</span> <span class="hljs-number">75</span> 2e <span class="hljs-number">73</span> |....sr.3com.wu.s|<br>|<span class="hljs-number">00000020</span>| <span class="hljs-number">74</span> <span class="hljs-number">75</span> <span class="hljs-number">64</span> <span class="hljs-number">79</span> 2e 6e <span class="hljs-number">65</span> <span class="hljs-number">74</span> <span class="hljs-number">74</span> <span class="hljs-number">79</span> 2e <span class="hljs-number">61</span> <span class="hljs-number">64</span> <span class="hljs-number">76</span> <span class="hljs-number">61</span> 6e |tudy.netty.advan|<br>|<span class="hljs-number">00000030</span>| <span class="hljs-number">63</span> <span class="hljs-number">65</span> 2e <span class="hljs-number">63</span> <span class="hljs-number">68</span> <span class="hljs-number">61</span> <span class="hljs-number">74</span> 2e 4c <span class="hljs-number">6f</span> <span class="hljs-number">67</span> <span class="hljs-number">69</span> 6e <span class="hljs-number">52</span> <span class="hljs-number">65</span> <span class="hljs-number">71</span> |ce.chat.LoginReq|<br>|<span class="hljs-number">00000040</span>| <span class="hljs-number">75</span> <span class="hljs-number">65</span> <span class="hljs-number">73</span> <span class="hljs-number">74</span> <span class="hljs-number">4d</span> <span class="hljs-number">65</span> <span class="hljs-number">73</span> <span class="hljs-number">73</span> <span class="hljs-number">61</span> <span class="hljs-number">67</span> <span class="hljs-number">65</span> <span class="hljs-number">54</span> <span class="hljs-number">66</span> c4 <span class="hljs-number">03</span> <span class="hljs-number">98</span> |uestMessageTf...|<br>|<span class="hljs-number">00000050</span>| 1e 3e ee <span class="hljs-number">02</span> <span class="hljs-number">00</span> <span class="hljs-number">02</span> 4c <span class="hljs-number">00</span> 08 <span class="hljs-number">70</span> <span class="hljs-number">61</span> <span class="hljs-number">73</span> <span class="hljs-number">73</span> <span class="hljs-number">77</span> <span class="hljs-number">6f</span> <span class="hljs-number">72</span> |.&gt;....L..passwor|<br>|<span class="hljs-number">00000060</span>| <span class="hljs-number">64</span> <span class="hljs-number">74</span> <span class="hljs-number">00</span> <span class="hljs-number">12</span>                                     |dt..            |<br>+--------+-------------------------------------------------+----------------+<br><span class="hljs-number">17</span>:<span class="hljs-number">39</span>:<span class="hljs-number">25.995</span> [main] DEBUG io.netty.handler.logging.LoggingHandler - [id: 0xembedded, L:embedded - R:embedded] READ COMPLETE<br><span class="hljs-number">17</span>:<span class="hljs-number">39</span>:<span class="hljs-number">25.996</span> [main] DEBUG io.netty.handler.logging.LoggingHandler - [id: 0xembedded, L:embedded - R:embedded] READ: 140B<br>         +-------------------------------------------------+<br>         |  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span>  a  b  c  d  e  f |<br>+--------+-------------------------------------------------+----------------+<br>|<span class="hljs-number">00000000</span>| 4c 6a <span class="hljs-number">61</span> <span class="hljs-number">76</span> <span class="hljs-number">61</span> <span class="hljs-number">2f</span> 6c <span class="hljs-number">61</span> 6e <span class="hljs-number">67</span> <span class="hljs-number">2f</span> <span class="hljs-number">53</span> <span class="hljs-number">74</span> <span class="hljs-number">72</span> <span class="hljs-number">69</span> 6e |Ljava/lang/Strin|<br>|<span class="hljs-number">00000010</span>| <span class="hljs-number">67</span> 3b 4c <span class="hljs-number">00</span> 08 <span class="hljs-number">75</span> <span class="hljs-number">73</span> <span class="hljs-number">65</span> <span class="hljs-number">72</span> 6e <span class="hljs-number">61</span> <span class="hljs-number">6d</span> <span class="hljs-number">65</span> <span class="hljs-number">71</span> <span class="hljs-number">00</span> 7e |g;L..usernameq.~|<br>|<span class="hljs-number">00000020</span>| <span class="hljs-number">00</span> <span class="hljs-number">01</span> <span class="hljs-number">78</span> <span class="hljs-number">72</span> <span class="hljs-number">00</span> <span class="hljs-number">27</span> <span class="hljs-number">63</span> <span class="hljs-number">6f</span> <span class="hljs-number">6d</span> 2e <span class="hljs-number">77</span> <span class="hljs-number">75</span> 2e <span class="hljs-number">73</span> <span class="hljs-number">74</span> <span class="hljs-number">75</span> |..xr.<span class="hljs-string">&#x27;com.wu.stu|</span><br><span class="hljs-string">|00000030| 64 79 2e 6e 65 74 74 79 2e 61 64 76 61 6e 63 65 |dy.netty.advance|</span><br><span class="hljs-string">|00000040| 2e 63 68 61 74 2e 4d 65 73 73 61 67 65 1a 16 ed |.chat.Message...|</span><br><span class="hljs-string">|00000050| 6c d5 8e 4f 57 02 00 02 49 00 0b 6d 65 73 73 61 |l..OW...I..messa|</span><br><span class="hljs-string">|00000060| 67 65 54 79 70 65 49 00 0a 73 65 71 75 65 6e 63 |geTypeI..sequenc|</span><br><span class="hljs-string">|00000070| 65 49 64 78 70 00 00 00 00 00 00 00 00 74 00 03 |eIdxp........t..|</span><br><span class="hljs-string">|00000080| 31 32 33 74 00 06 4d 61 73 6b 65 72             |123t..Masker    |</span><br><span class="hljs-string">+--------+-------------------------------------------------+----------------+</span><br><span class="hljs-string">===========魔数===========</span><br><span class="hljs-string">1296126795</span><br><span class="hljs-string">===========版本号===========</span><br><span class="hljs-string">1</span><br><span class="hljs-string">===========序列化方法===========</span><br><span class="hljs-string">1</span><br><span class="hljs-string">===========指令类型===========</span><br><span class="hljs-string">0</span><br><span class="hljs-string">===========请求序号===========</span><br><span class="hljs-string">0</span><br><span class="hljs-string">===========正文长度===========</span><br><span class="hljs-string">224</span><br><span class="hljs-string">===========正文===========</span><br><span class="hljs-string">LoginRequestMessage(super=Message(sequenceId=0, messageType=0), username=Masker, password=123)</span><br><span class="hljs-string">17:39:26.118 [main] DEBUG io.netty.handler.logging.LoggingHandler - [id: 0xembedded, L:embedded - R:embedded] READ COMPLETE</span><br></code></pre></td></tr></table></figure><h4 id="Ⅲ-粘包"><a href="#Ⅲ-粘包" class="headerlink" title="Ⅲ. 粘包"></a>Ⅲ. 粘包</h4><p>因为使用了<strong>长度字段解码器</strong> <code>LengthFieldBasedFrameDecoder</code>在解码时读取出这个用于表明长度的字段，所以不会发生粘包现象</p><h3 id="③-Sharable注解"><a href="#③-Sharable注解" class="headerlink" title="③. @Sharable注解"></a>③. @Sharable注解</h3><p>为了<strong>提高handler的复用率，可以将handler创建为handler对象</strong>，然后在不同的channel中使用该handler对象进行处理操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">LoggingHandler loggingHandler = <span class="hljs-keyword">new</span> LoggingHandler(LogLevel.DEBUG);<br><span class="hljs-comment">// 不同的channel中使用同一个handler对象，提高复用率</span><br>channel1.pipeline().addLast(loggingHandler);<br>channel2.pipeline().addLast(loggingHandler);<br></code></pre></td></tr></table></figure><p>但是<strong>并不是所有的handler都能通过这种方法来提高复用率的</strong>，例如<code>LengthFieldBasedFrameDecoder</code>。如果多个channel中使用同一个<code>LengthFieldBasedFrameDecoder</code>对象，则可能发生如下问题</p><ul><li>channel1中收到了一个半包，<code>LengthFieldBasedFrameDecoder</code>发现不是一条完整的数据，则没有继续向下传播</li><li>此时channel2中也收到了一个半包，<strong>因为两个channel使用了同一个<code>LengthFieldBasedFrameDecoder</code>，存入其中的数据刚好拼凑成了一个完整的数据包</strong>。<code>LengthFieldBasedFrameDecoder</code>让该数据包继续向下传播，<strong>最终引发错误</strong></li></ul><p>为了提高handler的复用率，同时又避免出现一些并发问题，<strong>Netty中原生的handler中用<code>@Sharable</code>注解来标明，该handler能否在多个channel中共享。</strong></p><p><strong>只有带有该注解，才能通过对象的方式被共享</strong>，否则无法被共享</p><h3 id="④-自定义编解码器能否使用-Sharable注解"><a href="#④-自定义编解码器能否使用-Sharable注解" class="headerlink" title="④. 自定义编解码器能否使用@Sharable注解"></a>④. 自定义编解码器能否使用@Sharable注解</h3><p><strong>这需要根据自定义的handler的处理逻辑进行分析</strong></p><p>我们的<code>MessageCodec</code>本身接收的是<code>LengthFieldBasedFrameDecoder</code>处理之后的数据，<strong>那么数据肯定是完整的</strong>，按分析来说是可以添加@Sharable注解的</p><p>但是实际情况我们并<strong>不能</strong>添加该注解，会抛出异常信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">ChannelHandler com.wu.study.netty.advance.protocol.div.MessageCodec is not allowed to be shared<br></code></pre></td></tr></table></figure><ul><li><p>因为<code>MessageCodec</code><strong>继承自</strong><code>ByteToMessageCodec</code>，<code>ByteToMessageCodec</code>类的注解如下</p><p><img src="/image/image-20220130143705801.png" alt="image-20220130143705801"></p><p>这就意味着<code>ByteToMessageCodec</code><strong>不能被多个</strong><code>channel</code>所共享的</p><ul><li>原因：<strong>因为该类的目标是：将<code>ByteBuf</code>转化为<code>Message</code>，意味着传进该<code>handler</code>的数据还未被处理过</strong>。所以传过来的<code>ByteBuf</code><strong>可能并不是完整的数据</strong>，如果共享则会出现问题</li></ul></li></ul><p><strong>如果想要共享，需要怎么办呢？</strong></p><p>继承<code>MessageToMessageDecoder</code><strong>即可。</strong>该类的目标是：<strong>将已经被处理的完整数据再次被处理。</strong></p><p>传过来的<code>Message</code><strong>如果是被处理过的完整数据</strong>，那么被共享也就不会出现问题了，也就可以使用@Sharable注解了。</p><p>实现方式与<code>ByteToMessageCodec</code>类似</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 必须和 &#123;<span class="hljs-doctag">@link</span> LengthFieldBasedFrameDecoder&#125; 一起使用&lt;br&gt;</span><br><span class="hljs-comment"> * 确保接收到的 ByteBuf 消息是完整的</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Haixin Wu</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022/1/30 14:27</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@ChannelHandler</span>.Sharable<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SharableMessageCodec</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">MessageToMessageCodec</span>&lt;<span class="hljs-title">ByteBuf</span>, <span class="hljs-title">Message</span>&gt; </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">encode</span><span class="hljs-params">(ChannelHandlerContext channelHandlerContext, Message msg, List&lt;Object&gt; outList)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        ByteBuf out = channelHandlerContext.alloc().buffer();<br>        <span class="hljs-comment">// 设置魔数 4个字节</span><br>        out.writeBytes(<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[]&#123;<span class="hljs-string">&#x27;M&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;S&#x27;</span>,<span class="hljs-string">&#x27;K&#x27;</span>&#125;);<br>        <span class="hljs-comment">// 设置版本号 1个字节</span><br>        out.writeByte(<span class="hljs-number">1</span>);<br>        <span class="hljs-comment">// 设置序列化方式 1个字节</span><br>        out.writeByte(<span class="hljs-number">1</span>);<br>        <span class="hljs-comment">// 设置指令类型 1个字节</span><br>        out.writeByte(msg.getMessageType());<br>        <span class="hljs-comment">// 设置请求序号 4个字节</span><br>        out.writeInt(msg.getSequenceId());<br>        <span class="hljs-comment">// 为了补齐为16个字节，填充1个字节的数据</span><br>        out.writeByte(<span class="hljs-number">0xff</span>);<br><br>        <span class="hljs-comment">// 获得序列化后的msg</span><br>        ByteArrayOutputStream bos = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream oos = <span class="hljs-keyword">new</span> ObjectOutputStream(bos);<br>        oos.writeObject(msg);<br>        <span class="hljs-keyword">byte</span>[] bytes = bos.toByteArray();<br><br>        <span class="hljs-comment">// 获得并设置正文长度 长度用4个字节标识</span><br>        out.writeInt(bytes.length);<br>        <span class="hljs-comment">// 设置消息正文</span><br>        out.writeBytes(bytes);<br>        outList.add(out);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">decode</span><span class="hljs-params">(ChannelHandlerContext channelHandlerContext, ByteBuf in, List&lt;Object&gt; outList)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">// 获取魔数</span><br>        <span class="hljs-keyword">int</span> magic = in.readInt();<br>        <span class="hljs-comment">// 获取版本号</span><br>        <span class="hljs-keyword">byte</span> version = in.readByte();<br>        <span class="hljs-comment">// 获得序列化方式</span><br>        <span class="hljs-keyword">byte</span> seqType = in.readByte();<br>        <span class="hljs-comment">// 获得指令类型</span><br>        <span class="hljs-keyword">byte</span> messageType = in.readByte();<br>        <span class="hljs-comment">// 获得请求序号</span><br>        <span class="hljs-keyword">int</span> sequenceId = in.readInt();<br>        <span class="hljs-comment">// 移除补齐字节</span><br>        in.readByte();<br>        <span class="hljs-comment">// 获得正文长度</span><br>        <span class="hljs-keyword">int</span> length = in.readInt();<br>        <span class="hljs-comment">// 获得正文</span><br>        <span class="hljs-keyword">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[length];<br>        in.readBytes(bytes, <span class="hljs-number">0</span>, length);<br>        ObjectInputStream ois = <span class="hljs-keyword">new</span> ObjectInputStream(<span class="hljs-keyword">new</span> ByteArrayInputStream(bytes));<br>        Message message = (Message) ois.readObject();<br>        <span class="hljs-comment">// 将信息放入List中，传递给下一个handler</span><br>        outList.add(message);<br><br>        <span class="hljs-comment">// 打印获得的信息正文</span><br>        System.out.println(<span class="hljs-string">&quot;===========魔数===========&quot;</span>);<br>        System.out.println(magic);<br>        System.out.println(<span class="hljs-string">&quot;===========版本号===========&quot;</span>);<br>        System.out.println(version);<br>        System.out.println(<span class="hljs-string">&quot;===========序列化方法===========&quot;</span>);<br>        System.out.println(seqType);<br>        System.out.println(<span class="hljs-string">&quot;===========指令类型===========&quot;</span>);<br>        System.out.println(messageType);<br>        System.out.println(<span class="hljs-string">&quot;===========请求序号===========&quot;</span>);<br>        System.out.println(sequenceId);<br>        System.out.println(<span class="hljs-string">&quot;===========正文长度===========&quot;</span>);<br>        System.out.println(length);<br>        System.out.println(<span class="hljs-string">&quot;===========正文===========&quot;</span>);<br>        System.out.println(message);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Netty</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>NIO学习</title>
    <link href="/2022/01/26/Java%20%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/NIO%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/01/26/Java%20%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/NIO%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<p>通过画线理解同步阻塞、同步非阻塞、同步复用（多路复用）、异步非阻塞</p><h1 id="同步阻塞"><a href="#同步阻塞" class="headerlink" title="同步阻塞"></a>同步阻塞</h1><p><img src="/image/image-20220126173911097.png" alt="image-20220126173911097"></p><h1 id="同步非阻塞"><a href="#同步非阻塞" class="headerlink" title="同步非阻塞"></a>同步非阻塞</h1><h2 id="情况一"><a href="#情况一" class="headerlink" title="情况一"></a>情况一</h2><p><img src="/image/image-20220126174012309.png" alt="image-20220126174012309"></p><h2 id="情况二"><a href="#情况二" class="headerlink" title="情况二"></a>情况二</h2><p><img src="/image/image-20220126174059130.png" alt="image-20220126174059130"></p><h1 id="异步非阻塞"><a href="#异步非阻塞" class="headerlink" title="异步非阻塞"></a>异步非阻塞</h1><p><img src="/image/image-20220126174201853.png" alt="image-20220126174201853"></p>]]></content>
    
    
    <categories>
      
      <category>Java 网络编程</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Netty入门学习</title>
    <link href="/2022/01/24/Netty/Netty%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/01/24/Netty/Netty%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><figure class="highlight awk"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs awk">本文参考了码友 Nyima 的学习笔记<br>https:<span class="hljs-regexp">//</span>nyimac.gitee.io<span class="hljs-regexp">/2021/</span><span class="hljs-number">04</span><span class="hljs-regexp">/25/</span>Netty%E5%<span class="hljs-number">9</span>F%BA%E7%A1%<span class="hljs-number">80</span>/<br></code></pre></td></tr></table></figure><h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><h2 id="1-什么是Netty"><a href="#1-什么是Netty" class="headerlink" title="1.  什么是Netty"></a>1.  什么是Netty</h2><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs applescript">Netty 是一个异步的、基于事件驱动的网络应用框架，用于快速开发可维护、高性能的网络服务器和客户端<br><br>Netty <span class="hljs-keyword">is</span> an asynchronous event-driven network <span class="hljs-built_in">application</span> framework<br><span class="hljs-keyword">for</span> rapid development <span class="hljs-keyword">of</span> maintainable high performance protocol servers &amp; clients.<br></code></pre></td></tr></table></figure><h2 id="2-注意"><a href="#2-注意" class="headerlink" title="2.  注意"></a>2.  注意</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">netty的异步还是基于多路复用的，并没有实现真正意义上的异步IO<br></code></pre></td></tr></table></figure><h2 id="3-优势"><a href="#3-优势" class="headerlink" title="3. 优势"></a>3. 优势</h2><h3 id="传统-NIO"><a href="#传统-NIO" class="headerlink" title="传统 NIO"></a>传统 NIO</h3><ul><li>工作量大</li><li>bug 多</li><li>需要自己构建协议</li><li>解决了 TCP 传输问题，如粘包、半包</li><li>因为 bug 的存在，会导致 epoll 空轮询导致 CPU 占用 100%</li></ul><h3 id="Netty"><a href="#Netty" class="headerlink" title="Netty"></a>Netty</h3><ul><li>API 增强，易于使用，不需要做大量重复事情</li><li>增强类，如：</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">FastThreadLocal</span> =&gt; ThreadLocal<br><span class="hljs-attr">ByteBuf</span> =&gt; ByteBuffer<br></code></pre></td></tr></table></figure><h2 id="4-为什么Netty大量使用了异步？"><a href="#4-为什么Netty大量使用了异步？" class="headerlink" title="4. 为什么Netty大量使用了异步？"></a>4. 为什么Netty大量使用了异步？</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">简而言之就是，以响应速度换取了吞吐量<br>详情看 https:<span class="hljs-regexp">//</span>www.bilibili.com<span class="hljs-regexp">/video/</span>BV1py4y1E7oA?p=<span class="hljs-number">70</span>&amp;spm_id_from=pageDriver<br></code></pre></td></tr></table></figure><h2 id="5-读与写"><a href="#5-读与写" class="headerlink" title="5. 读与写"></a>5. 读与写</h2><p>我最初在认识上有这样的误区，认为只有在netty，nio这样的多路复用I0模型时，读写才不会相互阻塞才可以实现高效的双向通信，</p><p><strong>但实际上，Java Socket是全双工的：在任意时刻，线路上存在A到B和B到A的双向信号传输。</strong><br><strong>即使是阻塞lO，读和写是可以同时进行的，只要分别采用读线程和写线程即可，读不会阻塞写、写也不会阻塞读</strong></p><h1 id="二、案例"><a href="#二、案例" class="headerlink" title="二、案例"></a>二、案例</h1><h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloServer</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">new</span> ServerBootstrap()<br>                .group(<span class="hljs-keyword">new</span> NioEventLoopGroup())<br>                .channel(NioServerSocketChannel.class)<br>                .childHandler(<span class="hljs-keyword">new</span> ChannelInitializer&lt;NioSocketChannel&gt;() &#123;<br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initChannel</span><span class="hljs-params">(NioSocketChannel nioSocketChannel)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>                        nioSocketChannel.pipeline().addLast(<span class="hljs-keyword">new</span> StringDecoder());<br>                        nioSocketChannel.pipeline().addLast(<span class="hljs-keyword">new</span> SimpleChannelInboundHandler&lt;String&gt;() &#123;<br>                            <span class="hljs-meta">@Override</span><br>                            <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">channelRead0</span><span class="hljs-params">(ChannelHandlerContext channelHandlerContext, String s)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>                                System.out.println(s);<br>                            &#125;<br>                        &#125;);<br>                    &#125;<br>                &#125;).bind(<span class="hljs-number">8080</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloClient</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        <span class="hljs-keyword">new</span> Bootstrap()<br>                .group(<span class="hljs-keyword">new</span> NioEventLoopGroup())<br>                .channel(NioSocketChannel.class)<br>                .handler(<span class="hljs-keyword">new</span> ChannelInitializer&lt;Channel&gt;() &#123;<br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initChannel</span><span class="hljs-params">(Channel channel)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>                        channel.pipeline().addLast(<span class="hljs-keyword">new</span> StringEncoder());<br>                    &#125;<br>                &#125;)<br>                .connect(<span class="hljs-keyword">new</span> InetSocketAddress(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">8080</span>))<br>                .sync()<br>                .channel()<br>                .writeAndFlush(<span class="hljs-string">&quot;hello world&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h2><p><img src="/image/image-20220124230644911.png" alt="image-20220124230644911"></p><h1 id="三、重要组件"><a href="#三、重要组件" class="headerlink" title="三、重要组件"></a>三、重要组件</h1><h2 id="1-EventLoop-和-EventLoopGroup"><a href="#1-EventLoop-和-EventLoopGroup" class="headerlink" title="1. EventLoop 和 EventLoopGroup"></a>1. EventLoop 和 EventLoopGroup</h2><h3 id="①-EventLoopGroup"><a href="#①-EventLoopGroup" class="headerlink" title="①. EventLoopGroup"></a>①. EventLoopGroup</h3><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs julia">事件循环组对象<br><br>本质上是一组EventLoop对象<br><span class="hljs-built_in">Channel</span> 一般会调用 EventLoopGroup 的 register 方法来绑定其中一个 EventLoop，<br>后续这个 <span class="hljs-built_in">Channel</span> 上的 <span class="hljs-built_in">IO</span> 事件都会由此 EventLoop 来处理<br>目的是为了保证 <span class="hljs-built_in">IO</span> 事件处理时的线程安全<br></code></pre></td></tr></table></figure><h4 id="Ⅰ-继承关系"><a href="#Ⅰ-继承关系" class="headerlink" title="Ⅰ. 继承关系"></a>Ⅰ. 继承关系</h4><p><img src="/image/image-20220125003702897.png" alt="image-20220125003702897"></p><h5 id="EventExecutorGroup"><a href="#EventExecutorGroup" class="headerlink" title="EventExecutorGroup"></a>EventExecutorGroup</h5><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit">实现了 Iterable 接口提供遍历 EventLoop 的能力<br>另有 <span class="hljs-keyword">next</span> 方法获取集合中下一个 EventLoop<br></code></pre></td></tr></table></figure><h3 id="②-EventLoop"><a href="#②-EventLoop" class="headerlink" title="②. EventLoop"></a>②. EventLoop</h3><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs julia">事件循环对象<br><br>本质上是一个单线程执行器（同时维护了一个 Selector），<br>里面有 run 方法处理 <span class="hljs-built_in">Channel</span> 上源源不断的 <span class="hljs-built_in">IO</span> 事件<br></code></pre></td></tr></table></figure><h4 id="Ⅰ-继承关系-1"><a href="#Ⅰ-继承关系-1" class="headerlink" title="Ⅰ.  继承关系"></a>Ⅰ.  继承关系</h4><p><img src="/image/image-20220125002442025.png" alt="image-20220125002442025"></p><h5 id="ScheduledExecutorService"><a href="#ScheduledExecutorService" class="headerlink" title="ScheduledExecutorService"></a>ScheduledExecutorService</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">提供了线程池中的所有方法<br></code></pre></td></tr></table></figure><h5 id="OrderedEventExecutor"><a href="#OrderedEventExecutor" class="headerlink" title="OrderedEventExecutor"></a>OrderedEventExecutor</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">提供了 <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">inEventLoop</span><span class="hljs-params">(Thread thread)</span> 方法判断一个线程是否属于 EventLoop</span><br><span class="hljs-function">提供了 parent 方法来看看自己属于哪个 EventLoopGroup</span><br></code></pre></td></tr></table></figure><h3 id="③-普通任务"><a href="#③-普通任务" class="headerlink" title="③. 普通任务"></a>③. 普通任务</h3><h4 id="Ⅰ-代码"><a href="#Ⅰ-代码" class="headerlink" title="Ⅰ. 代码"></a>Ⅰ. 代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DefaultTaskTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// DefaultEventLoopGroup group1 = new DefaultEventLoopGroup(); 普通，定时任务</span><br><br>        <span class="hljs-comment">// io 事件，普通，定时任务</span><br>        NioEventLoopGroup group = <span class="hljs-keyword">new</span> NioEventLoopGroup(<span class="hljs-number">2</span>);<br>        <span class="hljs-comment">// next方法实现了一个轮询，达到负载均衡效果</span><br>        System.out.println(group.next());<br>        System.out.println(group.next());<br>        System.out.println(group.next());<br>        System.out.println(group.next());<br>        System.out.println(group.next());<br>        <span class="hljs-comment">// 执行普通任务，异步处理，提高工作效率</span><br>        group.next().submit(() -&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            log.debug(<span class="hljs-string">&quot;ok&quot;</span>);<br>        &#125;);<br>        group.next().submit(() -&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            log.debug(<span class="hljs-string">&quot;ok&quot;</span>);<br>        &#125;);<br>        log.debug(<span class="hljs-string">&quot;main&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/image-20220125214434144.png" alt="image-20220125214434144"></p><h3 id="④-定时任务"><a href="#④-定时任务" class="headerlink" title="④. 定时任务"></a>④. 定时任务</h3><h4 id="Ⅰ-代码-1"><a href="#Ⅰ-代码-1" class="headerlink" title="Ⅰ. 代码"></a>Ⅰ. 代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TimingTaskTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// DefaultEventLoopGroup group1 = new DefaultEventLoopGroup(); 普通，定时任务</span><br><br>        <span class="hljs-comment">// io 事件，普通，定时任务</span><br>        NioEventLoopGroup group = <span class="hljs-keyword">new</span> NioEventLoopGroup(<span class="hljs-number">2</span>);<br>        <span class="hljs-comment">// next方法实现了一个轮询，达到负载均衡效果</span><br>        System.out.println(group.next());<br>        System.out.println(group.next());<br>        System.out.println(group.next());<br>        System.out.println(group.next());<br>        System.out.println(group.next());<br>        <span class="hljs-comment">// 执行定时任务，异步处理，每隔 1 秒打印一个 ok</span><br>        group.next().scheduleAtFixedRate(() -&gt; &#123;<br>            log.debug(<span class="hljs-string">&quot;ok&quot;</span>);<br>        &#125;, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, TimeUnit.SECONDS);<br>        log.debug(<span class="hljs-string">&quot;main&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/image-20220125214905102.png" alt="image-20220125214905102"></p><h3 id="⑤-IO任务"><a href="#⑤-IO任务" class="headerlink" title="⑤. IO任务"></a>⑤. IO任务</h3><h4 id="Ⅰ-客户端代码"><a href="#Ⅰ-客户端代码" class="headerlink" title="Ⅰ. 客户端代码"></a>Ⅰ. 客户端代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IOTestClientTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        Channel channel = <span class="hljs-keyword">new</span> Bootstrap()<br>                .group(<span class="hljs-keyword">new</span> NioEventLoopGroup())<br>                .channel(NioSocketChannel.class)<br>                .handler(<span class="hljs-keyword">new</span> ChannelInitializer&lt;NioSocketChannel&gt;() &#123;<br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initChannel</span><span class="hljs-params">(NioSocketChannel ch)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>                        ch.pipeline().addLast(<span class="hljs-keyword">new</span> StringEncoder());<br>                    &#125;<br>                &#125;)<br>                .connect(<span class="hljs-keyword">new</span> InetSocketAddress(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">8080</span>))<br>                .sync()<br>                .channel();<br>        System.out.println(channel);<br>        System.out.println(<span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Ⅱ-服务端代码"><a href="#Ⅱ-服务端代码" class="headerlink" title="Ⅱ. 服务端代码"></a>Ⅱ. 服务端代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IOTaskServerTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">new</span> ServerBootstrap()<br>                .group(<span class="hljs-keyword">new</span> NioEventLoopGroup())<br>                .channel(NioServerSocketChannel.class)<br>                .childHandler(<span class="hljs-keyword">new</span> ChannelInitializer&lt;NioSocketChannel&gt;() &#123;<br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initChannel</span><span class="hljs-params">(NioSocketChannel ch)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>                        ch.pipeline().addLast(<span class="hljs-keyword">new</span> ChannelInboundHandlerAdapter() &#123;<br>                            <span class="hljs-meta">@Override</span><br>                            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">channelRead</span><span class="hljs-params">(ChannelHandlerContext ctx, Object msg)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>                                ByteBuf buf = (ByteBuf) msg;<br>                                log.debug(buf.toString(Charset.defaultCharset()));<br>                            &#125;<br>                        &#125;);<br>                    &#125;<br>                &#125;)<br>                .bind(<span class="hljs-number">8080</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/image-20220125220755942.png" alt="image-20220125220755942"></p><p><img src="/image/image-20220125220905355.png" alt="image-20220125220905355"></p><h3 id="⑥-分工细化"><a href="#⑥-分工细化" class="headerlink" title="⑥. 分工细化"></a>⑥. 分工细化</h3><h4 id="Ⅰ-服务端代码"><a href="#Ⅰ-服务端代码" class="headerlink" title="Ⅰ. 服务端代码"></a>Ⅰ. 服务端代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DivisionOfLaborTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 细分2. 创建一个独立的 EventLoopGroup</span><br>        DefaultEventLoopGroup group = <span class="hljs-keyword">new</span> DefaultEventLoopGroup();<br>        <span class="hljs-keyword">new</span> ServerBootstrap()<br>                <span class="hljs-comment">//细分1.     ParentGroup 负责 accept    childrenGroup 负责 读写</span><br>                .group(<span class="hljs-keyword">new</span> NioEventLoopGroup(), <span class="hljs-keyword">new</span> NioEventLoopGroup(<span class="hljs-number">2</span>))<br>                .channel(NioServerSocketChannel.class)<br>                .childHandler(<span class="hljs-keyword">new</span> ChannelInitializer&lt;NioSocketChannel&gt;() &#123;<br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initChannel</span><span class="hljs-params">(NioSocketChannel ch)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>                        ch.pipeline().addLast(<span class="hljs-string">&quot;handler1&quot;</span>, <span class="hljs-keyword">new</span> ChannelInboundHandlerAdapter() &#123;<br>                            <span class="hljs-meta">@Override</span><br>                            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">channelRead</span><span class="hljs-params">(ChannelHandlerContext ctx, Object msg)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>                                ByteBuf buf = (ByteBuf) msg;<br>                                log.debug(buf.toString(Charset.defaultCharset()));<br>                                ctx.fireChannelRead(msg);<br>                            &#125;<br>                            <span class="hljs-comment">// 切换为另一个 EventLoopGroup</span><br>                        &#125;).addLast(group, <span class="hljs-string">&quot;handler2&quot;</span>, <span class="hljs-keyword">new</span> ChannelInboundHandlerAdapter() &#123;<br>                            <span class="hljs-meta">@Override</span><br>                            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">channelRead</span><span class="hljs-params">(ChannelHandlerContext ctx, Object msg)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>                                ByteBuf buf = (ByteBuf) msg;<br>                                log.debug(buf.toString(Charset.defaultCharset()));<br>                            &#125;<br>                        &#125;);<br>                    &#125;<br>                &#125;)<br>                .bind(<span class="hljs-number">8080</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/image-20220125223117832.png" alt="image-20220125223117832"></p><h3 id="⑦-切换线程的原理"><a href="#⑦-切换线程的原理" class="headerlink" title="⑦. 切换线程的原理"></a>⑦. 切换线程的原理</h3><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">在 ⑥. 分工细化中， 出现了 ha<span class="hljs-symbol">ndler1</span> 线程转换为 ha<span class="hljs-symbol">ndler2</span> 线程，其原理如下：<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">invokeChannelRead</span><span class="hljs-params">(<span class="hljs-keyword">final</span> AbstractChannelHandlerContext next, Object msg)</span> </span>&#123;<br>    <span class="hljs-keyword">final</span> Object m = next.pipeline.touch(ObjectUtil.checkNotNull(msg, <span class="hljs-string">&quot;msg&quot;</span>), next);<br>    <span class="hljs-comment">// 获得下一个EventLoop, excutor 即为 EventLoopGroup</span><br>    EventExecutor executor = next.executor();<br>    <br>    <span class="hljs-comment">// 如果下一个EventLoop 在当前的 EventLoopGroup中</span><br>    <span class="hljs-keyword">if</span> (executor.inEventLoop()) &#123;<br>        <span class="hljs-comment">// 使用当前 EventLoopGroup 中的 EventLoop 来处理任务</span><br>        next.invokeChannelRead(m);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 否则让另一个 EventLoopGroup 中的 EventLoop 来创建任务并执行</span><br>        executor.execute(<span class="hljs-keyword">new</span> Runnable() &#123;<br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>                next.invokeChannelRead(m);<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs aspectj">简而言之就是，如果两个 <span class="hljs-keyword">handler</span> 绑定的是同一个线程，那么就直接调用<br>否则，把要调用的代码封装为一个任务对象，由下一个 <span class="hljs-keyword">handler</span> 的线程来执行<br></code></pre></td></tr></table></figure><h2 id="2-Channel"><a href="#2-Channel" class="headerlink" title="2. Channel"></a>2. Channel</h2><p>Channel 的常用方法</p><ul><li>close() 可以用来关闭Channel</li><li>closeFuture() 用来处理 Channel 的关闭<ul><li>sync 方法作用是同步等待 Channel 关闭</li><li>而 addListener 方法是异步等待 Channel 关闭</li></ul></li><li>pipeline() 方法用于添加处理器</li><li>write() 方法将数据写入<ul><li>因为缓冲机制，数据被写入到 Channel 中以后，不会立即被发送</li><li><strong>只有当缓冲满了或者调用了flush()方法后</strong>，才会将数据通过 Channel 发送出去</li></ul></li><li>writeAndFlush() 方法将数据写入并<strong>立即发送（刷出）</strong></li></ul><h3 id="①-ChannelFuture"><a href="#①-ChannelFuture" class="headerlink" title="①. ChannelFuture"></a>①. ChannelFuture</h3><h4 id="Ⅰ-同步连接"><a href="#Ⅰ-同步连接" class="headerlink" title="Ⅰ. 同步连接"></a>Ⅰ. 同步连接</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SynConnectionChannelFutureTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, InterruptedException </span>&#123;<br>        ChannelFuture channelFuture = <span class="hljs-keyword">new</span> Bootstrap()<br>                .group(<span class="hljs-keyword">new</span> NioEventLoopGroup())<br>                .channel(NioSocketChannel.class)<br>                .handler(<span class="hljs-keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;<br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initChannel</span><span class="hljs-params">(SocketChannel socketChannel)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>                        socketChannel.pipeline().addLast(<span class="hljs-keyword">new</span> StringEncoder());<br>                    &#125;<br>                &#125;)<br>                <span class="hljs-comment">// 该方法为异步非阻塞方法，主线程调用后不会被阻塞，真正去执行连接操作的是NIO线程</span><br>                <span class="hljs-comment">// NIO线程：NioEventLoop 中的线程</span><br>                .connect(<span class="hljs-keyword">new</span> InetSocketAddress(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">8080</span>));<br><br>        <span class="hljs-comment">// 该方法用于等待连接真正建立</span><br>        channelFuture.sync();<br><br>        <span class="hljs-comment">// 获取客户端-服务器之间的Channel对象</span><br>        Channel channel = channelFuture.channel();<br>        channel.writeAndFlush(<span class="hljs-string">&quot;hello world&quot;</span>);<br>        System.in.read();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果我们去掉<code>channelFuture.sync()</code>方法，会服务器无法收到<code>hello world</code></p><p>这是因为建立连接(connect)的过程是<strong>异步非阻塞</strong>的，若不通过<code>sync()</code>方法阻塞主线程，等待连接真正建立，这时通过 channelFuture.channel() <strong>拿到的 Channel 对象，并不是真正与服务器建立好连接的 Channel</strong>，也就没法将信息正确的传输给服务器端</p><p>所以需要通过<code>channelFuture.sync()</code>方法，阻塞主线程，<strong>同步处理结果</strong>，等待连接真正建立好以后，再去获得 Channel 传递数据。使用该方法，获取 Channel 和发送数据的线程<strong>都是主线程</strong></p><h4 id="Ⅱ-异步连接"><a href="#Ⅱ-异步连接" class="headerlink" title="Ⅱ. 异步连接"></a>Ⅱ. 异步连接</h4><p>下面还有一种方法，用于<strong>异步</strong>获取建立连接后的 Channel 和发送数据，使得执行这些操作的线程是 NIO 线程（去执行connect操作的线程）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AsyncConnectionChannelFutureTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, InterruptedException </span>&#123;<br>        ChannelFuture channelFuture = <span class="hljs-keyword">new</span> Bootstrap()<br>                .group(<span class="hljs-keyword">new</span> NioEventLoopGroup())<br>                .channel(NioSocketChannel.class)<br>                .handler(<span class="hljs-keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;<br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initChannel</span><span class="hljs-params">(SocketChannel socketChannel)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>                        socketChannel.pipeline().addLast(<span class="hljs-keyword">new</span> StringEncoder());<br>                    &#125;<br>                &#125;)<br>                <span class="hljs-comment">// 该方法为异步非阻塞方法，主线程调用后不会被阻塞，真正去执行连接操作的是NIO线程</span><br>                <span class="hljs-comment">// NIO线程：NioEventLoop 中的线程</span><br>                .connect(<span class="hljs-keyword">new</span> InetSocketAddress(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">8080</span>));<br><br>        <span class="hljs-comment">// 当connect方法执行完毕后，也就是连接真正建立后</span><br>        <span class="hljs-comment">// 会在NIO线程中调用operationComplete方法</span><br>        channelFuture.addListener(<span class="hljs-keyword">new</span> ChannelFutureListener() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">operationComplete</span><span class="hljs-params">(ChannelFuture channelFuture)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>                Channel channel = channelFuture.channel();<br>                channel.writeAndFlush(<span class="hljs-string">&quot;hello world&quot;</span>);<br>            &#125;<br>        &#125;);<br>        System.in.read();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Ⅲ-同步关闭"><a href="#Ⅲ-同步关闭" class="headerlink" title="Ⅲ. 同步关闭"></a>Ⅲ. 同步关闭</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SynCloseChannelFutureClientTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        NioEventLoopGroup group = <span class="hljs-keyword">new</span> NioEventLoopGroup();<br>        ChannelFuture channelFuture = <span class="hljs-keyword">new</span> Bootstrap()<br>                .group(group)<br>                .channel(NioSocketChannel.class)<br>                .handler(<span class="hljs-keyword">new</span> ChannelInitializer&lt;NioSocketChannel&gt;() &#123;<br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initChannel</span><span class="hljs-params">(NioSocketChannel ch)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>                        ch.pipeline().addLast(<span class="hljs-keyword">new</span> LoggingHandler(LogLevel.DEBUG));<br>                        ch.pipeline().addLast(<span class="hljs-keyword">new</span> StringEncoder());<br>                    &#125;<br>                &#125;).connect(<span class="hljs-keyword">new</span> InetSocketAddress(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">8080</span>));<br>        Channel channel = channelFuture.sync().channel();<br>        <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>            Scanner scanner = <span class="hljs-keyword">new</span> Scanner(System.in);<br>            <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>                String line = scanner.nextLine();<br>                <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;q&quot;</span>.equals(line)) &#123;<br>                    channel.close();<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                channel.writeAndFlush(line);<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;input&quot;</span>).start();<br>        <span class="hljs-comment">// 获取 ClosedFuture 对象</span><br>        ChannelFuture closeFuture = channel.closeFuture();<br>        System.out.println(<span class="hljs-string">&quot;等待关闭&quot;</span>);<br>        closeFuture.sync();<br>        System.out.println(<span class="hljs-string">&quot;处理关闭之后的操作&quot;</span>);<br>        <span class="hljs-comment">// 优雅的关闭 group 内的线程</span><br>        group.shutdownGracefully();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/image-20220126160840875.png" alt="image-20220126160840875"></p><h4 id="Ⅳ-异步关闭"><a href="#Ⅳ-异步关闭" class="headerlink" title="Ⅳ. 异步关闭"></a>Ⅳ. 异步关闭</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AsyncCloseChannelFutureClientTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        NioEventLoopGroup group = <span class="hljs-keyword">new</span> NioEventLoopGroup();<br>        ChannelFuture channelFuture = <span class="hljs-keyword">new</span> Bootstrap()<br>                .group(group)<br>                .channel(NioSocketChannel.class)<br>                .handler(<span class="hljs-keyword">new</span> ChannelInitializer&lt;NioSocketChannel&gt;() &#123;<br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initChannel</span><span class="hljs-params">(NioSocketChannel ch)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>                        ch.pipeline().addLast(<span class="hljs-keyword">new</span> LoggingHandler(LogLevel.DEBUG));<br>                        ch.pipeline().addLast(<span class="hljs-keyword">new</span> StringEncoder());<br>                    &#125;<br>                &#125;).connect(<span class="hljs-keyword">new</span> InetSocketAddress(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">8080</span>));<br>        Channel channel = channelFuture.sync().channel();<br>        <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>            Scanner scanner = <span class="hljs-keyword">new</span> Scanner(System.in);<br>            <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>                String line = scanner.nextLine();<br>                <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;q&quot;</span>.equals(line)) &#123;<br>                    channel.close();<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                channel.writeAndFlush(line);<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;input&quot;</span>).start();<br>        <span class="hljs-comment">// 获取 ClosedFuture 对象</span><br>        ChannelFuture closeFuture = channel.closeFuture();<br>        System.out.println(<span class="hljs-string">&quot;等待关闭&quot;</span>);<br>        closeFuture.addListener((ChannelFutureListener) channelFuture1 -&gt; &#123;<br>            System.out.println(<span class="hljs-string">&quot;处理关闭之后的操作&quot;</span>);<br>            <span class="hljs-comment">// 优雅的关闭 group 内的线程</span><br>            group.shutdownGracefully();<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/image-20220126161249302.png" alt="image-20220126161249302"></p><h4 id="Ⅴ-优雅地关闭"><a href="#Ⅴ-优雅地关闭" class="headerlink" title="Ⅴ. 优雅地关闭"></a>Ⅴ. 优雅地关闭</h4><p>在上述两种关闭期间 输入 <code>q</code> 后并不会使服务真正地关闭</p><p>是因为 <strong>NioEventLoopGroup</strong> 仍存在线程<strong>未被关闭</strong></p><p>所以可以使用 <code>shutdownGracefully()</code> 方法进行关闭</p><h2 id="3-Future-和-Promise"><a href="#3-Future-和-Promise" class="headerlink" title="3. Future 和 Promise"></a>3. Future 和 Promise</h2><p>netty 中的 Future 与 jdk 中的 Future <strong>同名</strong>，但是是两个接口</p><p>netty 的 Future 继承自 jdk 的 Future，而 Promise 又对 netty Future 进行了扩展</p><ul><li>jdk Future 只能同步等待任务结束（或成功、或失败）才能得到结果</li><li>netty Future 可以同步等待任务结束得到结果，也可以异步方式得到结果，但<strong>都是要等任务结束</strong></li><li>netty Promise 不仅有 netty Future 的功能，而且脱离了任务独立存在，<strong>只作为两个线程间传递结果的容器</strong></li></ul><table><thead><tr><th>功能/名称</th><th>jdk Future</th><th>netty Future</th><th>Promise</th></tr></thead><tbody><tr><td>cancel</td><td>取消任务</td><td>-</td><td>-</td></tr><tr><td>isCanceled</td><td>任务是否取消</td><td>-</td><td>-</td></tr><tr><td>isDone</td><td>任务是否完成，不能区分成功失败</td><td>-</td><td>-</td></tr><tr><td>get</td><td>获取任务结果，阻塞等待</td><td>-</td><td>-</td></tr><tr><td>getNow</td><td>-</td><td>获取任务结果，非阻塞，还未产生结果时返回 null</td><td>-</td></tr><tr><td>await</td><td>-</td><td>等待任务结束，如果任务失败，<strong>不会抛异常</strong>，而是通过 isSuccess 判断</td><td>-</td></tr><tr><td>sync</td><td>-</td><td>等待任务结束，如果任务失败，抛出异常</td><td>-</td></tr><tr><td>isSuccess</td><td>-</td><td>判断任务是否成功</td><td>-</td></tr><tr><td>cause</td><td>-</td><td>获取失败信息，非阻塞，如果没有失败，返回null</td><td>-</td></tr><tr><td>addLinstener</td><td>-</td><td>添加回调，异步接收结果</td><td>-</td></tr><tr><td>setSuccess</td><td>-</td><td>-</td><td>设置成功结果</td></tr><tr><td>setFailure</td><td>-</td><td>-</td><td>设置失败结果</td></tr></tbody></table><h3 id="①-JDK-的-Future"><a href="#①-JDK-的-Future" class="headerlink" title="①. JDK 的 Future"></a>①. JDK 的 Future</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JDKFutureTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException </span>&#123;<br>        <span class="hljs-comment">// 1.线程池</span><br>        ExecutorService executorService = Executors.newFixedThreadPool(<span class="hljs-number">2</span>);<br>        <span class="hljs-comment">// 2.提交任务</span><br>        Future&lt;Integer&gt; future = executorService.submit(() -&gt; &#123;<br>            System.out.println(<span class="hljs-string">&quot;执行计算&quot;</span>);<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">50</span>;<br>        &#125;);<br>        <span class="hljs-comment">// 3.主线程通过 future 来获取结果</span><br>        System.out.println(<span class="hljs-string">&quot;等待结果&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;结果是：&quot;</span> + future.get());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/image-20220126205254634.png" alt="image-20220126205254634"></p><h3 id="②-Netty-的-Future"><a href="#②-Netty-的-Future" class="headerlink" title="②. Netty 的 Future"></a>②. Netty 的 Future</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NettyFutureTest</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        async();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sync</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException </span>&#123;<br>        NioEventLoopGroup group = <span class="hljs-keyword">new</span> NioEventLoopGroup();<br>        EventLoop eventLoop = group.next();<br>        Future&lt;Integer&gt; future = eventLoop.submit(() -&gt; &#123;<br>            System.out.println(<span class="hljs-string">&quot;执行计算&quot;</span>);<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">70</span>;<br>        &#125;);<br>        System.out.println(<span class="hljs-string">&quot;等待结果&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;结果是：&quot;</span> + future.get());<br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">async</span><span class="hljs-params">()</span> </span>&#123;<br>        NioEventLoopGroup group = <span class="hljs-keyword">new</span> NioEventLoopGroup();<br>        EventLoop eventLoop = group.next();<br>        Future&lt;Integer&gt; future = eventLoop.submit(() -&gt; &#123;<br>            log.debug(<span class="hljs-string">&quot;执行计算&quot;</span>);<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">70</span>;<br>        &#125;);<br>        future.addListener(<span class="hljs-keyword">new</span> GenericFutureListener&lt;Future&lt;? <span class="hljs-keyword">super</span> Integer&gt;&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">operationComplete</span><span class="hljs-params">(Future&lt;? <span class="hljs-keyword">super</span> Integer&gt; future)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>                log.debug(<span class="hljs-string">&quot;结果是：&quot;</span> + future.get());<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="③-Netty-的-Promise"><a href="#③-Netty-的-Promise" class="headerlink" title="③. Netty 的 Promise"></a>③. Netty 的 Promise</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NettyPromiseTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException </span>&#123;<br>        <span class="hljs-comment">// 1. 准备 EventLoop 对象</span><br>        EventLoop eventLoop = <span class="hljs-keyword">new</span> NioEventLoopGroup().next();<br>        <span class="hljs-comment">// 2. 可以主动创建 promise 结果容器对象</span><br>        DefaultPromise&lt;Integer&gt; promise = <span class="hljs-keyword">new</span> DefaultPromise&lt;&gt;(eventLoop);<br>        <span class="hljs-comment">// 3. 启动一个线程执行计算，计算完毕后向 promise 中填入结果</span><br>        <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>            log.debug(<span class="hljs-string">&quot;开始计算&quot;</span>);<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            promise.setSuccess(<span class="hljs-number">80</span>);<br>        &#125;).start();<br>        <span class="hljs-comment">// 4. 接收结果的线程</span><br>        log.debug(<span class="hljs-string">&quot;等待结果&quot;</span>);<br>        log.debug(<span class="hljs-string">&quot;结果是：&#123;&#125;&quot;</span>, promise.get());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-PipeLine-和-Handler"><a href="#4-PipeLine-和-Handler" class="headerlink" title="4. PipeLine 和 Handler"></a>4. PipeLine 和 Handler</h2><p><code>ChannelHandler</code> 用来处理 <code>Channel</code> 上的各种事件，分为<strong>入站、出站</strong>两种。</p><p>所有 <code>ChannelHandler</code> 被连成—串，就是 Pipeline</p><ul><li>入站处理器通常是 <code>ChannellnboundHandlerAdapter</code> 的子类，主要用来读取客户端数据，写回结果</li><li>出站处理器通常是 <code>ChannelOutboundHandlerAdapter</code> 的子类，主要对写回结果进行加工</li></ul><p>打个比喻，每个 <code>Channel</code> 是一个产品的加工车间，管道是车间中的流水线，<code>ChanneHandler</code> 就是流水线上的各道工序，而后面要讲的 <code>ByteBuf</code> 是原材料，经过很多工序的加工:先经过一道道入站工序，再经过一道道出站工序最终变成产品</p><h3 id="①-Pipeline"><a href="#①-Pipeline" class="headerlink" title="①. Pipeline"></a>①. Pipeline</h3><p>通过channel.pipeline().addLast(name, handler)添加handler时，<strong>记得给handler取名字</strong>。</p><p>这样可以调用pipeline的<strong>addAfter、addBefore等方法更灵活地向pipeline中添加handler</strong></p><p>handler需要放入通道的pipeline中，才能根据放入顺序来使用handler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PipelineTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">new</span> ServerBootstrap()<br>                .group(<span class="hljs-keyword">new</span> NioEventLoopGroup())<br>                .channel(NioServerSocketChannel.class)<br>                .childHandler(<span class="hljs-keyword">new</span> ChannelInitializer&lt;NioSocketChannel&gt;() &#123;<br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initChannel</span><span class="hljs-params">(NioSocketChannel ch)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>                        <span class="hljs-comment">// 1. 通过 Channel 拿到 pipeline</span><br>                        ChannelPipeline pipeline = ch.pipeline();<br>                        <span class="hljs-comment">// 2. 为 pipeline 添加 处理器     head -&gt; h1 -&gt; tail</span><br>                        pipeline.addLast(<span class="hljs-string">&quot;h1&quot;</span>, <span class="hljs-keyword">new</span> ChannelInboundHandlerAdapter() &#123;<br>                            <span class="hljs-meta">@Override</span><br>                            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">channelRead</span><span class="hljs-params">(ChannelHandlerContext ctx, Object msg)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>                                log.debug(<span class="hljs-string">&quot;1&quot;</span>);<br>                                <span class="hljs-keyword">super</span>.channelRead(ctx, msg);<br>                            &#125;<br>                        &#125;);<br>                        <span class="hljs-comment">// head -&gt; h1 -&gt; h2 -&gt; tail</span><br>                        pipeline.addLast(<span class="hljs-string">&quot;h2&quot;</span>, <span class="hljs-keyword">new</span> ChannelInboundHandlerAdapter() &#123;<br>                            <span class="hljs-meta">@Override</span><br>                            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">channelRead</span><span class="hljs-params">(ChannelHandlerContext ctx, Object msg)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>                                log.debug(<span class="hljs-string">&quot;2&quot;</span>);<br>                                <span class="hljs-keyword">super</span>.channelRead(ctx, msg);<br>                            &#125;<br>                        &#125;);<br>                        <span class="hljs-comment">// head -&gt; h1 -&gt; h2 -&gt; h3 -&gt; tail</span><br>                        pipeline.addLast(<span class="hljs-string">&quot;h3&quot;</span>, <span class="hljs-keyword">new</span> ChannelInboundHandlerAdapter() &#123;<br>                            <span class="hljs-meta">@Override</span><br>                            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">channelRead</span><span class="hljs-params">(ChannelHandlerContext ctx, Object msg)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>                                log.debug(<span class="hljs-string">&quot;3&quot;</span>);<br>                                <span class="hljs-keyword">super</span>.channelRead(ctx, msg);<br>                                <span class="hljs-comment">// 3. 触发写事件</span><br>                                ch.writeAndFlush(ctx.alloc().buffer().writeBytes(<span class="hljs-string">&quot;server&quot;</span>.getBytes()));<br>                            &#125;<br>                        &#125;);<br>                        <span class="hljs-comment">// head -&gt; h1 -&gt; h2 -&gt; h3 -&gt; h4 -&gt; tail</span><br>                        pipeline.addLast(<span class="hljs-string">&quot;h4&quot;</span>, <span class="hljs-keyword">new</span> ChannelOutboundHandlerAdapter() &#123;<br>                            <span class="hljs-meta">@Override</span><br>                            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">write</span><span class="hljs-params">(ChannelHandlerContext ctx, Object msg, ChannelPromise promise)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>                                log.debug(<span class="hljs-string">&quot;4&quot;</span>);<br>                                <span class="hljs-keyword">super</span>.write(ctx, msg, promise);<br>                            &#125;<br>                        &#125;);<br>                        <span class="hljs-comment">// head -&gt; h1 -&gt; h2 -&gt; h3 -&gt; h4 -&gt; h5 -&gt; tail</span><br>                        pipeline.addLast(<span class="hljs-string">&quot;h5&quot;</span>, <span class="hljs-keyword">new</span> ChannelOutboundHandlerAdapter() &#123;<br>                            <span class="hljs-meta">@Override</span><br>                            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">write</span><span class="hljs-params">(ChannelHandlerContext ctx, Object msg, ChannelPromise promise)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>                                log.debug(<span class="hljs-string">&quot;5&quot;</span>);<br>                                <span class="hljs-keyword">super</span>.write(ctx, msg, promise);<br>                            &#125;<br>                        &#125;);<br>                        <span class="hljs-comment">// head -&gt; h1 -&gt; h2 -&gt; h3 -&gt; h4 -&gt; h5 -&gt; h6 -&gt; tail</span><br>                        pipeline.addLast(<span class="hljs-string">&quot;h6&quot;</span>, <span class="hljs-keyword">new</span> ChannelOutboundHandlerAdapter() &#123;<br>                            <span class="hljs-meta">@Override</span><br>                            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">write</span><span class="hljs-params">(ChannelHandlerContext ctx, Object msg, ChannelPromise promise)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>                                log.debug(<span class="hljs-string">&quot;6&quot;</span>);<br>                                <span class="hljs-keyword">super</span>.write(ctx, msg, promise);<br>                            &#125;<br>                        &#125;);<br>                    &#125;<br>                &#125;)<br>                .bind(<span class="hljs-number">8080</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/image-20220126220718364.png" alt="image-20220126220718364"></p><h4 id="Ⅰ-结构"><a href="#Ⅰ-结构" class="headerlink" title="Ⅰ. 结构"></a>Ⅰ. 结构</h4><ul><li>pipeline是结构是一个带有head与tail指针的双向链表，其中的节点为handler<ul><li>要通过ctx.fireChannelRead(msg)等方法，<strong>将当前handler的处理结果传递给下一个handler</strong></li></ul></li><li>当有<strong>入站</strong>（Inbound）操作时，会<strong>从head开始向后</strong>调用handler，直到handler不是处理Inbound操作为止</li><li>当有<strong>出站</strong>（Outbound）操作时，会<strong>从tail开始向前</strong>调用handler，直到handler不是处理Outbound操作为止</li></ul><p><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210423102354.png" alt="img"></p><h4 id="Ⅱ-调用顺序"><a href="#Ⅱ-调用顺序" class="headerlink" title="Ⅱ. 调用顺序"></a>Ⅱ. 调用顺序</h4><p><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210423105200.png" alt="img"></p><h3 id="②-Handler"><a href="#②-Handler" class="headerlink" title="②. Handler"></a>②. Handler</h3><h4 id="Ⅰ-OutboundHandler"><a href="#Ⅰ-OutboundHandler" class="headerlink" title="Ⅰ. OutboundHandler"></a>Ⅰ. OutboundHandler</h4><p><code>socketChannel.writeAndFlush()</code></p><p>当handler中调用该方法进行写操作时，会触发Outbound操作，<strong>此时是从tail向前寻找OutboundHandler</strong></p><p><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210423122010.png" alt="img"></p><p><code>ctx.writeAndFlush()</code></p><p>当handler中调用该方法进行写操作时，会触发Outbound操作，<strong>此时是从当前handler向前寻找OutboundHandler</strong></p><p><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210423122050.png" alt="img"></p><h4 id="Ⅱ-EmbeddedChannel"><a href="#Ⅱ-EmbeddedChannel" class="headerlink" title="Ⅱ. EmbeddedChannel"></a>Ⅱ. EmbeddedChannel</h4><p>EmbeddedChannel可以用于测试各个handler，通过其构造函数按顺序传入需要测试handler，然后调用对应的Inbound和Outbound方法即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EmbeddedChannelTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ChannelInboundHandlerAdapter h1 = <span class="hljs-keyword">new</span> ChannelInboundHandlerAdapter() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">channelRead</span><span class="hljs-params">(ChannelHandlerContext ctx, Object msg)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;1&quot;</span>);<br>                <span class="hljs-keyword">super</span>.channelRead(ctx, msg);<br>            &#125;<br>        &#125;;<br><br>        ChannelInboundHandlerAdapter h2 = <span class="hljs-keyword">new</span> ChannelInboundHandlerAdapter() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">channelRead</span><span class="hljs-params">(ChannelHandlerContext ctx, Object msg)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;2&quot;</span>);<br>                <span class="hljs-keyword">super</span>.channelRead(ctx, msg);<br>            &#125;<br>        &#125;;<br><br>        ChannelOutboundHandlerAdapter h3 = <span class="hljs-keyword">new</span> ChannelOutboundHandlerAdapter() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">write</span><span class="hljs-params">(ChannelHandlerContext ctx, Object msg, ChannelPromise promise)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;3&quot;</span>);<br>                <span class="hljs-keyword">super</span>.write(ctx, msg, promise);<br>            &#125;<br>        &#125;;<br><br>        ChannelOutboundHandlerAdapter h4 = <span class="hljs-keyword">new</span> ChannelOutboundHandlerAdapter() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">write</span><span class="hljs-params">(ChannelHandlerContext ctx, Object msg, ChannelPromise promise)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;4&quot;</span>);<br>                <span class="hljs-keyword">super</span>.write(ctx, msg, promise);<br>            &#125;<br>        &#125;;<br><br>        <span class="hljs-comment">// 用于测试Handler的Channel</span><br>        EmbeddedChannel channel = <span class="hljs-keyword">new</span> EmbeddedChannel(h1, h2, h3, h4);<br><br>        <span class="hljs-comment">// 执行Inbound操作</span><br>        channel.writeInbound(ByteBufAllocator.DEFAULT.buffer().writeBytes(<span class="hljs-string">&quot;hello&quot;</span>.getBytes(StandardCharsets.UTF_8)));<br>        <span class="hljs-comment">// 执行Outbound操作</span><br>        channel.writeOutbound(ByteBufAllocator.DEFAULT.buffer().writeBytes(<span class="hljs-string">&quot;hello&quot;</span>.getBytes(StandardCharsets.UTF_8)));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-ByteBuf"><a href="#5-ByteBuf" class="headerlink" title="5. ByteBuf"></a>5. ByteBuf</h2><h3 id="①-创建"><a href="#①-创建" class="headerlink" title="①. 创建"></a>①. 创建</h3><p><strong>ButyBuf空间日志打印工具类</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">该方法可以帮助我们更为详细地查看ByteBuf中的内容<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ByteBufLogUtil</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">log</span><span class="hljs-params">(ByteBuf buffer)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> length = buffer.readableBytes();<br>        <span class="hljs-keyword">int</span> rows = length / <span class="hljs-number">16</span> + (length % <span class="hljs-number">15</span> == <span class="hljs-number">0</span> ? <span class="hljs-number">0</span> : <span class="hljs-number">1</span>) + <span class="hljs-number">4</span>;<br>        StringBuilder buf = <span class="hljs-keyword">new</span> StringBuilder(rows * <span class="hljs-number">80</span> * <span class="hljs-number">2</span>)<br>                .append(<span class="hljs-string">&quot;read index:&quot;</span>).append(buffer.readerIndex())<br>                .append(<span class="hljs-string">&quot; write index:&quot;</span>).append(buffer.writerIndex())<br>                .append(<span class="hljs-string">&quot; capacity:&quot;</span>).append(buffer.capacity())<br>                .append(NEWLINE);<br>        appendPrettyHexDump(buf, buffer);<br>        System.out.println(buf.toString());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>测试代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ByteBufAllocatorTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ByteBuf buffer = ByteBufAllocator.DEFAULT.buffer();<br>        log(buffer);<br>        StringBuilder stringBuilder = <span class="hljs-keyword">new</span> StringBuilder();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++) &#123;<br>            stringBuilder.append(<span class="hljs-string">&quot;a&quot;</span>);<br>        &#125;<br>        buffer.writeBytes(stringBuilder.toString().getBytes());<br>        log(buffer);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="②-直接内存和堆内存"><a href="#②-直接内存和堆内存" class="headerlink" title="②. 直接内存和堆内存"></a>②. 直接内存和堆内存</h3><p>通过该方法创建的ByteBuf，使用的是<strong>基于直接内存</strong>的ByteBuf</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">ByteBuf buffer = ByteBufAllocator.DEFAULT.buffer(<span class="hljs-number">16</span>);<br></code></pre></td></tr></table></figure><p>可以使用下面的代码来创建池化<strong>基于堆</strong>的 ByteBuf</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">ByteBuf buffer = ByteBufAllocator.DEFAULT.heapBuffer(<span class="hljs-number">16</span>);<br></code></pre></td></tr></table></figure><p>也可以使用下面的代码来创建池化<strong>基于直接内存</strong>的 ByteBuf</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">ByteBuf buffer = ByteBufAllocator.DEFAULT.directBuffer(<span class="hljs-number">16</span>);<br></code></pre></td></tr></table></figure><ul><li>直接内存创建和销毁的代价昂贵，但读写性能高（少一次内存复制），适合配合池化功能一起用</li><li>直接内存对 GC 压力小，因为这部分内存不受 JVM 垃圾回收的管理，但也要注意及时主动释放</li></ul><p><strong>测试代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">HeapAndDirectTest</span><span class="hljs-params">()</span></span>&#123;<br>    ByteBuf buffer = ByteBufAllocator.DEFAULT.buffer(<span class="hljs-number">16</span>);<br>    System.out.println(buffer.getClass());<br><br>    buffer = ByteBufAllocator.DEFAULT.heapBuffer(<span class="hljs-number">16</span>);<br>    System.out.println(buffer.getClass());<br><br>    buffer = ByteBufAllocator.DEFAULT.directBuffer(<span class="hljs-number">16</span>);<br>    System.out.println(buffer.getClass());<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>结果</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 使用池化的直接内存</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">io</span>.<span class="hljs-title">netty</span>.<span class="hljs-title">buffer</span>.<span class="hljs-title">PooledUnsafeDirectByteBuf</span></span><br><span class="hljs-class">    </span><br><span class="hljs-class">// 使用池化的堆内存    </span><br><span class="hljs-class"><span class="hljs-title">class</span> <span class="hljs-title">io</span>.<span class="hljs-title">netty</span>.<span class="hljs-title">buffer</span>.<span class="hljs-title">PooledUnsafeHeapByteBuf</span></span><br><span class="hljs-class">    </span><br><span class="hljs-class">// 使用池化的直接内存    </span><br><span class="hljs-class"><span class="hljs-title">class</span> <span class="hljs-title">io</span>.<span class="hljs-title">netty</span>.<span class="hljs-title">buffer</span>.<span class="hljs-title">PooledUnsafeDirectByteBuf</span></span><br></code></pre></td></tr></table></figure><h3 id="③-池化与非池化"><a href="#③-池化与非池化" class="headerlink" title="③. 池化与非池化"></a>③. 池化与非池化</h3><p>池化的最大意义在于可以<strong>重用</strong> ByteBuf，优点有</p><ul><li>没有池化，则每次都得创建新的 ByteBuf 实例，这个操作对直接内存代价昂贵，就算是堆内存，也会增加 GC 压力</li><li>有了池化，则可以重用池中 ByteBuf 实例，并且采用了与 jemalloc 类似的内存分配算法提升分配效率</li><li>高并发时，池化功能更节约内存，减少内存溢出的可能</li></ul><p>池化功能是否开启，可以通过下面的系统环境变量来设置</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elm">-<span class="hljs-type">Dio</span>.netty.allocator.<span class="hljs-keyword">type</span>=&#123;unpooled|pooled&#125;<br></code></pre></td></tr></table></figure><ul><li>4.1 以后，<strong>非 Android 平台默认启用池化实现</strong>，Android 平台启用非池化实现</li><li>4.1 之前，池化功能还不成熟，默认是非池化实现</li></ul><h3 id="④-组成"><a href="#④-组成" class="headerlink" title="④. 组成"></a>④. 组成</h3><p>ByteBuf 主要有以下几个组成部分</p><ul><li><p>最大容量与当前容量</p><ul><li>在构造 ByteBuf 时，可传入两个参数，分别代表初始容量和最大容量，若未传入第二个参数（最大容量），最大容量默认为<code>Integer.MAX_VALUE</code></li><li>当ByteBuf容量无法容纳所有数据时，会进行扩容操作，若<strong>超出最大容量</strong>，会抛出<code>java.lang.IndexOutOfBoundsException</code>异常</li></ul></li><li><p>读写操作不同于 ByteBuffer 只用 position 进行控制，</p><p>ByteBuf分别由<strong>读指针</strong>和<strong>写指针</strong>两个指针控制</p><p>。进行读写操作时，<strong>无需进行模式的切换</strong></p><ul><li>读指针前的部分被称为废弃部分，是已经读过的内容</li><li>读指针与写指针之间的空间称为可读部分</li><li>写指针与当前容量之间的空间称为可写部分</li></ul></li></ul><p><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210423143030.png" alt="img"></p><h3 id="⑤-写入"><a href="#⑤-写入" class="headerlink" title="⑤. 写入"></a>⑤. 写入</h3><p>常用方法如下</p><table><thead><tr><th>方法签名</th><th>含义</th><th>备注</th></tr></thead><tbody><tr><td>writeBoolean(boolean value)</td><td>写入 boolean 值</td><td><strong>用一字节 01|00 代表 true|false</strong></td></tr><tr><td>writeByte(int value)</td><td>写入 byte 值</td><td></td></tr><tr><td>writeShort(int value)</td><td>写入 short 值</td><td></td></tr><tr><td>writeInt(int value)</td><td>写入 int 值</td><td><strong>Big Endian（大端写入）</strong>，即 0x250，写入后 00 00 02 50</td></tr><tr><td>writeIntLE(int value)</td><td>写入 int 值</td><td><strong>Little Endian（小端写入）</strong>，即 0x250，写入后 50 02 00 00</td></tr><tr><td>writeLong(long value)</td><td>写入 long 值</td><td></td></tr><tr><td>writeChar(int value)</td><td>写入 char 值</td><td></td></tr><tr><td>writeFloat(float value)</td><td>写入 float 值</td><td></td></tr><tr><td>writeDouble(double value)</td><td>写入 double 值</td><td></td></tr><tr><td>writeBytes(ByteBuf src)</td><td>写入 netty 的 ByteBuf</td><td></td></tr><tr><td>writeBytes(byte[] src)</td><td>写入 byte[]</td><td></td></tr><tr><td>writeBytes(ByteBuffer src)</td><td>写入 nio 的 <strong>ByteBuffer</strong></td><td></td></tr><tr><td>int writeCharSequence(CharSequence sequence, Charset charset)</td><td>写入字符串</td><td>CharSequence为字符串类的父类，第二个参数为对应的字符集</td></tr></tbody></table><blockquote><p>注意</p><ul><li>这些方法的未指明返回值的，其返回值都是 ByteBuf，意味着可以链式调用来写入不同的数据</li><li>网络传输中，<strong>默认习惯是 Big Endian</strong>，使用 writeInt(int value)</li></ul></blockquote><p><strong>使用方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ByteBufStudy</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 创建ByteBuf</span><br>        ByteBuf buffer = ByteBufAllocator.DEFAULT.buffer(<span class="hljs-number">16</span>, <span class="hljs-number">20</span>);<br>        ByteBufUtil.log(buffer);<br><br>        <span class="hljs-comment">// 向buffer中写入数据，默认是 Big Endian 从高位开始写</span><br>        buffer.writeBytes(<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;);<br>        ByteBufUtil.log(buffer);<br><br>        buffer.writeInt(<span class="hljs-number">5</span>);<br>        ByteBufUtil.log(buffer);<br><br>        buffer.writeIntLE(<span class="hljs-number">6</span>);<br>        ByteBufUtil.log(buffer);<br><br>        buffer.writeLong(<span class="hljs-number">7</span>);<br>        ByteBufUtil.log(buffer);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>运行结果</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java">read index:<span class="hljs-number">0</span> write index:<span class="hljs-number">0</span> capacity:<span class="hljs-number">16</span><br><br>read index:<span class="hljs-number">0</span> write index:<span class="hljs-number">4</span> capacity:<span class="hljs-number">16</span><br>         +-------------------------------------------------+<br>         |  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span>  a  b  c  d  e  f |<br>+--------+-------------------------------------------------+----------------+<br>|<span class="hljs-number">00000000</span>| <span class="hljs-number">01</span> <span class="hljs-number">02</span> <span class="hljs-number">03</span> <span class="hljs-number">04</span>                                     |....            |<br>+--------+-------------------------------------------------+----------------+<br><br>read index:<span class="hljs-number">0</span> write index:<span class="hljs-number">8</span> capacity:<span class="hljs-number">16</span><br>         +-------------------------------------------------+<br>         |  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span>  a  b  c  d  e  f |<br>+--------+-------------------------------------------------+----------------+<br>|<span class="hljs-number">00000000</span>| <span class="hljs-number">01</span> <span class="hljs-number">02</span> <span class="hljs-number">03</span> <span class="hljs-number">04</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">05</span>                         |........        |<br>+--------+-------------------------------------------------+----------------+<br><br>read index:<span class="hljs-number">0</span> write index:<span class="hljs-number">12</span> capacity:<span class="hljs-number">16</span><br>         +-------------------------------------------------+<br>         |  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span>  a  b  c  d  e  f |<br>+--------+-------------------------------------------------+----------------+<br>|<span class="hljs-number">00000000</span>| <span class="hljs-number">01</span> <span class="hljs-number">02</span> <span class="hljs-number">03</span> <span class="hljs-number">04</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">05</span> <span class="hljs-number">06</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>             |............    |<br>+--------+-------------------------------------------------+----------------+<br><br>read index:<span class="hljs-number">0</span> write index:<span class="hljs-number">20</span> capacity:<span class="hljs-number">20</span><br>         +-------------------------------------------------+<br>         |  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span>  a  b  c  d  e  f |<br>+--------+-------------------------------------------------+----------------+<br>|<span class="hljs-number">00000000</span>| <span class="hljs-number">01</span> <span class="hljs-number">02</span> <span class="hljs-number">03</span> <span class="hljs-number">04</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">05</span> <span class="hljs-number">06</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> |................|<br>|<span class="hljs-number">00000010</span>| <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">07</span>                                     |....            |<br>+--------+-------------------------------------------------+----------------+<br></code></pre></td></tr></table></figure><p>还有一类方法是 <strong>set 开头</strong>的一系列方法，也<strong>可以写入数据，但不会改变写指针位置</strong></p><h3 id="⑥-扩容"><a href="#⑥-扩容" class="headerlink" title="⑥. 扩容"></a>⑥. 扩容</h3><p>当ByteBuf中的容量无法容纳写入的数据时，会进行扩容操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">buffer.writeLong(<span class="hljs-number">7</span>);<br>ByteBufUtil.log(buffer);<br><span class="hljs-comment">// 扩容前</span><br>read index:<span class="hljs-number">0</span> write index:<span class="hljs-number">12</span> capacity:<span class="hljs-number">16</span><br>...<br><br><span class="hljs-comment">// 扩容后</span><br>read index:<span class="hljs-number">0</span> write index:<span class="hljs-number">20</span> capacity:<span class="hljs-number">20</span><br>         +-------------------------------------------------+<br>         |  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span>  a  b  c  d  e  f |<br>+--------+-------------------------------------------------+----------------+<br>|<span class="hljs-number">00000000</span>| <span class="hljs-number">01</span> <span class="hljs-number">02</span> <span class="hljs-number">03</span> <span class="hljs-number">04</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">05</span> <span class="hljs-number">06</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> |................|<br>|<span class="hljs-number">00000010</span>| <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">07</span>                                     |....            |<br>+--------+-------------------------------------------------+----------------+<br></code></pre></td></tr></table></figure><h4 id="扩容规则"><a href="#扩容规则" class="headerlink" title="扩容规则"></a>扩容规则</h4><ul><li>如何写入后数据大小未超过 512 字节，则选择下一个 16 的整数倍进行扩容<ul><li>例如写入后大小为 12 字节，则扩容后 capacity 是 16 字节</li></ul></li><li>如果写入后数据大小超过 512 字节，则选择下一个 2^n<ul><li>例如写入后大小为 513 字节，则扩容后 capacity 是 2^10=1024 字节（2^9=512 已经不够了）</li></ul></li><li>扩容<strong>不能超过</strong> maxCapacity，否则会抛出<code>java.lang.IndexOutOfBoundsException</code>异常</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">Exception <span class="hljs-keyword">in</span> thread <span class="hljs-string">&quot;main&quot;</span> java.lang.IndexOutOfBoundsException: writer<span class="hljs-constructor">Index(20)</span> + min<span class="hljs-constructor">WritableBytes(8)</span> exceeds max<span class="hljs-constructor">Capacity(20)</span>: <span class="hljs-constructor">PooledUnsafeDirectByteBuf(<span class="hljs-params">ridx</span>: 0, <span class="hljs-params">widx</span>: 20, <span class="hljs-params">cap</span>: 20<span class="hljs-operator">/</span>20)</span><br>...<br></code></pre></td></tr></table></figure><h3 id="⑦-读取"><a href="#⑦-读取" class="headerlink" title="⑦. 读取"></a>⑦. 读取</h3><p>读取主要是通过一系列 read 方法进行读取，读取时会根据读取数据的字节数移动读指针</p><p>如果需要<strong>重复读取</strong>，需要调用<code>buffer.markReaderIndex()</code>对读指针进行标记，并通过<code>buffer.resetReaderIndex()</code>将读指针恢复到mark标记的位置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ByteBufStudy</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 创建ByteBuf</span><br>        ByteBuf buffer = ByteBufAllocator.DEFAULT.buffer(<span class="hljs-number">16</span>, <span class="hljs-number">20</span>);<br><br>        <span class="hljs-comment">// 向buffer中写入数据</span><br>        buffer.writeBytes(<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;);<br>        buffer.writeInt(<span class="hljs-number">5</span>);<br><br>        <span class="hljs-comment">// 读取4个字节</span><br>        System.out.println(buffer.readByte());<br>        System.out.println(buffer.readByte());<br>        System.out.println(buffer.readByte());<br>        System.out.println(buffer.readByte());<br>        ByteBufUtil.log(buffer);<br><br>        <span class="hljs-comment">// 通过mark与reset实现重复读取</span><br>        buffer.markReaderIndex();<br>        System.out.println(buffer.readInt());<br>        ByteBufUtil.log(buffer);<br><br>        <span class="hljs-comment">// 恢复到mark标记处</span><br>        buffer.resetReaderIndex();<br>        ByteBufUtil.log(buffer);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span><br><span class="hljs-number">2</span><br><span class="hljs-number">3</span><br><span class="hljs-number">4</span><br>read index:<span class="hljs-number">4</span> write index:<span class="hljs-number">8</span> capacity:<span class="hljs-number">16</span><br>         +-------------------------------------------------+<br>         |  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span>  a  b  c  d  e  f |<br>+--------+-------------------------------------------------+----------------+<br>|<span class="hljs-number">00000000</span>| <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">05</span>                                     |....            |<br>+--------+-------------------------------------------------+----------------+<br><span class="hljs-number">5</span><br>read index:<span class="hljs-number">8</span> write index:<span class="hljs-number">8</span> capacity:<span class="hljs-number">16</span><br><br>read index:<span class="hljs-number">4</span> write index:<span class="hljs-number">8</span> capacity:<span class="hljs-number">16</span><br>         +-------------------------------------------------+<br>         |  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span>  a  b  c  d  e  f |<br>+--------+-------------------------------------------------+----------------+<br>|<span class="hljs-number">00000000</span>| <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">05</span>                                     |....            |<br>+--------+-------------------------------------------------+----------------+<br></code></pre></td></tr></table></figure><p>还有以 get 开头的一系列方法，这些<strong>方法不会改变读指针的位置</strong></p><h3 id="⑧-释放"><a href="#⑧-释放" class="headerlink" title="⑧. 释放"></a>⑧. 释放</h3><p>由于 Netty 中有堆外内存（直接内存）的 ByteBuf 实现，<strong>堆外内存最好是手动来释放</strong>，而不是等 GC 垃圾回收。</p><ul><li>Unpooled<strong>Heap</strong>ByteBuf 使用的是 <strong>JVM</strong> 内存，只需等 GC 回收内存即可</li><li>Unpooled<strong>Direct</strong>ByteBuf 使用的就是<strong>直接内存</strong>了，需要特殊的方法来回收内存</li><li><strong>Pooled</strong>ByteBuf 和它的子类使用了<strong>池化机制</strong>，需要更复杂的规则来回收内存</li></ul><p>Netty 这里采用了引用计数法来控制回收内存，每个 ByteBuf 都实现了 ReferenceCounted 接口</p><ul><li>每个 ByteBuf 对象的初始计数为 1</li><li>调用 release 方法计数减 1，如果计数为 0，ByteBuf 内存被回收</li><li>调用 retain 方法计数加 1，表示调用者没用完之前，其它 handler 即使调用了 release 也不会造成回收</li><li>当计数为 0 时，底层内存会被回收，这时即使 ByteBuf 对象还在，其各个方法均无法正常使用</li></ul><h4 id="释放规则"><a href="#释放规则" class="headerlink" title="释放规则"></a>释放规则</h4><p>因为 pipeline 的存在，一般需要将 ByteBuf 传递给下一个 ChannelHandler，<strong>如果在每个 ChannelHandler 中都去调用 release ，就失去了传递性</strong>（如果在这个 ChannelHandler 内这个 ByteBuf 已完成了它的使命，那么便无须再传递）</p><p><strong>基本规则是，谁是最后使用者，谁负责 release</strong></p><ul><li><p>起点，对于 NIO 实现来讲，在 io.netty.channel.nio.AbstractNioByteChannel.NioByteUnsafe.read 方法中首次创建 ByteBuf 放入 pipeline（line 163 pipeline.fireChannelRead(byteBuf)）</p></li><li><p>入站 ByteBuf 处理原则</p><ul><li>对原始 ByteBuf 不做处理，调用 ctx.fireChannelRead(msg) 向后传递，这时无须 release</li><li><strong>将原始 ByteBuf 转换为其它类型的 Java 对象，这时 ByteBuf 就没用了，必须 release</strong></li><li><strong>如果不调用 ctx.fireChannelRead(msg) 向后传递，那么也必须 release</strong></li><li><strong>注意各种异常，如果 ByteBuf 没有成功传递到下一个 ChannelHandler，必须 release</strong></li><li>假设消息<strong>一直向后传</strong>，那么 TailContext 会负责释放未处理消息（原始的 ByteBuf）</li></ul></li><li><p>出站 ByteBuf 处理原则</p><ul><li><strong>出站消息最终都会转为 ByteBuf 输出，一直向前传，由 HeadContext flush 后 release</strong></li></ul></li><li><p>异常处理原则</p><ul><li><p>有时候不清楚 ByteBuf 被引用了多少次，但又必须彻底释放，可以<strong>循环调用 release 直到返回 true</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span> (!buffer.release()) &#123;&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><p>当ByteBuf<strong>被传到了pipeline的head与tail时</strong>，ByteBuf会被其中的方法彻底释放，但<strong>前提是ByteBuf被传递到了head与tail中</strong></p><p><strong>TailConext中释放ByteBuf的源码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onUnhandledInboundMessage</span><span class="hljs-params">(Object msg)</span> </span>&#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        logger.debug(<span class="hljs-string">&quot;Discarded inbound message &#123;&#125; that reached at the tail of the pipeline. Please check your pipeline configuration.&quot;</span>, msg);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-comment">// 具体的释放方法</span><br>        ReferenceCountUtil.release(msg);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>判断传过来的是否为ByteBuf，是的话才需要释放</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">release</span><span class="hljs-params">(Object msg)</span> </span>&#123;<br><span class="hljs-keyword">return</span> msg <span class="hljs-keyword">instanceof</span> ReferenceCounted ? ((ReferenceCounted)msg).release() : <span class="hljs-keyword">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="⑨-切片"><a href="#⑨-切片" class="headerlink" title="⑨. 切片"></a>⑨. 切片</h3><h4 id="Ⅰ-slice"><a href="#Ⅰ-slice" class="headerlink" title="Ⅰ. slice"></a>Ⅰ. slice</h4><p>ByteBuf切片是【零拷贝】的体现之一，对原始 ByteBuf 进行切片成多个 ByteBuf，<strong>切片后的 ByteBuf 并没有发生内存复制，还是使用原始 ByteBuf 的内存</strong>，切片后的 ByteBuf 维护独立的 read，write 指针</p><p>得到分片后的buffer后，要调用其retain方法，使其内部的引用计数加一。避免原ByteBuf释放，导致切片buffer无法使用</p><p>修改原ByteBuf中的值，也会影响切片后得到的ByteBuf</p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210423154059.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210423154059.png" alt="img"></a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ByteBufSliceTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 创建ByteBuf</span><br>        ByteBuf buffer = ByteBufAllocator.DEFAULT.buffer(<span class="hljs-number">16</span>, <span class="hljs-number">20</span>);<br><br>        <span class="hljs-comment">// 向buffer中写入数据</span><br>        buffer.writeBytes(<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[]&#123;<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&#x27;g&#x27;</span>, <span class="hljs-string">&#x27;h&#x27;</span>, <span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-string">&#x27;j&#x27;</span>&#125;);<br><br>        <span class="hljs-comment">// 将buffer分成两部分</span><br>        ByteBuf slice1 = buffer.slice(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>);<br>        ByteBuf slice2 = buffer.slice(<span class="hljs-number">5</span>, <span class="hljs-number">5</span>);<br><br>        <span class="hljs-comment">// 需要让分片的buffer引用计数加一</span><br>        <span class="hljs-comment">// 避免原Buffer释放导致分片buffer无法使用</span><br>        slice1.retain();<br>        slice2.retain();<br><br>        log(slice1);<br>        log(slice2);<br><br>        <span class="hljs-comment">// 更改原始buffer中的值</span><br>        System.out.println(<span class="hljs-string">&quot;===========修改原buffer中的值===========&quot;</span>);<br>        buffer.setByte(<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;b&#x27;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;===========打印slice1===========&quot;</span>);<br>        log(slice1);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java">read index:<span class="hljs-number">0</span> write index:<span class="hljs-number">5</span> capacity:<span class="hljs-number">5</span><br>         +-------------------------------------------------+<br>         |  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span>  a  b  c  d  e  f |<br>+--------+-------------------------------------------------+----------------+<br>|<span class="hljs-number">00000000</span>| <span class="hljs-number">61</span> <span class="hljs-number">62</span> <span class="hljs-number">63</span> <span class="hljs-number">64</span> <span class="hljs-number">65</span>                                  |abcde           |<br>+--------+-------------------------------------------------+----------------+<br>read index:<span class="hljs-number">0</span> write index:<span class="hljs-number">5</span> capacity:<span class="hljs-number">5</span><br>         +-------------------------------------------------+<br>         |  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span>  a  b  c  d  e  f |<br>+--------+-------------------------------------------------+----------------+<br>|<span class="hljs-number">00000000</span>| <span class="hljs-number">66</span> <span class="hljs-number">67</span> <span class="hljs-number">68</span> <span class="hljs-number">69</span> 6a                                  |fghij           |<br>+--------+-------------------------------------------------+----------------+<br>===========修改原buffer中的值===========<br>===========打印slice1===========<br>read index:<span class="hljs-number">0</span> write index:<span class="hljs-number">5</span> capacity:<span class="hljs-number">5</span><br>         +-------------------------------------------------+<br>         |  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span>  a  b  c  d  e  f |<br>+--------+-------------------------------------------------+----------------+<br>|<span class="hljs-number">00000000</span>| <span class="hljs-number">62</span> <span class="hljs-number">62</span> <span class="hljs-number">63</span> <span class="hljs-number">64</span> <span class="hljs-number">65</span>                                  |bbcde           |<br>+--------+-------------------------------------------------+----------------+<br><br>Process finished with exit code <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h4 id="Ⅱ-duplicate"><a href="#Ⅱ-duplicate" class="headerlink" title="Ⅱ. duplicate"></a>Ⅱ. duplicate</h4><p>【零拷贝】的体现之一，就好比截取了原始 ByteBuf 所有内容，并且没有 max capacity 的限制，也是与原始 ByteBuf 使用同一块底层内存，只是读写指针是独立的</p><p><img src="/image/image-20220127165007710.png" alt="image-20220127165007710"></p><h4 id="Ⅲ-copy"><a href="#Ⅲ-copy" class="headerlink" title="Ⅲ. copy"></a>Ⅲ. copy</h4><p>会将底层内存数据进行深拷贝，因此无论读写，都与原始 ByteBuf 无关</p><h3 id="⑩-合成"><a href="#⑩-合成" class="headerlink" title="⑩. 合成"></a>⑩. 合成</h3><p>与切片是相反操作，<strong>是将多个 ByteBuf 碎片，合成为一个ByteBuf</strong>，同时在合成过程中也<strong>不会发生数据的拷贝</strong></p><h4 id="Ⅰ-composite"><a href="#Ⅰ-composite" class="headerlink" title="Ⅰ. composite"></a>Ⅰ. composite</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ByteBufCompositeTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ByteBuf buf1 = ByteBufAllocator.DEFAULT.buffer();<br>        buf1.writeBytes(<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[]&#123;<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>&#125;);<br>        ByteBuf buf2 = ByteBufAllocator.DEFAULT.buffer();<br>        buf1.writeBytes(<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[]&#123;<span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&#x27;g&#x27;</span>, <span class="hljs-string">&#x27;h&#x27;</span>, <span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-string">&#x27;j&#x27;</span>&#125;);<br><br>        CompositeByteBuf buffs = ByteBufAllocator.DEFAULT.compositeBuffer();<br>        buffs.addComponents(<span class="hljs-keyword">true</span>, buf1, buf2);<br>        log(buffs);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>运行结果</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">read index:<span class="hljs-number">0</span> write index:<span class="hljs-number">10</span> capacity:<span class="hljs-number">10</span><br>         +-------------------------------------------------+<br>         |  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span>  a  b  c  d  e  f |<br>+--------+-------------------------------------------------+----------------+<br>|<span class="hljs-number">00000000</span>| <span class="hljs-number">61</span> <span class="hljs-number">62</span> <span class="hljs-number">63</span> <span class="hljs-number">64</span> <span class="hljs-number">65</span> <span class="hljs-number">66</span> <span class="hljs-number">67</span> <span class="hljs-number">68</span> <span class="hljs-number">69</span> 6a                   |abcdefghij      |<br>+--------+-------------------------------------------------+----------------+<br></code></pre></td></tr></table></figure><h3 id="⑪-优势"><a href="#⑪-优势" class="headerlink" title="⑪. 优势"></a>⑪. 优势</h3><ul><li>池化思想 - 可以重用池中 ByteBuf 实例，更节约内存，减少内存溢出的可能</li><li><strong>读写指针分离</strong>，不需要像 ByteBuffer 一样切换读写模式</li><li>可以<strong>自动扩容</strong></li><li>支持链式调用，使用更流畅</li><li>很多地方体现零拷贝，例如<ul><li>slice、duplicate、CompositeByteBuf</li></ul></li></ul><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h2><p>可以将各大重要组件分为三大类：</p><h3 id="网络通信层"><a href="#网络通信层" class="headerlink" title="网络通信层"></a>网络通信层</h3><h4 id="BootStrap"><a href="#BootStrap" class="headerlink" title="BootStrap"></a>BootStrap</h4><p>负责客户端启动，并且去连接远程的Netty Server</p><h4 id="ServerBootStrap"><a href="#ServerBootStrap" class="headerlink" title="ServerBootStrap"></a>ServerBootStrap</h4><p>负责服务端的监听，用来监听指定的一个端口</p><h4 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a>Channel</h4><p>负责网络通信的一个载体</p><h3 id="事件调度层"><a href="#事件调度层" class="headerlink" title="事件调度层"></a>事件调度层</h3><h4 id="EventLoopGroup"><a href="#EventLoopGroup" class="headerlink" title="EventLoopGroup"></a>EventLoopGroup</h4><p>本质上是一个线程池，主要去负责接收IO请求，并分配线程去执行处理请求</p><h4 id="EventLoop"><a href="#EventLoop" class="headerlink" title="EventLoop"></a>EventLoop</h4><p>是<code>EventLoopGroup</code>线程池中的一个具体线程</p><h3 id="服务编排层"><a href="#服务编排层" class="headerlink" title="服务编排层"></a>服务编排层</h3><h4 id="ChannelPipeLine"><a href="#ChannelPipeLine" class="headerlink" title="ChannelPipeLine"></a>ChannelPipeLine</h4><p>负责处理多个<code>ChannelHandler</code>，将多个<code>ChannelHandler</code>构成一个执行链，从而实现流水线的效果</p><h4 id="ChannelHandler"><a href="#ChannelHandler" class="headerlink" title="ChannelHandler"></a>ChannelHandler</h4><p>针对 IO 数据的一个处理器，数据处理接收后通过指定的 <code>Handler</code> 进行处理</p><h4 id="ChannelHandlerContext"><a href="#ChannelHandlerContext" class="headerlink" title="ChannelHandlerContext"></a>ChannelHandlerContext</h4><p>用来保存<code>ChannelHandler</code>上下文信息</p>]]></content>
    
    
    <categories>
      
      <category>Netty</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>主从服务器之间的数据同步</title>
    <link href="/2022/01/24/Zookeeper%E5%8E%9F%E7%90%86/%E4%B8%BB%E4%BB%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B9%8B%E9%97%B4%E7%9A%84%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/"/>
    <url>/2022/01/24/Zookeeper%E5%8E%9F%E7%90%86/%E4%B8%BB%E4%BB%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B9%8B%E9%97%B4%E7%9A%84%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/</url>
    
    <content type="html"><![CDATA[<p><img src="/image/image-20220118013056649.png" alt="image-20220118013056649"></p><figure class="highlight"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs">主节点通过ZAB向子节点发送数据确保数据一致性<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Zookeeper原理</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>选举机制</title>
    <link href="/2022/01/24/Zookeeper%E5%8E%9F%E7%90%86/%E9%80%89%E4%B8%BE%E6%9C%BA%E5%88%B6/"/>
    <url>/2022/01/24/Zookeeper%E5%8E%9F%E7%90%86/%E9%80%89%E4%B8%BE%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="启动时选举"><a href="#启动时选举" class="headerlink" title="启动时选举"></a>启动时选举</h1><p><img src="/image/image-20220118003853321.png" alt="image-20220118003853321"></p><h2 id="从配置文件中读取集群个数"><a href="#从配置文件中读取集群个数" class="headerlink" title="从配置文件中读取集群个数"></a>从配置文件中读取集群个数</h2><figure class="highlight axapta"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs axapta">从.cfg文件中读取<span class="hljs-keyword">server</span>的个数，以便在过半时选出leader<br></code></pre></td></tr></table></figure><h2 id="交换票"><a href="#交换票" class="headerlink" title="交换票"></a>交换票</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">每台服务器把自己的票（myid和zxid）投给参与选举的节点<br></code></pre></td></tr></table></figure><h2 id="投票"><a href="#投票" class="headerlink" title="投票"></a>投票</h2><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs applescript">将自己手上比较大的票投出去<br>先比较zxid，再比较myid<br>因为zxid代表着事务<span class="hljs-built_in">id</span>，在这台Zookeeper服务器上每当有一个数改变，zxid就会加一，为了保证数据一致，就优先选择zxid<br><br>直到投票箱的数额超过集群一半<br></code></pre></td></tr></table></figure><h2 id="选举Leader"><a href="#选举Leader" class="headerlink" title="选举Leader"></a>选举Leader</h2><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sqf">选举得票数最高的为<span class="hljs-built_in">Leader</span><br></code></pre></td></tr></table></figure><h2 id="之后"><a href="#之后" class="headerlink" title="之后"></a>之后</h2><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sqf">有的节点在<span class="hljs-built_in">Leader</span>诞生之后才连接上集群，此时如果发现以及存在<span class="hljs-built_in">Leader</span>，便不会再参与投票，而是直接成为Follower<br></code></pre></td></tr></table></figure><h1 id="崩溃恢复时选举"><a href="#崩溃恢复时选举" class="headerlink" title="崩溃恢复时选举"></a>崩溃恢复时选举</h1><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sqf"><span class="hljs-built_in">Leader</span>建立完后，<span class="hljs-built_in">Leader</span>周期性地不断向Follow发送心跳（ping命令，没有内容地socket）。<br>当<span class="hljs-built_in">Leader</span>崩溃后，Follower发现socket通道已关闭，于是Follower开始进入到Looking状态，重新回到上一节中的<span class="hljs-built_in">Leader</span>选举状态，此时集群不能对外访问<br></code></pre></td></tr></table></figure><h2 id="ping失败"><a href="#ping失败" class="headerlink" title="ping失败"></a>ping失败</h2><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">发现<span class="hljs-built_in">ping</span>多次失败后，异常报错<br></code></pre></td></tr></table></figure><h2 id="重新选举"><a href="#重新选举" class="headerlink" title="重新选举"></a>重新选举</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">Follower开始进入倒Looking状态<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Zookeeper原理</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>谈谈对Zookeeper的理解</title>
    <link href="/2022/01/24/Zookeeper%E5%8E%9F%E7%90%86/%E8%B0%88%E8%B0%88%E5%AF%B9Zookeeper%E7%90%86%E8%A7%A3/"/>
    <url>/2022/01/24/Zookeeper%E5%8E%9F%E7%90%86/%E8%B0%88%E8%B0%88%E5%AF%B9Zookeeper%E7%90%86%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p>应用场景</p><figure class="highlight"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs">从三种典型的应用场景介绍<br></code></pre></td></tr></table></figure><h2 id="集群管理"><a href="#集群管理" class="headerlink" title="集群管理"></a>集群管理</h2><p>在多个节点组成的集群中，为了保证集群的HA（Highly Available）的特性，</p><p><strong>每个节点都需要冗余一份数据副本，这种情况下需要保证客户端访问集群中的任意一个节点都是最新的数据</strong></p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>Zookeeper 提供了 <code>CP</code> 模型，<strong>来保证集群中的每一个节点的数据一致性，</strong></p><p>需要调用<code>sync</code>方法进行数据同步，<strong>但是Zookeeper并不是一个强一致性模型，而是一个顺序一致性模型</strong></p><h2 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h2><p>为了保证跨进程的共享资源的并发安全性，就必须使用跨进程的锁，也就是分布式锁</p><h3 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li>1.通过有序节点的特性实现</li><li>2.同一级节点的唯一特性</li></ul><h2 id="Master选举"><a href="#Master选举" class="headerlink" title="Master选举"></a>Master选举</h2><p>在多个节点组成的集群中，为了降低集群数据同步的复杂度，会存在<code>Master</code>和<code>Slave</code>两种角色的节点</p><p><code>Master</code>负责事务和非事务性的请求处理</p><p><code>Slave</code>负责非事务性的请求处理</p><p>但是分布式中如何去确定某个节点是<code>Master</code>还是<code>Slave</code></p><h3 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li>1.通过持久性节点存储和管理其他集群节点的一些信息，从而进行Master选举机制</li><li>2.有序节点的特性来实现Master选举机制</li></ul><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>针对上诉情况，产生了Zookeeper这样一个中间件，是一个分布式开源协调组件，类似于一个裁判员的身份，专门负责协调和解决分布式系统中的各类问题</p><p>总的来说，Zookeeper本就是一个经典的分布式数据一致性的解决方案组件，主要致力于分布式应用中的一些高性能、高可用的并且具有严格访问顺序控制的一些能力模型，来实现分布式协调服务</p><p>它底层的数据一致性算法，是基于<code>Paxos</code>算法演进而来的ZAB协议实现</p>]]></content>
    
    
    <categories>
      
      <category>Zookeeper原理</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>节点类型</title>
    <link href="/2022/01/24/Zookeeper%E5%8E%9F%E7%90%86/%E8%8A%82%E7%82%B9%E7%B1%BB%E5%9E%8B/"/>
    <url>/2022/01/24/Zookeeper%E5%8E%9F%E7%90%86/%E8%8A%82%E7%82%B9%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="持久化节点"><a href="#持久化节点" class="headerlink" title="持久化节点"></a>持久化节点</h1><figure class="highlight gauss"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-keyword">create</span> /xxx<br></code></pre></td></tr></table></figure><h1 id="临时节点"><a href="#临时节点" class="headerlink" title="临时节点"></a>临时节点</h1><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">create</span> -<span class="hljs-built_in">e</span> /xxx<br></code></pre></td></tr></table></figure><h1 id="有序节点"><a href="#有序节点" class="headerlink" title="有序节点"></a>有序节点</h1><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-keyword">create</span> -s /xxx<br></code></pre></td></tr></table></figure><h1 id="容器节点"><a href="#容器节点" class="headerlink" title="容器节点"></a>容器节点</h1><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-keyword">create</span> -c /xxx<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Zookeeper原理</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ZAB协议</title>
    <link href="/2022/01/24/Zookeeper%E5%8E%9F%E7%90%86/ZAB%E5%8D%8F%E8%AE%AE/"/>
    <url>/2022/01/24/Zookeeper%E5%8E%9F%E7%90%86/ZAB%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><figure class="highlight sql"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs sql">Zookeeper作为非常重要的分布式协调组件，需要进行集群部署，集群中会以一主多从的形式进行部署。<br>Zookeeper为了保证数据的一致性，使用了ZAB（Zookeeper <span class="hljs-keyword">Atomic</span> Broadcast）协议，这个协议解决了Zookeeper的崩溃恢复和主从数据同步的问题<br></code></pre></td></tr></table></figure><h1 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">1.保证数据的一致性<br>2.崩溃恢复<br></code></pre></td></tr></table></figure><h1 id="定义的四种节点状态"><a href="#定义的四种节点状态" class="headerlink" title="定义的四种节点状态"></a>定义的四种节点状态</h1><p>Looking：选举状态</p><p>Following：从节点状态</p><p>Leading：主节点状态</p><p>Observing：观察者状态，不参与选举</p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Zookeeper原理</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CAP理论</title>
    <link href="/2022/01/24/Zookeeper%E5%8E%9F%E7%90%86/CAP%E7%90%86%E8%AE%BA/"/>
    <url>/2022/01/24/Zookeeper%E5%8E%9F%E7%90%86/CAP%E7%90%86%E8%AE%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><figure class="highlight markdown"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><pre><code class="hljs markdown">CAP理论为：<br><span class="hljs-bullet">1.</span> Consistency 一致性<br><span class="hljs-bullet">2.</span> Availability 可用性<br><span class="hljs-bullet">3.</span> Partition tolerance 分区容错性（分布式项目必选）<br><br>最多只能满足上述的其中两项<br></code></pre></td></tr></table></figure><h1 id="一致性"><a href="#一致性" class="headerlink" title="一致性"></a>一致性</h1><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">All nodes see <span class="hljs-keyword">the</span> same data <span class="hljs-keyword">at</span> <span class="hljs-keyword">the</span> same <span class="hljs-built_in">time</span><br>所有节点在同一时间对外开发完全一样的数据<br></code></pre></td></tr></table></figure><h1 id="可用性"><a href="#可用性" class="headerlink" title="可用性"></a>可用性</h1><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">Reads</span> <span class="hljs-keyword">and</span> writes always succeed <br>读写操作总是成功，服务一直可用<br></code></pre></td></tr></table></figure><h1 id="分区容错性"><a href="#分区容错性" class="headerlink" title="分区容错性"></a>分区容错性</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">以集群来分担压力<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Zookeeper原理</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>主从复制原理</title>
    <link href="/2022/01/24/Redis%E5%8E%9F%E7%90%86/%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%8E%9F%E7%90%86/"/>
    <url>/2022/01/24/Redis%E5%8E%9F%E7%90%86/%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="全量复制"><a href="#全量复制" class="headerlink" title="全量复制"></a>全量复制</h1><figure class="highlight markdown"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 主节点通过bgsave命令fork子进程进行RDB持久化，该过程非常消耗CPU、内存（页表复制）、磁盘I/O<br><br><span class="hljs-bullet">2.</span> 主节点通过网络将RDB文件发送给从节点，对主节点的带框会带来很大的消耗<br><br><span class="hljs-bullet">3.</span> 从节点清空老数据、载入新RDB文件，其过程是阻塞的，无法响应客户端命令；如果从节点执行bgrewriteaof，也会带来额外的消耗<br></code></pre></td></tr></table></figure><h1 id="增量复制"><a href="#增量复制" class="headerlink" title="增量复制"></a>增量复制</h1><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-number">1.</span> 复制偏移量：执行复制的主从节点，分别会维护一个偏移量<span class="hljs-built_in">offset</span>，用来记录下一次同步从哪儿开始<br><br><span class="hljs-number">2.</span> 复制积压缓冲区：主节点内部维护了一个固定长度的、先进先出的队列作为复制积压缓冲区，当主从节点<span class="hljs-built_in">offset</span>的差距过大超过缓冲区时，将无法执行部分复制，只能执行全量复制<br>使用缓冲区可以避免从节点要去主节点的硬盘中获取数据<br><br><span class="hljs-number">3.</span> 每个Redis节点，都有其运行ID，运行ID由节点在启动时自动生成，主节点会将自己的运行ID发送给从节点，从节点会将主节点的运行ID保存起来。从节点Redis断开重连的时候，就会根据运行ID来判断同步的进度：<br><span class="hljs-number">3.1</span>. 如果从节点保存的运行ID与主节点的运行ID相同，说明主从节点之前同步过，主节点会继续尝试使用增量复制（到底能不能复制还得  看<span class="hljs-built_in">offset</span>和复制积压缓冲区的情况） <br><span class="hljs-number">3.2</span>. 如果从节点保存的运行ID与主节点的运行ID不相同，说明从节点在断开前同步的Redis节点并不是当前的主节点，只能进行全量复制<br></code></pre></td></tr></table></figure><p><img src="/image/image-20220117154106931.png" alt="image-20220117154106931"></p><h1 id="故障恢复"><a href="#故障恢复" class="headerlink" title="故障恢复"></a>故障恢复</h1><p><img src="/image/image-20220117154754090.png" alt="image-20220117154754090"></p>]]></content>
    
    
    <categories>
      
      <category>Redis原理</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>为什么Redis非常快</title>
    <link href="/2022/01/24/Redis%E5%8E%9F%E7%90%86/%E4%B8%BA%E4%BB%80%E4%B9%88Redis%E9%9D%9E%E5%B8%B8%E5%BF%AB/"/>
    <url>/2022/01/24/Redis%E5%8E%9F%E7%90%86/%E4%B8%BA%E4%BB%80%E4%B9%88Redis%E9%9D%9E%E5%B8%B8%E5%BF%AB/</url>
    
    <content type="html"><![CDATA[<h1 id="基于内存"><a href="#基于内存" class="headerlink" title="基于内存"></a>基于内存</h1><figure class="highlight"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs">绝大部分请求都是纯粹的内存操作。<br></code></pre></td></tr></table></figure><h1 id="数据结构简单"><a href="#数据结构简单" class="headerlink" title="数据结构简单"></a>数据结构简单</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">对数据操作非常简单<br></code></pre></td></tr></table></figure><h1 id="采用单线程"><a href="#采用单线程" class="headerlink" title="采用单线程"></a>采用单线程</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">避免了多线程上下文切换和竞争产生的消耗<br></code></pre></td></tr></table></figure><h1 id="多路复用"><a href="#多路复用" class="headerlink" title="多路复用"></a>多路复用</h1><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica">使用了多路<span class="hljs-built_in">I</span><span class="hljs-operator">/</span><span class="hljs-built_in">O</span>复用模型，非阻塞<span class="hljs-variable">IO</span><br></code></pre></td></tr></table></figure><h1 id="底层模型"><a href="#底层模型" class="headerlink" title="底层模型"></a>底层模型</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">使用底层模型不同，它们之间底层实现方式以及与客户端之间通信的应用协议不一样，Redis直接自己构建了VM 机制 ，因为一般的系统调用系统函数的话，会浪费一定的时间去移动和请求<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Redis原理</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>九大数据结构</title>
    <link href="/2022/01/24/Redis%E5%8E%9F%E7%90%86/%E4%B9%9D%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <url>/2022/01/24/Redis%E5%8E%9F%E7%90%86/%E4%B9%9D%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h1 id="String"><a href="#String" class="headerlink" title="String"></a>String</h1><figure class="highlight gauss"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs gauss">一个<span class="hljs-built_in">key</span>对应一个value<br><br><span class="hljs-keyword">String</span>类型是二进制安全的。意味着Redis的<span class="hljs-keyword">string</span>可以包含任何数据。比如jpg图片或者序列化的对象。<br><br>字符串value最多可以是<span class="hljs-number">512</span>M<br></code></pre></td></tr></table></figure><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs delphi">简单动态字符串(Simple <span class="hljs-keyword">Dynamic</span> <span class="hljs-keyword">String</span>,缩写SDS)，类似于Java的ArrayList<br><br>当字符串长度小于<span class="hljs-number">1</span>M时，扩容都是加倍现有的空间，如果超过<span class="hljs-number">1</span>M，扩容时一次只会多扩<span class="hljs-number">1</span>M的空间。需要注意的是字符串最大长度为<span class="hljs-number">512</span>M。<br></code></pre></td></tr></table></figure><p><img src="/image/image-20220117010527194.png" alt="image-20220117010527194"></p><h1 id="List"><a href="#List" class="headerlink" title="List"></a>List</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">列表是简单的字符串列表，按照插入顺序排序。可以添加一个元素到列表的头部（左边）或者尾部（右边）<br><br>底层实际是个双向链表，对两端的操作性能很高，通过索引下标的操作中间的节点性能会较差。<br></code></pre></td></tr></table></figure><h2 id="数据结构-1"><a href="#数据结构-1" class="headerlink" title="数据结构"></a>数据结构</h2><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pf">压缩链表zipList和快速链表<span class="hljs-keyword">quick</span>List<br><br>链表元素较少的情况时使用一块连续的内存存储，这个结构是zipList，它将所有的元素紧挨着一起存储，分配的是一块连续的内存。<br><br>数据量比较多的时候才会改成<span class="hljs-keyword">quick</span>List，因为普通的链表需要的附加指针空间太大，会比较浪费空间。<br><br>将链表和ziplist结合起来组成了quicklist，也就是将多个ziplist使用双向指针串起来使用。这样既满足了快速的插入删除性能，又不会出现太大的空间冗余。<br></code></pre></td></tr></table></figure><p><img src="/image/image-20220117010926381.png" alt="image-20220117010926381"></p><h1 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h1><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lasso">与<span class="hljs-built_in">list</span>类似是一个列表的功能，特殊之处在于<span class="hljs-built_in">set</span>是可以自动排重的<br><br>Redis的<span class="hljs-built_in">Set</span>是<span class="hljs-built_in">string</span>类型的无序集合。它底层其实是一个value为<span class="hljs-built_in">null</span>的hash表，所以添加，删除，查找的复杂度都是O(<span class="hljs-number">1</span>)。<br></code></pre></td></tr></table></figure><h2 id="数据结构-2"><a href="#数据结构-2" class="headerlink" title="数据结构"></a>数据结构</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-type">Set</span>数据结构是<span class="hljs-built_in">dict</span>字典，字典是用哈希表实现的。<br><br>Java中HashSet的内部实现使用的是HashMap，只不过所有的value都指向同一个对象。<br><br>Redis的<span class="hljs-built_in">set</span>结构也是一样，它的内部也使用<span class="hljs-built_in">hash</span>结构，所有的value都指向同一个内部值。<br></code></pre></td></tr></table></figure><h1 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h1><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs qml">是一个键值对集合<br><br>一个<span class="hljs-built_in">string</span>类型的field和value的映射表，hash特别适合用于存储对象。类似Java里面的<span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>,<span class="hljs-built_in">Object</span>&gt;<br></code></pre></td></tr></table></figure><h2 id="数据结构-3"><a href="#数据结构-3" class="headerlink" title="数据结构"></a>数据结构</h2><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs armasm">压缩链表zipList和哈希表hashTable<br><br>当<span class="hljs-meta">field</span>-value长度较短且个数较少时，使用ziplist，否则使用hashtable。<br></code></pre></td></tr></table></figure><h1 id="Zset"><a href="#Zset" class="headerlink" title="Zset"></a>Zset</h1><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sqf">有序集合zset与普通集合<span class="hljs-built_in">set</span>非常相似，是一个没有重复元素的字符串集合。<br><br>不同之处是有序集合的每个成员都关联了一个评分（<span class="hljs-built_in">score</span>）,这个评分（<span class="hljs-built_in">score</span>）被用来按照从最低分到最高分的方式排序集合中的成员。集合的成员是唯一的，但是评分可以是重复了。<br><br>因为元素是有序的, 所以你也可以很快的根据评分（<span class="hljs-built_in">score</span>）或者次序（<span class="hljs-built_in">position</span>）来获取一个范围的元素。<br><br>访问有序集合的中间元素也是非常快的,因此你能够使用有序集合作为一个没有重复成员的智能列表。<br></code></pre></td></tr></table></figure><h2 id="数据结构-4"><a href="#数据结构-4" class="headerlink" title="数据结构"></a>数据结构</h2><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gml">Hash和跳跃表skipList<br><br>hash的作用就是关联元素value和权重<span class="hljs-symbol">score</span>，保障元素value的唯一性，可以通过元素value找到相应的<span class="hljs-symbol">score</span>值。<br><br>跳跃表，跳跃表的目的在于给元素value排序，根据<span class="hljs-symbol">score</span>的范围获取元素列表。<br></code></pre></td></tr></table></figure><h2 id="跳跃表"><a href="#跳跃表" class="headerlink" title="跳跃表"></a>跳跃表</h2><p><img src="/image/webp.webp" alt="img"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">从高层索引寻找，如果发现小于则跳跃，如果发现大于则向低一层索引查找，直到查找到为止。<br></code></pre></td></tr></table></figure><h1 id="BitMaps"><a href="#BitMaps" class="headerlink" title="BitMaps"></a>BitMaps</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">用于布隆过滤器<br></code></pre></td></tr></table></figure><h1 id="HyperLogLog"><a href="#HyperLogLog" class="headerlink" title="HyperLogLog"></a>HyperLogLog</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">统计不重复数据，用于大数据基数统计<br></code></pre></td></tr></table></figure><h1 id="Geospatial"><a href="#Geospatial" class="headerlink" title="Geospatial"></a>Geospatial</h1><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">适合存经纬度，基于Z<span class="hljs-keyword">set</span>实现<br></code></pre></td></tr></table></figure><h1 id="Streams"><a href="#Streams" class="headerlink" title="Streams"></a>Streams</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">内存表kafka，用于消息的订阅发布<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Redis原理</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>缓存淘汰算法和淘汰策略</title>
    <link href="/2022/01/24/Redis%E5%8E%9F%E7%90%86/%E7%BC%93%E5%AD%98%E6%B7%98%E6%B1%B0%E7%AE%97%E6%B3%95%E5%92%8C%E6%B7%98%E6%B1%B0%E7%AD%96%E7%95%A5/"/>
    <url>/2022/01/24/Redis%E5%8E%9F%E7%90%86/%E7%BC%93%E5%AD%98%E6%B7%98%E6%B1%B0%E7%AE%97%E6%B3%95%E5%92%8C%E6%B7%98%E6%B1%B0%E7%AD%96%E7%95%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="常用淘汰算法"><a href="#常用淘汰算法" class="headerlink" title="常用淘汰算法"></a>常用淘汰算法</h1><h2 id="FIFO"><a href="#FIFO" class="headerlink" title="FIFO"></a>FIFO</h2><figure class="highlight mathematica"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-built_in">First</span> <span class="hljs-built_in">In</span> <span class="hljs-built_in">First</span> <span class="hljs-built_in">Out</span>，先进先出<br>根据缓存被存储的时间，离当前最远的数据优先被淘汰<br></code></pre></td></tr></table></figure><h2 id="LRU"><a href="#LRU" class="headerlink" title="LRU"></a>LRU</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">Least</span> Recently Used，最近最少使用。<br>算法根据数据的历史访问记录来进行淘汰数据，其核心思想是“如果数据最近被访问过，那么将来被访问的几率也更高”。<br></code></pre></td></tr></table></figure><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 新数据插到链表头部<br><span class="hljs-bullet">2.</span> 每当缓存命中，则将数据移动到链表头部<br><span class="hljs-bullet">3.</span> 当链表满时，将链表尾部的数据丢弃<br></code></pre></td></tr></table></figure><h2 id="LFU"><a href="#LFU" class="headerlink" title="LFU"></a>LFU</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">Least</span> Frequently Used，最不经常使用算法，在一段时间内，数据被使用次数最少的，优先被淘汰<br></code></pre></td></tr></table></figure><h1 id="淘汰策略"><a href="#淘汰策略" class="headerlink" title="淘汰策略"></a>淘汰策略</h1><h2 id="摆烂型"><a href="#摆烂型" class="headerlink" title="摆烂型"></a>摆烂型</h2><h3 id="noeviction"><a href="#noeviction" class="headerlink" title="noeviction"></a>noeviction</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">当内存限制达到时，谁也不删除，返回错误<br></code></pre></td></tr></table></figure><h2 id="针对所有key"><a href="#针对所有key" class="headerlink" title="针对所有key"></a>针对所有key</h2><h3 id="allkeys-lru"><a href="#allkeys-lru" class="headerlink" title="allkeys-lru"></a>allkeys-lru</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">尝试回收最少使用的键，使得新添加的数据有空间存放<br></code></pre></td></tr></table></figure><h3 id="allkey-random"><a href="#allkey-random" class="headerlink" title="allkey-random"></a>allkey-random</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">回收随机的键，使得新添加的数据有空间存放<br></code></pre></td></tr></table></figure><h2 id="针对过期key"><a href="#针对过期key" class="headerlink" title="针对过期key"></a>针对过期key</h2><h3 id="volatile-lru"><a href="#volatile-lru" class="headerlink" title="volatile-lru"></a>volatile-lru</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">尝试回收最少使用的键，使得新添加的数据有空间存放，但是仅限于在过期集合的键<br></code></pre></td></tr></table></figure><h3 id="volatile-random"><a href="#volatile-random" class="headerlink" title="volatile-random"></a>volatile-random</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">回收随机的键，使得新添加的数据有空间存放，但仅限于过期集合的键<br></code></pre></td></tr></table></figure><h3 id="volatile-ttl"><a href="#volatile-ttl" class="headerlink" title="volatile-ttl"></a>volatile-ttl</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">回收在过期集合的键，并且优先回收过期时间较短的键，使得新添加的数据有空间存放<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Redis原理</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>缓存穿透、击穿、雪崩</title>
    <link href="/2022/01/24/Redis%E5%8E%9F%E7%90%86/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E3%80%81%E5%87%BB%E7%A9%BF%E3%80%81%E9%9B%AA%E5%B4%A9/"/>
    <url>/2022/01/24/Redis%E5%8E%9F%E7%90%86/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E3%80%81%E5%87%BB%E7%A9%BF%E3%80%81%E9%9B%AA%E5%B4%A9/</url>
    
    <content type="html"><![CDATA[<h1 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h1><figure class="highlight gauss"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-built_in">key</span>对应的数据在数据源中并不存在，每次针对此<span class="hljs-built_in">key</span>的请求从缓存中获取不到，请求都会压到数据源，从而可能压垮数据源。<br><br>比如用一个不存在的用户id获取用户信息，不论缓存还是数据库都没有，若黑客利用此漏洞进行攻击可能压垮数据库。<br></code></pre></td></tr></table></figure><p><img src="/image/image-20220116205919743.png" alt="image-20220116205919743"></p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">1.对空值缓存<br>2.设置白名单<br>3.采用布隆过滤器<br>4.进行实时监控<br></code></pre></td></tr></table></figure><h1 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h1><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">key对应的数据存在，但在redis中过期，此时又有大量的并发请求，而这些请求发现缓存过期又会从<span class="hljs-built_in">DB</span>中加载并设到缓存，这个时候可能会把<span class="hljs-built_in">DB</span>压垮<br></code></pre></td></tr></table></figure><p><img src="/image/image-20220116210315495.png" alt="image-20220116210315495"></p><h2 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 预先设置热门数据<br><span class="hljs-bullet">2.</span> 调整时长<br><span class="hljs-bullet">3.</span> 使用同步锁，在缓存失效并且面对大量请求时，只让一个请求去数据库请求数据并设到缓存中，其他请求等待这个请求缓存后的结果。<br></code></pre></td></tr></table></figure><p><img src="/image/image-20220116210530279.png" alt="image-20220116210530279"></p><h1 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h1><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">在缓存击穿的基础上有更多的<span class="hljs-built_in">key</span>值过期<br></code></pre></td></tr></table></figure><p><img src="/image/image-20220116210639894.png" alt="image-20220116210639894"></p><h2 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h2><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs excel"><span class="hljs-number">1</span>.多级缓存架构 nginx缓存+redis缓存+其他缓存<br><span class="hljs-number">2</span>.使用锁或队列，让请求在可承受范围内访问<span class="hljs-built_in">DB</span>，并设到缓存中方便其他请求使用<br><span class="hljs-number">3</span>.将缓存失效时间分散开<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Redis原理</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>分布式锁的实现</title>
    <link href="/2022/01/24/Redis%E5%8E%9F%E7%90%86/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <url>/2022/01/24/Redis%E5%8E%9F%E7%90%86/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="满足的条件"><a href="#满足的条件" class="headerlink" title="满足的条件"></a>满足的条件</h1><h2 id="互斥性"><a href="#互斥性" class="headerlink" title="互斥性"></a>互斥性</h2><figure class="highlight"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs">任意时刻，只有一个客户端持有锁<br></code></pre></td></tr></table></figure><h2 id="不会发生死锁"><a href="#不会发生死锁" class="headerlink" title="不会发生死锁"></a>不会发生死锁</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">即使有一个客户端在持有锁的期间崩溃而没有主动解锁，也能保证后续其他客户端能加锁。<br></code></pre></td></tr></table></figure><h2 id="解铃还须系铃人"><a href="#解铃还须系铃人" class="headerlink" title="解铃还须系铃人"></a>解铃还须系铃人</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">加锁和解锁必须是同一个客户端，客户端自己不能把别人加的锁给解了。<br></code></pre></td></tr></table></figure><h2 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">加锁和解锁必须具有原子性<br></code></pre></td></tr></table></figure><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><h2 id="一、多个客户端申请获取锁"><a href="#一、多个客户端申请获取锁" class="headerlink" title="一、多个客户端申请获取锁"></a>一、多个客户端申请获取锁</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">即执行多个setnx语句<br></code></pre></td></tr></table></figure><h2 id="二、获取成功"><a href="#二、获取成功" class="headerlink" title="二、获取成功"></a>二、获取成功</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">即执行setnx语句成功后的客户端，其他客户端等待重试<br></code></pre></td></tr></table></figure><h2 id="三、执行业务逻辑"><a href="#三、执行业务逻辑" class="headerlink" title="三、执行业务逻辑"></a>三、执行业务逻辑</h2><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">从<span class="hljs-built_in">db</span>获取数据，放入缓存<br></code></pre></td></tr></table></figure><h2 id="四、释放锁"><a href="#四、释放锁" class="headerlink" title="四、释放锁"></a>四、释放锁</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">执行<span class="hljs-selector-tag">del</span>语句<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">以上步骤解决了互斥性<br></code></pre></td></tr></table></figure><h1 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">如果业务逻辑出现异常，导致锁无法释放<br></code></pre></td></tr></table></figure><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">设置锁的过期时间，解决死锁问题<br></code></pre></td></tr></table></figure><h1 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h1><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs gcode">在解决问题一后，可能存在释放了其他客户端上的锁，现象如下：<br><br><span class="hljs-number">1.</span> i<span class="hljs-symbol">ndex1</span>业务逻辑没执行完，<span class="hljs-number">3</span>秒后锁被自动释放。<br><span class="hljs-number">2.</span> i<span class="hljs-symbol">ndex2</span>获取到锁，执行业务逻辑，<span class="hljs-number">3</span>秒后锁被自动释放。<br><span class="hljs-number">3.</span> i<span class="hljs-symbol">ndex3</span>获取到锁，执行业务逻辑<br><span class="hljs-number">4.</span> i<span class="hljs-symbol">ndex1</span>业务逻辑执行完成，开始调用del释放锁，这时释放的是i<span class="hljs-symbol">ndex3</span>的锁，导致i<span class="hljs-symbol">ndex3</span>的业务只执行<span class="hljs-number">1</span>s就被别人释放。<br><br>最终等于没锁的情况。<br></code></pre></td></tr></table></figure><h2 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h2><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">setnx获取锁时，设置一个指定的唯一值（例如：<span class="hljs-built_in">uuid</span>）；释放前获取这个值，判断是否自己的锁<br><br>解决了上锁和释放锁是同一个客户端<br></code></pre></td></tr></table></figure><h1 id="问题三"><a href="#问题三" class="headerlink" title="问题三"></a>问题三</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">在解决问题二后，删除操作缺乏原子性，现象如下：<br><br>可能存在有一个客户端刚好执行到删除<span class="hljs-selector-tag">del</span>语句，而且已经完成了uuid的判断，但已经过期，此时第二个客户端开始上锁，可恰好第一个客户端开始执行<span class="hljs-selector-tag">del</span>语句，导致第二个客户端的lock被删除<br></code></pre></td></tr></table></figure><h2 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">LUA脚本保证删除的原子性<br><br>解决了原子性<br></code></pre></td></tr></table></figure><h1 id="与Zookeeper分布式锁的差异"><a href="#与Zookeeper分布式锁的差异" class="headerlink" title="与Zookeeper分布式锁的差异"></a>与Zookeeper分布式锁的差异</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">Redis性能高，但是需要多重优化，而且客户端需要不断去尝试获取锁，比较耗性能<br>Zookeeper可靠性强，不需要不断主动尝试获取锁，只需要负责监听前一个节点即可，性能开销较小<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Redis原理</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>持久化机制</title>
    <link href="/2022/01/24/Redis%E5%8E%9F%E7%90%86/%E6%8C%81%E4%B9%85%E5%8C%96%E6%9C%BA%E5%88%B6/"/>
    <url>/2022/01/24/Redis%E5%8E%9F%E7%90%86/%E6%8C%81%E4%B9%85%E5%8C%96%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h1><p>Redis是基于内存运行的，<strong>将redis数据写入到硬盘这一过程就叫持久化</strong></p><h1 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h1><p>全称Redis Database</p><p>在指定的时间间隔内将某一时刻的<strong>内存快照（Snapshot）</strong>，以<strong>二进制</strong>的方式写入磁盘</p><h2 id="触发"><a href="#触发" class="headerlink" title="触发"></a>触发</h2><p><img src="/image/image-20220117141431659.png" alt="image-20220117141431659"></p><h2 id="持久化流程"><a href="#持久化流程" class="headerlink" title="持久化流程"></a>持久化流程</h2><p>Redis会单独创建（fork）一个子进程来进行持久化，会先将数据写入到 一个<strong>临时文件</strong>中，待持久化过程都结束了，再用这个<strong>临时文件替换上次持久化好的文件。</strong></p><p>整个过程中，<strong>主进程是不进行任何IO操作的</strong>，这就确保了极高的性能。</p><p>如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那RDB方式要比AOF方式更加的高效。</p><p><img src="/image/image-20220117142306007.png" alt="image-20220117142306007"></p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>1.适合大规模的数据恢复</li><li>2.对数据完整性和一致性要求不高</li><li>3.节省磁盘空间</li><li>4.恢复速度快</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul><li>1.最后一次持久化后的数据可能丢失</li><li>2.使用了写时复制技术，会比较消耗性能</li></ul><h1 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h1><p>全称Append Of File</p><p>以日志的形式来记录每个写操作（增量保存），将Redis执行过的所有写指令记录下来(读操作不记录)， </p><p>只许追加文件但不可以改写文件，redis启动之初会读取该文件重新构建数据，</p><p>换言之，redis 重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作</p><h2 id="持久化流程-1"><a href="#持久化流程-1" class="headerlink" title="持久化流程"></a>持久化流程</h2><ul><li>1.客户端的请求写命令会被<code>append</code>追加到AOF缓冲区内</li><li>2.AOF缓冲区根据AOF持久化策略<code>[always,everysec,no]</code>将操作sync同步到磁盘的AOF文件中</li><li>3.AOF文件大小超过重写策略或手动重写时，会对AOF文件<code>rewrite</code>重写，压缩AOF文件容量</li><li>4.Redis服务重启时，会重新<code>load</code>加载AOF文件中的写操作达到数据恢复的目的</li></ul><p><img src="/image/image-20220117145032238.png" alt="image-20220117145032238"></p><h2 id="同步频率设置"><a href="#同步频率设置" class="headerlink" title="同步频率设置"></a>同步频率设置</h2><ul><li>appendfsync always</li></ul><figure class="highlight"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs">始终同步，每次Redis的写入都会立刻记入日志；性能较差但数据完整性比较好<br></code></pre></td></tr></table></figure><ul><li>appendfsync everysec</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">每秒同步，每秒记入日志一次，如果宕机，本秒的数据可能丢失。<br></code></pre></td></tr></table></figure><ul><li>appendfsync no</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">redis不主动进行同步，把同步时机交给操作系统。<br></code></pre></td></tr></table></figure><h2 id="Rewrite压缩"><a href="#Rewrite压缩" class="headerlink" title="Rewrite压缩"></a>Rewrite压缩</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><h2 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h2><ul><li>1.备份机制更稳健，丢失数据概率更低。</li><li>2.读的日志文本，通过操作AOF稳健，可以处理误操作。</li></ul><h2 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h2><ul><li>1.比起RDB占用更多的磁盘空间</li><li>2.恢复备份速度要慢</li><li>3.每次读写都同步的话，有一定的性能压力</li><li>4.存在个别Bug，造成恢复不能</li></ul><p><img src="/image/image-20220117145601472.png" alt="image-20220117145601472"></p><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">AOF和RDB同时开启，系统默认取AOF的数据（数据不会存在丢失）<br></code></pre></td></tr></table></figure><h1 id="究竟使用哪个？"><a href="#究竟使用哪个？" class="headerlink" title="究竟使用哪个？"></a>究竟使用哪个？</h1><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">官方推荐两个都启用。<br><br>如果对数据不敏感，可以选单独用RDB。<br><br>不建议单独用 AOF，因为可能会出现<span class="hljs-keyword">Bug。</span><br><span class="hljs-keyword"></span><br>如果只是做纯内存缓存，可以都不用。<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Redis原理</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>布隆过滤器</title>
    <link href="/2022/01/24/Redis%E5%8E%9F%E7%90%86/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
    <url>/2022/01/24/Redis%E5%8E%9F%E7%90%86/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="位图"><a href="#位图" class="headerlink" title="位图"></a>位图</h1><p>位图中的每一个槽只占1 bit的内存，所以即便面对10亿数据也只占用119多M的内存</p><h1 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h1><figure class="highlight"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs">在面临大数据的情况下，判断一个数是否存在<br></code></pre></td></tr></table></figure><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">将判断的值分多个<span class="hljs-built_in">hash</span>函数进行计算，如果其中有一个<span class="hljs-built_in">hash</span>函数的值不等于1，则可以判定这个数不存在；<br>反之大概率存在<br></code></pre></td></tr></table></figure><h1 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h1><ul><li><p>占用内存小</p></li><li><p>增加和查询的时间复杂度为：O(K)，K为哈希函数的个数</p></li><li><p>哈希函数相互之间没有关系，方便硬件并行运算</p></li><li><p>布隆过滤器本身不存储元素本身，在某些对保密要求比较严格的场合有很大优势</p></li><li><p>数据量很大时，布隆过滤器可以表示全集</p></li><li><p>使用同一组散列函数的布隆过滤器可以进行交、并、差运算</p></li><li><h1 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h1></li><li><p>存在误判率</p></li><li><p>不能获取元素本身</p></li><li><p>一般情况下不能从布隆过滤器删除元素</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Redis原理</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>MySQL原理</title>
    <link href="/2022/01/24/MySQL/MySQL%E5%8E%9F%E7%90%86/"/>
    <url>/2022/01/24/MySQL/MySQL%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="一、概论"><a href="#一、概论" class="headerlink" title="一、概论"></a>一、概论</h1><p>使用索引查找数据性能很快，避免了全表扫描时的多次磁盘IO。</p><p>但是，使用索引实际上也需要在索引中查找数据，而且数据量和表中的是一样的</p><p>那为什么索引就能快呢？</p><p>这就跟索引使用了哪些数据结构有关</p><p>而索引是帮助Mysql高效获取数据的 <strong>排好序</strong> 的 <strong>数据结构</strong></p><h1 id="二、索引分类"><a href="#二、索引分类" class="headerlink" title="二、索引分类"></a>二、索引分类</h1><h2 id="主键索引"><a href="#主键索引" class="headerlink" title="主键索引"></a>主键索引</h2><p>主键自带索引效果，也就意味着通过主键来查询表中的记录，性能是非常好的</p><h2 id="普通索引"><a href="#普通索引" class="headerlink" title="普通索引"></a>普通索引</h2><p>为普通的列创建索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs mysql"># 格式<br>create index 索引名称 on 表名(列名)<br># 例子<br>create index idx_name on employees(name)<br></code></pre></td></tr></table></figure><h2 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h2><p>就像是唯一列，列中的数据是唯一的。性能比普通的性能更好</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 格式<br>create unique index 索引名称 on 表名(列名)<br># 例子<br>create unique index index_name on employees(name)<br></code></pre></td></tr></table></figure><h2 id="联合索引（组合索引）"><a href="#联合索引（组合索引）" class="headerlink" title="联合索引（组合索引）"></a>联合索引（组合索引）</h2><p>一次性维表中的多个字段一起创建索引，但建议不要超过5个；<strong>最左前缀法则（如何命中联合索引中的索引列）</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 格式<br>create index 索引名称 on 表名(列1,列2,列3)<br># 例子<br>create index idx_name_age_position on employees(name,age,position)<br></code></pre></td></tr></table></figure><h2 id="全文索引"><a href="#全文索引" class="headerlink" title="全文索引"></a>全文索引</h2><p>MyISAM存储引擎支持全文索引。在实际开发中，并不会使用MySQL提供的MyISAM存储引擎的全文索引功能来实现全文查找，而是会通过使用第三方的搜索引擎中间件比如说ElasicSearch（使用较多）、Solr</p><h1 id="三、InnoDB和MyISAM的区别"><a href="#三、InnoDB和MyISAM的区别" class="headerlink" title="三、InnoDB和MyISAM的区别"></a>三、InnoDB和MyISAM的区别</h1><h2 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h2><ul><li>也称<strong>聚簇索引</strong>——把索引和数据存放在一个**文件(.ibd)**中，通过找到所有后就能直接在索引树上的叶子节点中获取完整的数据</li><li>可以实现行/表锁</li><li>支持外键</li><li>支持事务</li></ul><img src="/image/image-20211113144109591.png" alt="image-20211113144109591" style="zoom:50%;" /><h2 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h2><ul><li>也称<strong>非聚簇索引</strong>——把索引和数据分开放到(.myi)和(.myd)文件中，查找到索引后还要去另一个文件中查找数据，相比聚簇索引而言查询性能会稍微差一些</li><li>天然支持表锁</li><li>支持全文索引</li><li>不支持外键</li><li>不支持事务</li></ul><img src="/image/image-20211113143823232.png" alt="image-20211113143823232" style="zoom:50%;" /><h1 id="四、索引常问面试题"><a href="#四、索引常问面试题" class="headerlink" title="四、索引常问面试题"></a>四、索引常问面试题</h1><h2 id="为什么非主键索引的叶子节点存放的数据是主键值"><a href="#为什么非主键索引的叶子节点存放的数据是主键值" class="headerlink" title="为什么非主键索引的叶子节点存放的数据是主键值"></a>为什么非主键索引的叶子节点存放的数据是主键值</h2><img src="/image/image-20211113144954316.png" alt="image-20211113144954316" style="zoom:50%;" /><p><strong>节约存储空间。</strong>避免存储冗余重复的数据</p><p><strong>维护简单。</strong>因为id是唯一且难以变更的，数据的增删很难会影响到id的变化</p><p>​                   倘若存储的数据还包含其他非主键数据，当其被修改时不仅在数据库中需要修改，而且还需要对索引进行修改</p><h2 id="为什么InnoDB表必须创建主键"><a href="#为什么InnoDB表必须创建主键" class="headerlink" title="为什么InnoDB表必须创建主键"></a>为什么InnoDB表必须创建主键</h2><p> <strong>增加性能。</strong>如果InnoDB表不创建主键，MySQL优化器会自动创建一个虚拟的主键，于是普通索引（辅助索引）就会使用这个虚拟主键进行查找，并且创建虚拟主键则会增加性能开销</p><h2 id="为什么使用主键时推荐使用整型的自增主键"><a href="#为什么使用主键时推荐使用整型的自增主键" class="headerlink" title="为什么使用主键时推荐使用整型的自增主键"></a>为什么使用主键时推荐使用整型的自增主键</h2><ul><li><strong>使用整型</strong></li></ul><p><strong>避免不必要的开销。</strong>整型的数据大小是非常好比较的，如果使用字符串则需要进行依次编码后才能进行比较</p><ul><li><strong>使用自增</strong></li></ul><p><strong>避免不必要的开销。</strong>当使用了不规律的数据时，索引树需要通过<strong>自旋</strong>的方式使叶子节点从小到大-从左到右有序排列，而多次的<strong>自旋</strong>会给系统带来一定的性能开销</p><h1 id="五、联合索引和最左前缀法则"><a href="#五、联合索引和最左前缀法则" class="headerlink" title="五、联合索引和最左前缀法则"></a>五、联合索引和最左前缀法则</h1><h2 id="联合索引的存储结构"><a href="#联合索引的存储结构" class="headerlink" title="联合索引的存储结构"></a>联合索引的存储结构</h2><p>联合索引会使节点中存放的<strong>索引键增多</strong></p><img src="/image/image-20211113151449444.png" alt="image-20211113151449444" style="zoom:50%;" /><h2 id="最左前缀法则"><a href="#最左前缀法则" class="headerlink" title="最左前缀法则"></a>最左前缀法则</h2><p>表示一条sql语句在联合索引中有没有走索引（命中索引/不会全表扫描）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 创建联合索引<br>create index idex_a_b_c on table1(a,b,c)<br># 判断sql语句有没有命中索引<br><br># 命中a<br>select * from table1 where a = 10;<br># 命中a<br>select * from table1 where a = 10 and b = 20;<br># 命中a<br>select * from table1 where a = 10 and b = 20 and c = 30;<br># 未命中b，因为a没有被命中，所以b也不会被命中<br>select * from table1 where b = 10;<br># 未命中b也没命中c，因为a没有被命中，所以b也不会被命中，b没有被命中c也不会被命中<br>select * from table1 where b = 10 and c = 30;<br># 命中a但没有命中b，因为b没有被命中，所以c也不会被命中<br>select * from table1 where a = 10 and c = 30;<br># 既没有命中a，也没有命中b，更没有命中c<br>select * from table1 where c = 30;<br># 命中abc，mysql中有一个内部优化器，会做一次内部优化<br>select * from table1 where a = 10 and c = 30 and b = 20;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>RabbitMQ学习</title>
    <link href="/2022/01/24/RabbitMQ/RabbitMQ%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/01/24/RabbitMQ/RabbitMQ%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="MQ（Message-Queue）是什么？"><a href="#MQ（Message-Queue）是什么？" class="headerlink" title="MQ（Message Queue）是什么？"></a>MQ（Message Queue）是什么？</h1><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>实现系统间的解耦</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>通过利用高效的消息传递机制进行平台无关的数据交流，并基于数据通信进行分布式系统的集成</p><h2 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h2><p><img src="/image/image-20211225134539204.png" alt="image-20211225134539204"></p><ul><li>生成者：不断向消息队列中生产消息</li><li>消费者：不断向队列中获取消息</li><li>消息的生产和消费都是异步的，而且只关心消息的发送和接收，没有业务逻辑的侵入，轻松地实现系统间解耦</li></ul><figure class="highlight"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs">因此跨系统通讯时，首选消息队列<br></code></pre></td></tr></table></figure><h2 id="消息中间件"><a href="#消息中间件" class="headerlink" title="消息中间件"></a>消息中间件</h2><p>如何实现，就用到了消息中间件</p><p><img src="/image/image-20211225135206345.png" alt="image-20211225135206345"></p><h2 id="AMQP协议"><a href="#AMQP协议" class="headerlink" title="AMQP协议"></a>AMQP协议</h2><p><img src="/image/image-20211225140413964.png" alt="image-20211225140413964"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><img src="/image/image-20211225144002366.png" alt="image-20211225144002366"></p><p><img src="/image/image-20211225144024194.png" alt="image-20211225144024194"></p><p><img src="/image/image-20211225144417498.png" alt="image-20211225144417498"></p><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">rabbitmq-plugins <span class="hljs-builtin-name">enable</span> rabbitmq_management<br></code></pre></td></tr></table></figure><h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">rabbitmq-<span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">systemctl <span class="hljs-keyword">start</span> rabbitmq-<span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">systemctl status rabbitmq-<span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">systemctl <span class="hljs-keyword">restart</span> rabbitmq-<span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vbscript">systemctl <span class="hljs-keyword">stop</span> rabbitmq-<span class="hljs-built_in">server</span><br></code></pre></td></tr></table></figure><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">journalctl </span>-xe 查看报错日志<br></code></pre></td></tr></table></figure><h1 id="管理命令和管理界面"><a href="#管理命令和管理界面" class="headerlink" title="管理命令和管理界面"></a>管理命令和管理界面</h1><p>通过自行配置开放端口号进入到WEB的管理界面</p><p>在没有WEB界面下，可以通过以下命令进行管理</p><p><img src="/image/image-20211225153705068.png" alt="image-20211225153705068"></p><h2 id="默认端口说明"><a href="#默认端口说明" class="headerlink" title="默认端口说明"></a>默认端口说明</h2><ul><li>15672(HTTP)：HTTP WEB界面端口</li><li>5672(AMQP)：TCP 通讯端口（Java操作时会用到的端口）</li><li>25672(CLUSTERING)：集群通讯</li></ul><h1 id="AMQP协议-1"><a href="#AMQP协议-1" class="headerlink" title="AMQP协议"></a>AMQP协议</h1><p>Advanced Message Queuing Protocal 高级消息队列协议是一个进程间传递异步消息的网路协议</p><p><img src="/image/image-20211225170524287.png" alt="image-20211225170524287"></p><p>Virtual Host 相当于MySQL中的库，操作时，常常为每一个应用建立一个虚拟主机</p><h1 id="七种消息发布模式"><a href="#七种消息发布模式" class="headerlink" title="七种消息发布模式"></a>七种消息发布模式</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.rabbitmq.com/getstarted.html<br></code></pre></td></tr></table></figure><h1 id="点对点模型"><a href="#点对点模型" class="headerlink" title="点对点模型"></a>点对点模型</h1><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hello world</span><br></code></pre></td></tr></table></figure><p><img src="/image/image-20211226162905062.png" alt="image-20211226162905062"></p><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><ul><li>登录</li></ul><h2 id="生成者"><a href="#生成者" class="headerlink" title="生成者"></a>生成者</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs json">package com.wu.helloworld;<br><br>import com.rabbitmq.client.Channel;<br>import com.rabbitmq.client.Connection;<br>import com.wu.utils.RabbitMQUtils;<br>import org.junit.Test;<br><br>import java.io.IOException;<br>import java.util.concurrent.TimeoutException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @author Haixin Wu</span><br><span class="hljs-comment"> * @date 2021/12/25 20:58</span><br><span class="hljs-comment"> * @since 1.0</span><br><span class="hljs-comment"> */</span><br>public class Provider &#123;<br>    @Test<br>    public void testSendMessage() throws IOException, TimeoutException &#123;<br>        Connection connection = RabbitMQUtils.getConnection();<br>        <span class="hljs-comment">//从连接中创建一个通道对象</span><br>        Channel channel = connection.createChannel();<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 通道绑定对应的消息队列</span><br><span class="hljs-comment">         * 参数1：队列名称，如果队列不存在自动创建</span><br><span class="hljs-comment">         * 参数2：定义的队列是否持久化？持久化会将队列写入磁盘，重启后仍存在</span><br><span class="hljs-comment">         * 参数3：是否独占队列？独占表示一个队列只允许当前连接可用</span><br><span class="hljs-comment">         * 参数4：是否在消费完成后自动消除队列？</span><br><span class="hljs-comment">         * 参数5：附加参数</span><br><span class="hljs-comment">         */</span><br>        channel.queueDeclare(<span class="hljs-attr">&quot;hello&quot;</span>, false, false, false, null);<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 发布消息</span><br><span class="hljs-comment">         * 参数1：交换机名称</span><br><span class="hljs-comment">         * 参数2：队列名称</span><br><span class="hljs-comment">         * 参数3：传递消息额外设置</span><br><span class="hljs-comment">         * 参数4：消息的具体内容</span><br><span class="hljs-comment">         */</span><br>        channel.basicPublish(<span class="hljs-attr">&quot;&quot;</span>,<span class="hljs-attr">&quot;hello&quot;</span>,null,<span class="hljs-attr">&quot;hello rabbit&quot;</span>.getBytes());<br>        RabbitMQUtils.closeConnectionAndChanel(channel, connection);<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="绑定队列和发送队列"><a href="#绑定队列和发送队列" class="headerlink" title="绑定队列和发送队列"></a>绑定队列和发送队列</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 通道绑定对应的消息队列</span><br><span class="hljs-comment"> * 参数1：队列名称，如果队列不存在自动创建</span><br><span class="hljs-comment"> * 参数2：定义的队列是否持久化？持久化会将队列写入磁盘，重启后仍存在，仅是队列持久化，其中的消息内容并不会持久化</span><br><span class="hljs-comment"> * 参数3：是否独占队列？独占表示一个队列只允许当前连接可用</span><br><span class="hljs-comment"> * 参数4：是否在消费者消费完成（断开连接）后自动消除队列？</span><br><span class="hljs-comment"> * 参数5：附加参数</span><br><span class="hljs-comment"> */</span><br>channel.queueDeclare(<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">null</span>);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 发布消息</span><br><span class="hljs-comment"> * 参数1：交换机名称</span><br><span class="hljs-comment"> * 参数2：队列名称</span><br><span class="hljs-comment"> * 参数3：传递消息额外设置，例如可以传参MessageProperties.PERSISTENT_TEXT_PLAIN表示队列中的消息持久化</span><br><span class="hljs-comment"> * 参数4：消息的具体内容</span><br><span class="hljs-comment"> */</span><br>channel.basicPublish(<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-keyword">null</span>,<span class="hljs-string">&quot;hello rabbit&quot;</span>.getBytes());<br></code></pre></td></tr></table></figure><h2 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wu.helloworld;<br><br><span class="hljs-keyword">import</span> com.rabbitmq.client.*;<br><span class="hljs-keyword">import</span> com.wu.utils.RabbitMQUtils;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeoutException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Haixin Wu</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/12/25 21:20</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Customer</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, TimeoutException </span>&#123;<br>        <span class="hljs-comment">//创建连接mq的连接工厂对象</span><br>        Connection connection = RabbitMQUtils.getConnection();<br>        <span class="hljs-comment">//从连接中创建一个通道对象</span><br>        Channel channel = connection.createChannel();<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 通道绑定对应的消息队列</span><br><span class="hljs-comment">         * 参数1：队列名称，如果队列不存在自动创建</span><br><span class="hljs-comment">         * 参数2：定义的队列是否持久化？持久化会将队列写入磁盘，重启后仍存在</span><br><span class="hljs-comment">         * 参数3：是否独占队列？独占表示一个队列只允许当前连接可用</span><br><span class="hljs-comment">         * 参数4：是否在消费者消费完成（断开连接）后自动消除队列？</span><br><span class="hljs-comment">         * 参数5：附加参数</span><br><span class="hljs-comment">         */</span><br>        channel.queueDeclare(<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">null</span>);<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 消费消息</span><br><span class="hljs-comment">         * 参数1：队列名称</span><br><span class="hljs-comment">         * 参数2：开始消息时的自动确认机制</span><br><span class="hljs-comment">         * 参数3：消费时的回调接口</span><br><span class="hljs-comment">         */</span><br>        channel.basicConsume(<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-keyword">true</span>, <span class="hljs-keyword">new</span> DefaultConsumer(channel)&#123;<br>            <span class="hljs-meta">@Override</span> <span class="hljs-comment">// 最后一个参数：消息队列中取出的消息</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleDelivery</span><span class="hljs-params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="hljs-keyword">byte</span>[] body)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;new String(body) = &quot;</span> + <span class="hljs-keyword">new</span> String(body));<br>            &#125;<br>        &#125;);<br>        <span class="hljs-comment">//不建议关闭，因为消费者要一直监听</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="任务模型"><a href="#任务模型" class="headerlink" title="任务模型"></a>任务模型</h1><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">Work queues</span><br></code></pre></td></tr></table></figure><p><img src="/image/image-20211226162919813.png" alt="image-20211226162919813"></p><h2 id="平均消费消息"><a href="#平均消费消息" class="headerlink" title="平均消费消息"></a>平均消费消息</h2><h3 id="生成者-1"><a href="#生成者-1" class="headerlink" title="生成者"></a>生成者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wu.task;<br><br><span class="hljs-keyword">import</span> com.rabbitmq.client.Channel;<br><span class="hljs-keyword">import</span> com.rabbitmq.client.Connection;<br><span class="hljs-keyword">import</span> com.wu.utils.RabbitMQUtils;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Haixin Wu</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/12/26 16:44</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Provider</span> </span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">taskProviderTest</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        Connection connection = RabbitMQUtils.getConnection();<br>        Channel channel = connection.createChannel();<br>        channel.queueDeclare(<span class="hljs-string">&quot;work&quot;</span>,<span class="hljs-keyword">false</span>,<span class="hljs-keyword">false</span>,<span class="hljs-keyword">false</span>,<span class="hljs-keyword">null</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">200</span>; i++) &#123;<br>            channel.basicPublish(<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;work&quot;</span>,<span class="hljs-keyword">null</span>,(i + <span class="hljs-string">&quot; hello task&quot;</span>).getBytes());<br>        &#125;<br>        RabbitMQUtils.closeConnectionAndChanel(channel, connection);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="消费者1"><a href="#消费者1" class="headerlink" title="消费者1"></a>消费者1</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wu.task;<br><br><span class="hljs-keyword">import</span> com.rabbitmq.client.*;<br><span class="hljs-keyword">import</span> com.wu.utils.RabbitMQUtils;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Haixin Wu</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/12/26 16:44</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Customer1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        Connection connection = RabbitMQUtils.getConnection();<br>        Channel channel = connection.createChannel();<br>        channel.queueDeclare(<span class="hljs-string">&quot;work&quot;</span>,<span class="hljs-keyword">false</span>,<span class="hljs-keyword">false</span>,<span class="hljs-keyword">false</span>,<span class="hljs-keyword">null</span>);<br>        channel.basicConsume(<span class="hljs-string">&quot;work&quot;</span>,<span class="hljs-keyword">true</span>, <span class="hljs-keyword">new</span> DefaultConsumer(channel)&#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleDelivery</span><span class="hljs-params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="hljs-keyword">byte</span>[] body)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;Customer1: &quot;</span> + <span class="hljs-keyword">new</span> String(body));<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="消费者2"><a href="#消费者2" class="headerlink" title="消费者2"></a>消费者2</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wu.task;<br><br><span class="hljs-keyword">import</span> com.rabbitmq.client.*;<br><span class="hljs-keyword">import</span> com.wu.utils.RabbitMQUtils;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Haixin Wu</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/12/26 16:45</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Customer2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        Connection connection = RabbitMQUtils.getConnection();<br>        Channel channel = connection.createChannel();<br>        channel.queueDeclare(<span class="hljs-string">&quot;work&quot;</span>,<span class="hljs-keyword">false</span>,<span class="hljs-keyword">false</span>,<span class="hljs-keyword">false</span>,<span class="hljs-keyword">null</span>);<br>        channel.basicConsume(<span class="hljs-string">&quot;work&quot;</span>,<span class="hljs-keyword">true</span>, <span class="hljs-keyword">new</span> DefaultConsumer(channel)&#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleDelivery</span><span class="hljs-params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="hljs-keyword">byte</span>[] body)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;Customer2: &quot;</span> + <span class="hljs-keyword">new</span> String(body));<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/image-20211226170247634.png" alt="image-20211226170247634" style="zoom: 50%;" /><img src="/image/image-20211226170302705.png" alt="image-20211226170302705" style="zoom:50%;" /></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs">默认情况下，RabbitMQ在任务模型下会将消息按顺序发送给下一个使用者。<br><br>如果消息总量能够整除消费者的数量，那么每个消费者都能够收到相同数量的消息。这种分发消息的方式成为循环。<br><br>但是对于存在一个消费者快，一个消费者慢的情况而言，循环分发消息的方式就不适应了。<br></code></pre></td></tr></table></figure><h2 id="消息自动确认机制"><a href="#消息自动确认机制" class="headerlink" title="消息自动确认机制"></a>消息自动确认机制</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 在默认的消息消费的机制（平均分配）下，代表着开始消息时的自动确认机制的第二参数，是开启的，</span><br><span class="hljs-comment"> * 这种情况下它不关心你的业务是否处理完，消息在接收到消息时会自动地向消息队列中表示确认。</span><br><span class="hljs-comment"> * 举例说明：如果分配给该消费者5个消息，此时消费者无论消息是否完成都会自动地向消息队列中表示确认，</span><br><span class="hljs-comment"> * 如果进行到第3个消息时宕机了，剩下的2个消息就会被丢失了，这并不是我们希望发生的</span><br><span class="hljs-comment"> */</span><br>channel.basicConsume(<span class="hljs-string">&quot;work&quot;</span>,<span class="hljs-keyword">true</span>, <span class="hljs-keyword">new</span> DefaultConsumer(channel)&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleDelivery</span><span class="hljs-params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="hljs-keyword">byte</span>[] body)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>         System.out.println(<span class="hljs-string">&quot;Customer2: &quot;</span> + <span class="hljs-keyword">new</span> String(body));<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="避免信息丢失的方法"><a href="#避免信息丢失的方法" class="headerlink" title="避免信息丢失的方法"></a>避免信息丢失的方法</h2><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 不能让消息队列将消息一次性地给消费者，让消息一个一个地来，所以就让消息通道中只有一个消息</span><br>channel.basicQos(<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 关闭消息确认机制</span><br>channel.basicConsume(<span class="hljs-string">&quot;work&quot;</span>,<span class="hljs-keyword">false</span>, <span class="hljs-keyword">new</span> DefaultConsumer(channel)&#123;<br>      <span class="hljs-meta">@Override</span><br>      <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleDelivery</span><span class="hljs-params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="hljs-keyword">byte</span>[] body)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;Customer1: &quot;</span> + <span class="hljs-keyword">new</span> String(body));<br>      &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 手动确认消息。如果服务器突然宕机，未确认的消息就会重新回到消息队列中等待消费</span><br><span class="hljs-comment">// 第一个参数，标记为手动确认消息标识</span><br><span class="hljs-comment">// 第二个参数，是否开启多消息同时确认，false每次确认一个。因为通道中每次只有一个消息，所以此处设为false</span><br>channel.basicAck(envelope.getDeliveryTag(), <span class="hljs-keyword">false</span>);<br></code></pre></td></tr></table></figure><h2 id="能者多劳消费消息"><a href="#能者多劳消费消息" class="headerlink" title="能者多劳消费消息"></a>能者多劳消费消息</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">通过上例方法不仅能够实现避免消息丢失，而且还能实现能者多劳。<br></code></pre></td></tr></table></figure><img src="/image/image-20211229225000769.png" alt="image-20211229225000769" style="zoom: 50%;" /><img src="/image/image-20211229225016640.png" alt="image-20211229225016640" style="zoom:50%;" /><h1 id="广播-发布-订阅模型"><a href="#广播-发布-订阅模型" class="headerlink" title="广播/发布/订阅模型"></a>广播/发布/订阅模型</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">Publish/Subscribe<br></code></pre></td></tr></table></figure><p><img src="/image/image-20211230202722263.png" alt="image-20211230202722263"></p><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">交换机和队列的自动生成取决于消费者<br></code></pre></td></tr></table></figure><h2 id="适用场景-1"><a href="#适用场景-1" class="headerlink" title="适用场景"></a>适用场景</h2><ul><li>注册</li><li>提交订单时，既要与订单表进行交互，也要和库存进行交互</li><li>生成日志</li></ul><h2 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wu.fanout;<br><br><span class="hljs-keyword">import</span> com.rabbitmq.client.Channel;<br><span class="hljs-keyword">import</span> com.rabbitmq.client.Connection;<br><span class="hljs-keyword">import</span> com.wu.utils.RabbitMQUtils;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Haixin Wu</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/12/30 20:34</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Provider</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        Connection connection = RabbitMQUtils.getConnection();<br>        Channel channel = connection.createChannel();<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 将通道指明指定交换机</span><br><span class="hljs-comment">         * 参数1.交换机名称</span><br><span class="hljs-comment">         * 参数2.交换机类型</span><br><span class="hljs-comment">         */</span><br>        channel.exchangeDeclare(<span class="hljs-string">&quot;logs&quot;</span>, <span class="hljs-string">&quot;fanout&quot;</span>);<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 发送消息</span><br><span class="hljs-comment">         */</span><br>        channel.basicPublish(<span class="hljs-string">&quot;logs&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-keyword">null</span>,<span class="hljs-string">&quot;faount type message&quot;</span>.getBytes());<br>        RabbitMQUtils.closeConnectionAndChanel(channel, connection);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="消费者-1"><a href="#消费者-1" class="headerlink" title="消费者"></a>消费者</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wu.fanout;<br><br><span class="hljs-keyword">import</span> com.rabbitmq.client.*;<br><span class="hljs-keyword">import</span> com.wu.utils.RabbitMQUtils;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Haixin Wu</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/12/30 20:42</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Customer1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        Connection connection = RabbitMQUtils.getConnection();<br>        Channel channel = connection.createChannel();<br>        <span class="hljs-comment">// 通道绑定交换机</span><br>        channel.exchangeDeclare(<span class="hljs-string">&quot;logs&quot;</span>, <span class="hljs-string">&quot;fanout&quot;</span>);<br>        <span class="hljs-comment">// 临时队列</span><br>        String queueName = channel.queueDeclare().getQueue();<br>        <span class="hljs-comment">// 绑定交换机和队列</span><br>        channel.queueBind(queueName, <span class="hljs-string">&quot;logs&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-comment">// 消费消息</span><br>        channel.basicConsume(queueName, <span class="hljs-keyword">true</span>, <span class="hljs-keyword">new</span> DefaultConsumer(channel)&#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleDelivery</span><span class="hljs-params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="hljs-keyword">byte</span>[] body)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;消费者1：&quot;</span> + <span class="hljs-keyword">new</span> String(body));<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/image-20211230205302790.png" alt="image-20211230205302790"></p><p><img src="/image/image-20211230205309723.png" alt="image-20211230205309723"></p><h1 id="路由模型"><a href="#路由模型" class="headerlink" title="路由模型"></a>路由模型</h1><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">Routing</span><br></code></pre></td></tr></table></figure><p><img src="/image/image-20211231161512169.png" alt="image-20211231161512169"></p><h2 id="适用场景-2"><a href="#适用场景-2" class="headerlink" title="适用场景"></a>适用场景</h2><ul><li>日志打印，根据日志类型分发到不同的消费者中去</li></ul><h2 id="生产者-1"><a href="#生产者-1" class="headerlink" title="生产者"></a>生产者</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wu.direct;<br><br><span class="hljs-keyword">import</span> com.rabbitmq.client.Channel;<br><span class="hljs-keyword">import</span> com.rabbitmq.client.Connection;<br><span class="hljs-keyword">import</span> com.wu.utils.RabbitMQUtils;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Haixin Wu</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/12/31 16:20</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Provider</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        Connection connection = RabbitMQUtils.getConnection();<br>        Channel channel = connection.createChannel();<br>        <span class="hljs-comment">// 通过通道声明交换机  参数1：交换机名称  参数2：路由模式</span><br>        channel.exchangeDeclare(<span class="hljs-string">&quot;logs_direct&quot;</span>, <span class="hljs-string">&quot;direct&quot;</span>);<br>        <span class="hljs-comment">// 发送消息</span><br>        String routingKey = <span class="hljs-string">&quot;info&quot;</span>;<br>        channel.basicPublish(<span class="hljs-string">&quot;logs_direct&quot;</span>, routingKey, <span class="hljs-keyword">null</span>, (<span class="hljs-string">&quot;这是direct模型发布的基于route key：[&quot;</span>+routingKey+<span class="hljs-string">&quot;]发送的消息&quot;</span>).getBytes());<br>        RabbitMQUtils.closeConnectionAndChanel(channel, connection);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="消费者-2"><a href="#消费者-2" class="headerlink" title="消费者"></a>消费者</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wu.direct;<br><br><span class="hljs-keyword">import</span> com.rabbitmq.client.*;<br><span class="hljs-keyword">import</span> com.wu.utils.RabbitMQUtils;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Haixin Wu</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/12/31 16:26</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Customer1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        Connection connection = RabbitMQUtils.getConnection();<br>        Channel channel = connection.createChannel();<br>        <span class="hljs-comment">// 通道声明交换机和交换机的类型</span><br>        channel.exchangeDeclare(<span class="hljs-string">&quot;logs_direct&quot;</span>, <span class="hljs-string">&quot;direct&quot;</span>);<br>        <span class="hljs-comment">// 创建一个临时队列</span><br>        String queue = channel.queueDeclare().getQueue();<br>        <span class="hljs-comment">// 基于route key绑定队列和交换机</span><br>        channel.queueBind(queue, <span class="hljs-string">&quot;logs_direct&quot;</span>, <span class="hljs-string">&quot;error&quot;</span>);<br>        <span class="hljs-comment">// 获取队列中的消息</span><br>        channel.basicConsume(queue, <span class="hljs-keyword">true</span>, <span class="hljs-keyword">new</span> DefaultConsumer(channel)&#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleDelivery</span><span class="hljs-params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="hljs-keyword">byte</span>[] body)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;消费者1：&quot;</span> + <span class="hljs-keyword">new</span> String(body));<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wu.direct;<br><br><span class="hljs-keyword">import</span> com.rabbitmq.client.*;<br><span class="hljs-keyword">import</span> com.wu.utils.RabbitMQUtils;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Haixin Wu</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/12/31 16:26</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Customer2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        Connection connection = RabbitMQUtils.getConnection();<br>        Channel channel = connection.createChannel();<br>        <span class="hljs-comment">// 通道声明交换机和交换机的类型</span><br>        channel.exchangeDeclare(<span class="hljs-string">&quot;logs_direct&quot;</span>, <span class="hljs-string">&quot;direct&quot;</span>);<br>        <span class="hljs-comment">// 创建一个临时队列</span><br>        String queue = channel.queueDeclare().getQueue();<br>        <span class="hljs-comment">// 基于route key绑定队列和交换机</span><br>        channel.queueBind(queue, <span class="hljs-string">&quot;logs_direct&quot;</span>, <span class="hljs-string">&quot;info&quot;</span>);<br>        channel.queueBind(queue, <span class="hljs-string">&quot;logs_direct&quot;</span>, <span class="hljs-string">&quot;error&quot;</span>);<br>        channel.queueBind(queue, <span class="hljs-string">&quot;logs_direct&quot;</span>, <span class="hljs-string">&quot;warning&quot;</span>);<br>        <span class="hljs-comment">// 获取队列中的消息</span><br>        channel.basicConsume(queue, <span class="hljs-keyword">true</span>, <span class="hljs-keyword">new</span> DefaultConsumer(channel)&#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleDelivery</span><span class="hljs-params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="hljs-keyword">byte</span>[] body)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;消费者1：&quot;</span> + <span class="hljs-keyword">new</span> String(body));<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/image-20211231164051971.png" alt="image-20211231164051971"></p><p><img src="/image/image-20211231164117009.png" alt="image-20211231164117009"></p><p><img src="/image/image-20211231164148933.png" alt="image-20211231164148933"></p><p><img src="/image/image-20211231164155421.png" alt="image-20211231164155421"></p><h1 id="主题模型"><a href="#主题模型" class="headerlink" title="主题模型"></a>主题模型</h1><p><img src="/image/image-20220101141004814.png" alt="image-20220101141004814"></p><h2 id="适用场景-3"><a href="#适用场景-3" class="headerlink" title="适用场景"></a>适用场景</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><h2 id="注意点-1"><a href="#注意点-1" class="headerlink" title="注意点"></a>注意点</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">只有主题模型才支持通配符<br></code></pre></td></tr></table></figure><h2 id="生产者-2"><a href="#生产者-2" class="headerlink" title="生产者"></a>生产者</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wu.topics;<br><br><span class="hljs-keyword">import</span> com.rabbitmq.client.Channel;<br><span class="hljs-keyword">import</span> com.rabbitmq.client.Connection;<br><span class="hljs-keyword">import</span> com.wu.utils.RabbitMQUtils;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Haixin Wu</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022/1/1 14:00</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Provider</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        Connection connection = RabbitMQUtils.getConnection();<br>        Channel channel = connection.createChannel();<br>        channel.exchangeDeclare(<span class="hljs-string">&quot;topics&quot;</span>,<span class="hljs-string">&quot;topic&quot;</span>);<br>        String routeKey = <span class="hljs-string">&quot;user.save&quot;</span>;<br>        channel.basicPublish(<span class="hljs-string">&quot;topics&quot;</span>,routeKey,<span class="hljs-keyword">null</span>,(<span class="hljs-string">&quot;topic模型,routeKey: &quot;</span>+routeKey).getBytes());<br>        RabbitMQUtils.closeConnectionAndChanel(channel, connection);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="消费者-3"><a href="#消费者-3" class="headerlink" title="消费者"></a>消费者</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wu.topics;<br><br><span class="hljs-keyword">import</span> com.rabbitmq.client.*;<br><span class="hljs-keyword">import</span> com.wu.utils.RabbitMQUtils;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Haixin Wu</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022/1/1 14:14</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Customer1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        Connection connection = RabbitMQUtils.getConnection();<br>        Channel channel = connection.createChannel();<br>        channel.exchangeDeclare(<span class="hljs-string">&quot;topics&quot;</span>,<span class="hljs-string">&quot;topic&quot;</span>);<br>        String queue = channel.queueDeclare().getQueue();<br>        channel.queueBind(queue,<span class="hljs-string">&quot;topics&quot;</span>,<span class="hljs-string">&quot;user.*&quot;</span>);<br>        channel.basicConsume(queue,<span class="hljs-keyword">true</span>,<span class="hljs-keyword">new</span> DefaultConsumer(channel)&#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleDelivery</span><span class="hljs-params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="hljs-keyword">byte</span>[] body)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;消费者1： &quot;</span>+<span class="hljs-keyword">new</span> String(body));<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wu.topics;<br><br><span class="hljs-keyword">import</span> com.rabbitmq.client.*;<br><span class="hljs-keyword">import</span> com.wu.utils.RabbitMQUtils;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Haixin Wu</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022/1/1 14:14</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Customer2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        Connection connection = RabbitMQUtils.getConnection();<br>        Channel channel = connection.createChannel();<br>        channel.exchangeDeclare(<span class="hljs-string">&quot;topics&quot;</span>,<span class="hljs-string">&quot;topic&quot;</span>);<br>        String queue = channel.queueDeclare().getQueue();<br>        channel.queueBind(queue,<span class="hljs-string">&quot;topics&quot;</span>,<span class="hljs-string">&quot;user.#&quot;</span>);<br>        channel.basicConsume(queue,<span class="hljs-keyword">true</span>,<span class="hljs-keyword">new</span> DefaultConsumer(channel)&#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleDelivery</span><span class="hljs-params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="hljs-keyword">byte</span>[] body)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;消费者2： &quot;</span>+<span class="hljs-keyword">new</span> String(body));<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/image-20220101142446275.png" alt="image-20220101142446275"></p><p><img src="/image/image-20220101142455176.png" alt="image-20220101142455176"></p><h1 id="与Spring-boot整合"><a href="#与Spring-boot整合" class="headerlink" title="与Spring boot整合"></a>与Spring boot整合</h1><h2 id="pom依赖"><a href="#pom依赖" class="headerlink" title="pom依赖"></a>pom依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="yml配置"><a href="#yml配置" class="headerlink" title="yml配置"></a>yml配置</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">springboot-rabbitmq</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">180.76</span><span class="hljs-number">.136</span><span class="hljs-number">.123</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">13399</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">wu</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123</span><br>    <span class="hljs-attr">virtual-host:</span> <span class="hljs-string">/wu_rabbitmq_study</span><br></code></pre></td></tr></table></figure><p><code>RabbitTemplate</code> 用来简化操作，注入即可</p><h1 id="Spring-boot点对点模型"><a href="#Spring-boot点对点模型" class="headerlink" title="Spring boot点对点模型"></a>Spring boot点对点模型</h1><h2 id="生产者-3"><a href="#生产者-3" class="headerlink" title="生产者"></a>生产者</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wu.springbootrabbitmq;<br><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringRunner;<br><br><span class="hljs-meta">@SpringBootTest(classes = RabbitmqApplication.class)</span><br><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RabbitmqApplicationTests</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RabbitTemplate rabbitTemplate;<br><br>    <span class="hljs-comment">// hello world</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">contextLoads</span><span class="hljs-params">()</span> </span>&#123;<br>        rabbitTemplate.convertAndSend(<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-string">&quot;hello world&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="消费者-4"><a href="#消费者-4" class="headerlink" title="消费者"></a>消费者</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wu.springbootrabbitmq.hello;<br><br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.Queue;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 默认是持久化、非独占、不是自动删除</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Haixin Wu</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022/1/1 14:47</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@RabbitListener(queuesToDeclare = @Queue(value = &quot;hello&quot;, durable = &quot;false&quot;, autoDelete = &quot;true&quot;))</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloCustomer</span> </span>&#123;<br><br>    <span class="hljs-meta">@RabbitHandler</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">receive</span><span class="hljs-params">(String message)</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;message = &quot;</span> + message);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Spring-boot任务模型"><a href="#Spring-boot任务模型" class="headerlink" title="Spring boot任务模型"></a>Spring boot任务模型</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">任务模型中，Spring AMQP实现的默认方式是公平调度<br></code></pre></td></tr></table></figure><h2 id="生产者-4"><a href="#生产者-4" class="headerlink" title="生产者"></a>生产者</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// work</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">workTest</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++) &#123;<br>        rabbitTemplate.convertAndSend(<span class="hljs-string">&quot;work&quot;</span>,<span class="hljs-string">&quot;work模型&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="消费者-5"><a href="#消费者-5" class="headerlink" title="消费者"></a>消费者</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wu.springbootrabbitmq.work;<br><br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.Queue;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 任务模型中，Spring AMQP实现的默认方式是公平调度</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Haixin Wu</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022/1/1 17:15</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WorkCustomer</span> </span>&#123;<br><br>    <span class="hljs-meta">@RabbitListener(queuesToDeclare = @Queue(&quot;work&quot;))</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">receive1</span><span class="hljs-params">(String message)</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;消费者1：message = &quot;</span> + message);<br>    &#125;<br><br>    <span class="hljs-meta">@RabbitListener(queuesToDeclare = @Queue(&quot;work&quot;))</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">receive2</span><span class="hljs-params">(String message)</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;消费者2：message = &quot;</span> + message);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Spring-boot广播模型"><a href="#Spring-boot广播模型" class="headerlink" title="Spring boot广播模型"></a>Spring boot广播模型</h1><h2 id="生产者-5"><a href="#生产者-5" class="headerlink" title="生产者"></a>生产者</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// fanout</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fanoutTest</span><span class="hljs-params">()</span></span>&#123;<br>    rabbitTemplate.convertAndSend(<span class="hljs-string">&quot;logs&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;fanout模型发送消息&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="消费者-6"><a href="#消费者-6" class="headerlink" title="消费者"></a>消费者</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wu.springbootrabbitmq.fanout;<br><br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.Exchange;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.Queue;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.QueueBinding;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Haixin Wu</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022/1/1 17:28</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FanoutCustomer</span> </span>&#123;<br><br>    <span class="hljs-meta">@RabbitListener(bindings = &#123;</span><br><span class="hljs-meta">            @QueueBinding(</span><br><span class="hljs-meta">                    value = @Queue, // 创建临时队列</span><br><span class="hljs-meta">                    exchange = @Exchange(value = &quot;logs&quot;, type = &quot;fanout&quot;)// 指定交换机</span><br><span class="hljs-meta">            )</span><br><span class="hljs-meta">    &#125;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">receive1</span><span class="hljs-params">(String message)</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;消费者1：message = &quot;</span> + message);<br>    &#125;<br><br>    <span class="hljs-meta">@RabbitListener(bindings = &#123;</span><br><span class="hljs-meta">            @QueueBinding(</span><br><span class="hljs-meta">                    value = @Queue, // 创建临时队列</span><br><span class="hljs-meta">                    exchange = @Exchange(value = &quot;logs&quot;, type = &quot;fanout&quot;)// 指定交换机</span><br><span class="hljs-meta">            )</span><br><span class="hljs-meta">    &#125;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">receive2</span><span class="hljs-params">(String message)</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;消费者2：message = &quot;</span> + message);<br>    &#125;<br>&#125;<br><br><br><br></code></pre></td></tr></table></figure><h1 id="Spring-boot路由模型"><a href="#Spring-boot路由模型" class="headerlink" title="Spring boot路由模型"></a>Spring boot路由模型</h1><h2 id="生产者-6"><a href="#生产者-6" class="headerlink" title="生产者"></a>生产者</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// routing</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">routingTest</span><span class="hljs-params">()</span></span>&#123;<br>    rabbitTemplate.convertAndSend(<span class="hljs-string">&quot;directs&quot;</span>,<span class="hljs-string">&quot;error&quot;</span>,<span class="hljs-string">&quot;发送error的key的路由信息&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="消费者-7"><a href="#消费者-7" class="headerlink" title="消费者"></a>消费者</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wu.springbootrabbitmq.routing;<br><br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.Exchange;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.Queue;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.QueueBinding;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Haixin Wu</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022/1/1 17:35</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RoutingCustomer</span> </span>&#123;<br>    <span class="hljs-meta">@RabbitListener(bindings = &#123;</span><br><span class="hljs-meta">            @QueueBinding(</span><br><span class="hljs-meta">                    value = @Queue,// 创建临时队列</span><br><span class="hljs-meta">                    exchange = @Exchange(value = &quot;directs&quot;, type = &quot;direct&quot;),// 指定交换机</span><br><span class="hljs-meta">                    key = &#123;&quot;info&quot;,&quot;error&quot;,&quot;warn&quot;&#125;</span><br><span class="hljs-meta">            )</span><br><span class="hljs-meta">    &#125;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">receive1</span><span class="hljs-params">(String message)</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;消费者1：message = &quot;</span> + message);<br>    &#125;<br><br>    <span class="hljs-meta">@RabbitListener(bindings = &#123;</span><br><span class="hljs-meta">            @QueueBinding(</span><br><span class="hljs-meta">                    value = @Queue,// 创建临时队列</span><br><span class="hljs-meta">                    exchange = @Exchange(value = &quot;directs&quot;, type = &quot;direct&quot;),// 指定交换机</span><br><span class="hljs-meta">                    key = &#123;&quot;error&quot;&#125;</span><br><span class="hljs-meta">            )</span><br><span class="hljs-meta">    &#125;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">receive2</span><span class="hljs-params">(String message)</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;消费者2：message = &quot;</span> + message);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Spring-boot主题模型"><a href="#Spring-boot主题模型" class="headerlink" title="Spring boot主题模型"></a>Spring boot主题模型</h1><h2 id="生产者-7"><a href="#生产者-7" class="headerlink" title="生产者"></a>生产者</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// topics</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">topicsTest</span><span class="hljs-params">()</span></span>&#123;<br>    rabbitTemplate.convertAndSend(<span class="hljs-string">&quot;topics&quot;</span>,<span class="hljs-string">&quot;user.save&quot;</span>,<span class="hljs-string">&quot;user.save 消息&quot;</span>);<br>    rabbitTemplate.convertAndSend(<span class="hljs-string">&quot;topics&quot;</span>,<span class="hljs-string">&quot;user.save.xx&quot;</span>,<span class="hljs-string">&quot;user.save.xx 消息&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="消费者-8"><a href="#消费者-8" class="headerlink" title="消费者"></a>消费者</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wu.springbootrabbitmq.topics;<br><br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.Exchange;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.Queue;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.QueueBinding;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Haixin Wu</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022/1/1 17:41</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TopicsCustomer</span> </span>&#123;<br>    <span class="hljs-meta">@RabbitListener(bindings = &#123;</span><br><span class="hljs-meta">            @QueueBinding(</span><br><span class="hljs-meta">                    value = @Queue,</span><br><span class="hljs-meta">                    exchange = @Exchange(type = &quot;topic&quot;, name = &quot;topics&quot;),</span><br><span class="hljs-meta">                    key = &#123;&quot;user.*&quot;&#125;</span><br><span class="hljs-meta">            )</span><br><span class="hljs-meta">    &#125;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">receive1</span><span class="hljs-params">(String message)</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;消费者1 message = &quot;</span> + message);<br>    &#125;<br><br>    <span class="hljs-meta">@RabbitListener(bindings = &#123;</span><br><span class="hljs-meta">            @QueueBinding(</span><br><span class="hljs-meta">                    value = @Queue,</span><br><span class="hljs-meta">                    exchange = @Exchange(type = &quot;topic&quot;, name = &quot;topics&quot;),</span><br><span class="hljs-meta">                    key = &#123;&quot;user.#&quot;&#125;</span><br><span class="hljs-meta">            )</span><br><span class="hljs-meta">    &#125;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">receive2</span><span class="hljs-params">(String message)</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;消费者2 message = &quot;</span> + message);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="MQ的应用场景"><a href="#MQ的应用场景" class="headerlink" title="MQ的应用场景"></a>MQ的应用场景</h1><h2 id="异步处理"><a href="#异步处理" class="headerlink" title="异步处理"></a>异步处理</h2><p><img src="/image/image-20220101175143769.png" alt="image-20220101175143769"></p><p><img src="/image/image-20220101175240992.png" alt="image-20220101175240992"></p><h2 id="应用解耦"><a href="#应用解耦" class="headerlink" title="应用解耦"></a>应用解耦</h2><p><img src="/image/image-20220101175525304.png" alt="image-20220101175525304"></p><h2 id="流量削峰"><a href="#流量削峰" class="headerlink" title="流量削峰"></a>流量削峰</h2><p><img src="/image/image-20220101175701881.png" alt="image-20220101175701881"></p>]]></content>
    
    
    <categories>
      
      <category>RabbitMQ</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>线程的创建</title>
    <link href="/2022/01/24/Java%20%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%88%9B%E5%BB%BA/"/>
    <url>/2022/01/24/Java%20%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%88%9B%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<figure class="highlight llvm"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs llvm">本文参考了码友 Nyima 的学习笔记<br><span class="hljs-symbol">https:</span>//nyimac.gitee.io/<span class="hljs-number">2020</span>/<span class="hljs-number">06</span>/<span class="hljs-number">08</span>/<span class="hljs-variable">%E5</span><span class="hljs-variable">%B9</span><span class="hljs-variable">%B6</span><span class="hljs-variable">%E5</span><span class="hljs-variable">%8</span>F<span class="hljs-variable">%91</span><span class="hljs-variable">%E7</span><span class="hljs-variable">%BC</span><span class="hljs-variable">%96</span><span class="hljs-variable">%E7</span><span class="hljs-variable">%A8</span><span class="hljs-variable">%8</span>B/<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java 并发编程</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>RabbitMQ死信队列、延时队列</title>
    <link href="/2022/01/24/RabbitMQ/RabbitMQ%E6%AD%BB%E4%BF%A1%E9%98%9F%E5%88%97%E3%80%81%E5%BB%B6%E6%97%B6%E9%98%9F%E5%88%97/"/>
    <url>/2022/01/24/RabbitMQ/RabbitMQ%E6%AD%BB%E4%BF%A1%E9%98%9F%E5%88%97%E3%80%81%E5%BB%B6%E6%97%B6%E9%98%9F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="死信队列"><a href="#死信队列" class="headerlink" title="死信队列"></a>死信队列</h1><p><code>DLX</code> 全称<code>Dead-Letter-Exchange</code>,称之为<strong>死信交换器</strong>，</p><p>当消息变成一个死信之后，如果这个消息所在的队列存在<code>x-dead-letter-exchange</code>参数，</p><p>那么它会被发送到<code>x-dead-letter-exchange</code>对应值的交换器上，这个交换器就称之为死信交换器，</p><p><strong>与这个死信交换器绑定的队列就是死信队列。</strong></p><p><strong>如下情况会被加入到死信队列中</strong></p><ul><li>消息<strong>被消费方拒绝</strong>，使用 <code>channel.basicNack</code> 或 <code>channel.basicReject</code>， 并且此时 <code>requeue</code>属性被设置为 <code>false</code></li><li>消息在队列的存活时间超过了设置的 <code>TTL</code> 时间，即<strong>过期</strong>（两种方式设置）了<ul><li>一、通过对队列进行设置，这种设置后，该队列中<strong>所有的消息都存在相同的过期时间</strong></li><li>二、通过对消息本身进行设置，那么<strong>每条消息的过期时间都不一样</strong></li><li>如果同时使用这2种方法，那么<strong>以过期时间小的那个数值为准</strong></li></ul></li><li>消息队列的数量已经<strong>超过了最大队列长度</strong></li></ul><h1 id="延时队列"><a href="#延时队列" class="headerlink" title="延时队列"></a>延时队列</h1><p>在 <code>RabbitMQ</code> 中不存在延时队列，但是我们可以通过<strong>设置消息的过期时间和死信队列</strong>来模拟出延时队列。</p><p>消费者监听死信交换器绑定的队列，而不要监听消息发送的队列。</p><p>有了以上的基础知识，我们完成以下需求：</p><p><strong>需求：</strong>用户在系统中创建一个订单，如果10s后，用户没有进行支付，那么自动取消订单。</p><p><strong>分析：</strong></p><p>上面这个情况，我们就适合使用延时队列来实现，那么延时队列如何创建</p><ul><li>一、为订单消息设置<code>TTL = 10s</code>，或者为订单队列设置<code>TTL = 10s</code> </li><li>二、订单如果在 <code>10s</code> 没有被消费，则加入到指定的死信队列中</li><li>三、专门处理取消订单的消费者就会来消费这个死信队列</li></ul>]]></content>
    
    
    <categories>
      
      <category>RabbitMQ</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>RabbitMQ消息事务与确认机制</title>
    <link href="/2022/01/24/RabbitMQ/RabbitMQ%E6%B6%88%E6%81%AF%E4%BA%8B%E5%8A%A1%E4%B8%8E%E7%A1%AE%E8%AE%A4%E6%9C%BA%E5%88%B6/"/>
    <url>/2022/01/24/RabbitMQ/RabbitMQ%E6%B6%88%E6%81%AF%E4%BA%8B%E5%8A%A1%E4%B8%8E%E7%A1%AE%E8%AE%A4%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<figure class="highlight awk"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs awk">参考文章：https:<span class="hljs-regexp">//</span>www.jianshu.com<span class="hljs-regexp">/p/</span><span class="hljs-number">63</span>ed636c773d<br></code></pre></td></tr></table></figure><h1 id="事务机制"><a href="#事务机制" class="headerlink" title="事务机制"></a>事务机制</h1><p><strong>基于 <code>AMQP</code> 实现了事务机制</strong>，类似于<code>MySQL</code>的事务</p><p><code>RabbitMQ</code>提供了三个方法对消息发送进行事务管理：</p><ul><li><code>txSelect()</code>：用于将通道 <code>Channel</code> 开启事务模式，服务端会返回<code>Tx.Select-OK</code></li><li><code>txCommit()</code>：用于提交事务</li><li><code>txRollback()</code>：用于回滚事务</li></ul><p><strong>使用格式如下：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">Connection connection = RabbitMQUtils.getConnection();<br>Channel channel = connection.createChannel();<br><span class="hljs-keyword">try</span>&#123;<br>    channel.txSelect();<br>    <span class="hljs-comment">// publish...</span><br>    channel.txCommit();<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>    channel.txRollback();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>开启事务后，消息起初并不会到指定的队列中</p><p>而是首先发送到一个临时队列中</p><p>只有当调用了<code>txCommit()</code>后，刚刚存储到临时队列中的消息才会到指定的队列中去</p><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p><strong>开启-提交-回滚</strong>，<strong>三次操作，每次都相当于一次请求</strong>，降低了消息的吞吐量</p><p>因为走的通信太多，大量消息就会大量请求服务器，这样会非常耗时</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>在消费者中，要将 <code>autoACK</code> 设置为 <code>false</code>，手动提交<code>ack</code></p><p>而为<code>true</code>是不支持事物的，也就是说即使在收到消息之后回滚事务也是无济于事的，因为队列已经把消息移除了</p><h1 id="确认机制"><a href="#确认机制" class="headerlink" title="确认机制"></a>确认机制</h1><p><strong>基于<code>confirm</code>模式实现确认机制</strong></p><p>考虑到 <code>AMQP</code> 的事务机制性能消耗大</p><p><code>RabbitMQ</code>提供了另一种低消耗的事务管理方式，使用 <code>confirmSelect()</code>方法</p><h2 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h2><p><code>confirm</code>模式下的 <code>channel</code>发送的消息会生成一个唯一的有序 <code>ID</code> <strong>(从1开始)</strong></p><p>一旦消息成功发送到相应的队列之后，<code>RabbitMQ服务端</code> 会发送给生产者一个确认标志，包含消息的 <code>ID</code> </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">这样生产者就知道该消息已经发送成功了<br></code></pre></td></tr></table></figure><p>如果消息和队列是持久化的，那么只有当 <code>RabbitMQ服务器</code>将消息成功写入到 <strong>磁盘</strong>之后，服务端才会发送确认标志</p><p>此外，服务端也可以设置 <code>basic.ack</code> 和 <code>mutiple</code> 域，表明是否是批量确认的消息，即该序号之前的消息都已经收到了</p><p><code>confirm</code> 的机制是异步的，生产者可以在等待的同时继续发送下一条消息，并且异步等待回调处理</p><ul><li>消息发送成功，会返回 <code>ack</code> 消息供异步处理</li><li>消息发送失败，会返回 <code>nack</code> 消息</li></ul><p><code>confirm</code> 的事件没有明确说明，并且同一个消息只会被 <code>confirm</code> 一次</p><p><strong>处理 <code>ack</code> 和 <code>nack</code> 的方式有三种</strong></p><h2 id="串行-confirm"><a href="#串行-confirm" class="headerlink" title="串行 confirm"></a>串行 confirm</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//开启confirm模式</span><br>channel.confirmSelect();<br>String message = <span class="hljs-string">&quot;Hello World&quot;</span>;<br><span class="hljs-comment">//发送消息</span><br>channel.basicPublish(EXCHANGE_NAME,<br>                     <span class="hljs-string">&quot;&quot;</span>,<br>                     MessageProperties.PERSISTENT_TEXT_PLAIN,<br>                     message.getBytes());<br><span class="hljs-comment">//判断是否回复</span><br><span class="hljs-keyword">if</span>(channel.waitForConfirms())&#123;<br>    System.out.println(<span class="hljs-string">&quot;Message send success.&quot;</span>); <br> &#125;<br></code></pre></td></tr></table></figure><p>其中<code>waitForConfirms</code>可以换成带有时间参数的方法<code>waitForConfirms(Long mills)</code>指定等待响应时间</p><h2 id="批量-confirm"><a href="#批量-confirm" class="headerlink" title="批量 confirm"></a>批量 confirm</h2><p>每发送一批次消息就调用<code>waitForConfirms()</code>方法等待服务端<code>confirm</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//开启confirm模式</span><br>channel.confirmSelect();<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">1000</span>;i++)&#123;<br>    String message = <span class="hljs-string">&quot;Hello World&quot;</span>;<br>    <span class="hljs-comment">//发送消息</span><br>    channel.basicPublish(EXCHANGE_NAME,<br>                     <span class="hljs-string">&quot;&quot;</span>,<br>                     MessageProperties.PERSISTENT_TEXT_PLAIN,<br>                     message.getBytes());<br>    <span class="hljs-keyword">if</span>(i%<span class="hljs-number">100</span>==<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-comment">//每发送100条判断一次是否回复</span><br>        <span class="hljs-keyword">if</span>(channel.waitForConfirms())&#123;<br>          System.out.println(<span class="hljs-string">&quot;Message send success.&quot;</span>); <br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>批量的方法从数量级上降低了<code>confirm</code>的性能消耗，提高了效率。</p><p>但是有个致命的缺陷，一旦回复确认失败，当前确认批次的消息会全部重新发送，导致消息重复发送。</p><p>所以批量的<code>confirm</code>虽然性能提高了，但是消息的重复率也提高了。</p><h2 id="异步-confirm"><a href="#异步-confirm" class="headerlink" title="异步 confirm"></a>异步 confirm</h2><p><code>Channel</code> 对象提供的 <code>ConfirmListener()</code> 回调方法只包含<code>deliveryTag</code>(当前<code>Channel</code>发出的消息序列号)</p><p>我们需要自己为每一个<code>Channel</code>维护一个<code>unconfirm</code>的序列号的集合</p><ul><li>每<code>push</code>一条数据，集合元素加<code>1</code></li><li>每回调一次<code>handleAck</code>方法，<code>unconfirm</code>集合就删掉相应的一条(<code>multiple=false</code>) 或者多条(<code>multiple=true</code>)记录</li></ul><p>从程序运行效率上来看，这个<code>unconfirm</code>集合最好采用有序集合<code>SortedSet</code>存储结构。</p><p>使用监听方法，当服务端<code>confirm</code>了一条或多条消息后，调用回调方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//声明一个用来记录消息唯一ID的有序集合SortedSet</span><br><span class="hljs-keyword">final</span> SortedSet&lt;Long&gt; confirmSet = Collections.synchronizedSortedSet(<span class="hljs-keyword">new</span> TreeSet&lt;Long&gt;());<br><span class="hljs-comment">//开启confirm模式</span><br>channel.confirmSelect();<br><span class="hljs-comment">//异步监听方法 处理ack与nack方法</span><br>channel.addConfirmListener(<span class="hljs-keyword">new</span> ConfirmListener() &#123;<br>    <span class="hljs-comment">//处理ack multiple 是否批量 如果是批量 则将比该条小的所有数据都移除 否则只移除该条</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleAck</span><span class="hljs-params">(<span class="hljs-keyword">long</span> deliveryTag, <span class="hljs-keyword">boolean</span> multiple)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-keyword">if</span> (multiple) &#123;<br>            confirmSet.headSet(deliveryTag + <span class="hljs-number">1</span>).clear();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            confirmSet.remove(deliveryTag);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//处理nack 与ack相同</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleNack</span><span class="hljs-params">(<span class="hljs-keyword">long</span> deliveryTag, <span class="hljs-keyword">boolean</span> multiple)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;There is Nack, SeqNo: &quot;</span> + deliveryTag + <span class="hljs-string">&quot;, multiple: &quot;</span> + multiple);<br>        <span class="hljs-keyword">if</span> (multiple) &#123;<br>            confirmSet.headSet(deliveryTag + <span class="hljs-number">1</span>).clear();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            confirmSet.remove(deliveryTag);<br>        &#125;<br>    &#125;<br>&#125;);<br><span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>    <span class="hljs-comment">//获取消息confirm的唯一ID</span><br>    <span class="hljs-keyword">long</span> nextSeqNo = channel.getNextPublishSeqNo();<br>    String message = <span class="hljs-string">&quot;Hello World.&quot;</span>;<br>    <span class="hljs-comment">//发送消息</span><br>    channel.basicPublish(EXCHANGE_NAME,<span class="hljs-string">&quot;&quot;</span>,MessageProperties.PERSISTENT_TEXT_PLAIN,message.getBytes());<br>    <span class="hljs-comment">//将ID加入到有序集合中</span><br>    confirmSet.add(nextSeqNo);<br>&#125;<br></code></pre></td></tr></table></figure><p>每一个<code>comfirm</code>的通道维护一个集合，每发送一条数据，集合增加一个元素，每异步响应一条<code>ack</code>或者<code>nack</code>的数据，集合删除一条。</p><p><code>SortedSet</code>是一个有序的集合，它的有序是值大小的有序，不是插入时间的有序。</p><p>JDK中<code>waitForConfirms()</code>方法也是使用了<code>SortedSet</code>集合</p>]]></content>
    
    
    <categories>
      
      <category>RabbitMQ</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>并发与并行</title>
    <link href="/2022/01/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%B9%B6%E8%A1%8C%E4%B8%8E%E5%B9%B6%E5%8F%91/"/>
    <url>/2022/01/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%B9%B6%E8%A1%8C%E4%B8%8E%E5%B9%B6%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>并发是一个CPU在不同的时间去不同线程中执行指令。</p><p>并行是多个CPU同时处理不同的线程。</p><p>引用 Rob Pike 的一段描述：</p><ul><li>并发（concurrent）是同一时间<strong>应对</strong>（dealing with）多件事情的能力</li><li>并行（parallel）是同一时间<strong>动手做</strong>（doing）多件事情的能力</li></ul><h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><h2 id="异步调用"><a href="#异步调用" class="headerlink" title="异步调用"></a>异步调用</h2><p>以调用方角度来讲，如果</p><ul><li>需要等待结果返回，才能继续运行就是同步</li><li>不需要等待结果返回，就能继续运行就是异步</li></ul><h3 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h3><p>多线程可以让方法执行变为异步的（即不要巴巴干等着）比如说读取磁盘文件时，假设读取操作花费了 5 秒钟，如 果没有线程调度机制，这 5 秒 cpu 什么都做不了，其它代码都得暂停…</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><ul><li>比如在项目中，视频文件需要转换格式等操作比较费时，这时开一个新线程处理视频转换，避免阻塞主线程</li><li>tomcat 的异步 servlet 也是类似的目的，让用户线程处理耗时较长的操作，避免阻塞</li><li>tomcat 的工作线程 ui 程序中，开线程进行其他操作，避免阻塞 ui 线程</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>单核 cpu 下，多线程不能实际提高程序运行效率，只是为了能够在不同的任务之间切换，不同线程轮流使用 cpu ，不至于一个线程总占用 cpu，别的线程没法干活</li><li>多核 cpu 可以并行跑多个线程，但能否提高程序运行效率还是要分情况的<ul><li>有些任务，经过精心设计，将任务拆分，并行执行，当然可以提高程序的运行效率。但不是所有计算任 务都能拆分（参考后文的【阿姆达尔定律】）</li><li>也不是所有任务都需要拆分，任务的目的如果不同，谈拆分和效率没啥意义</li></ul></li><li>IO 操作不占用 cpu，只是我们一般拷贝文件使用的是【阻塞 IO】，这时相当于线程虽然不用 cpu，但需要一 直等待 IO 结束，没能充分利用线程。所以才有后面的【非阻塞 IO】和【异步 IO】优化</li></ol>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>进程与线程的区别</title>
    <link href="/2022/01/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/"/>
    <url>/2022/01/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h1><p>程序由指令和数据组成，但这些指令要运行，数据要读写，就必须将指令加载至 CPU，数据加载至内存。</p><p>在指令运行过程中还需要用到磁盘、网络等设备。</p><p><strong>进程就是用来加载指令、管理内存、管理 IO 的。</strong></p><ul><li><p>当一个程序被运行，从磁盘加载这个程序的代码至内存，这时就开启了一个进程。</p></li><li><p>进程就可以视为程序的一个实例。大部分程序可以同时运行多个实例进程（例如记事本、画图、浏览器 等），也有的程序只能启动一个实例进程（例如网易云音乐、360 安全卫士等）</p></li></ul><h1 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h1><ul><li>一个进程之内可以分为一到多个线程。</li><li>一个线程就是一个指令流，将指令流中的一条条指令以一定的顺序交给 CPU 执行 。</li><li>Java 中，线程作为最小调度单位，进程作为资源分配的最小单位。 <strong>在 windows 中进程是不活动的，只是作为线程的容器</strong></li></ul><h1 id="二者对比"><a href="#二者对比" class="headerlink" title="二者对比"></a>二者对比</h1><ul><li>进程基本上相互独立的，而线程存在于进程内，是进程的一个子集，进程拥有共享的资源，如内存空间等，供其内部的线程共享<ul><li>进程间通信较为复杂，同一台计算机的进程通信称为 IPC（Inter-process communication）</li><li>不同计算机之间的进程通信，需要通过网络，并遵守共同的协议，例如 HTTP</li></ul></li><li>线程通信相对简单，因为它们共享进程内的内存，一个例子是多个线程可以访问同一个共享变量。<strong>线程更轻量，线程上下文切换成本一般上要比进程上下文切换低</strong></li></ul>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>RabbitMQ消息幂等性问题</title>
    <link href="/2022/01/24/RabbitMQ/RabbitMQ%E6%B6%88%E6%81%AF%E5%B9%82%E7%AD%89%E6%80%A7%E9%97%AE%E9%A2%98/"/>
    <url>/2022/01/24/RabbitMQ/RabbitMQ%E6%B6%88%E6%81%AF%E5%B9%82%E7%AD%89%E6%80%A7%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="什么是幂等性"><a href="#什么是幂等性" class="headerlink" title="什么是幂等性"></a>什么是幂等性</h1><p>在编程中一个幂等操作的特点是其任意<strong>多次执行所产生的影响均与一次执行的影响相同</strong></p><p>HTTP方法的幂等性是指一次和多次请求某一个资源应该具有同样的副作用。幂等性属于语义范畴，正如编译器只能帮助检查语法错误一样，HTTP规范也没有办法通过消息格式等语法手段来定义它。</p><p><strong>简之：一个请求，不管重复来多少次，结果是不会改变的。</strong></p><p>消费者在消费 <code>MQ</code> 中的消息时，<code>MQ</code> 已把消息发送给消费者，消费者在给 <code>MQ</code> 返回 <code>ack</code> 时网络中断，</p><p>故 <code>MQ</code> 未收到确认信息，该条消息会重新发给其他的消费者，或者在网络重连后再次发送给该消费者，</p><p><strong>但实际上该消费者已成功消费了该条消息，造成消费者消费了重复的消息</strong></p><p>所以，<code>MQ</code> 消费者的幂等性问题，主要在于 <code>MQ</code> 的<strong>重试机制</strong>，因为网络原因或客户端延迟消费导致重复消费。</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p><strong>注意，<code>RabbitMQ</code> 这种消息重试(补偿)机制是默认的。</strong></p><h1 id="确保幂等性方案"><a href="#确保幂等性方案" class="headerlink" title="确保幂等性方案"></a>确保幂等性方案</h1><h2 id="全局ID"><a href="#全局ID" class="headerlink" title="全局ID"></a>全局ID</h2><p>每个消息都有一个自身<code>ID</code>，以保证再重试中不会被重复消费</p><h2 id="业务逻辑ID"><a href="#业务逻辑ID" class="headerlink" title="业务逻辑ID"></a>业务逻辑ID</h2><p>比如使用<strong>订单号码（业务逻辑ID）</strong>，以保证再重试中不会被重复消费</p>]]></content>
    
    
    <categories>
      
      <category>RabbitMQ</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>RabbitMQ补偿机制与@RabbitListener注解原理</title>
    <link href="/2022/01/24/RabbitMQ/RabbitMQ%E8%A1%A5%E5%81%BF%E6%9C%BA%E5%88%B6%E4%B8%8E@RabbitListener%E6%B3%A8%E8%A7%A3%E5%8E%9F%E7%90%86/"/>
    <url>/2022/01/24/RabbitMQ/RabbitMQ%E8%A1%A5%E5%81%BF%E6%9C%BA%E5%88%B6%E4%B8%8E@RabbitListener%E6%B3%A8%E8%A7%A3%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="补偿机制"><a href="#补偿机制" class="headerlink" title="补偿机制"></a>补偿机制</h1><p><code>RabbitMQ</code> 默认情况下，如果消费者程序出现异常的情况下，会自动实现<strong>补偿（重试）机制</strong></p><p>即队列服务器发送补偿请求</p><h1 id="RabbitListener原理"><a href="#RabbitListener原理" class="headerlink" title="@RabbitListener原理"></a>@RabbitListener原理</h1><p><code>@RabbitListener</code> 底层使用 <code>AOP</code> 进行拦截</p><ul><li>如果程序没有抛出异常，则会自动提交事务</li><li>如果程序捕捉到异常信息，会自动实现补偿机制，该消息会缓存到 <code>RabbitMQ服务端</code>中，一直重试到不跑出异常为止</li></ul><p><strong>补偿机制一直重复显然是会占用资源的，所以我们可以尝试修改补偿机制</strong></p><p><img src="/image/image-20220208170032702.png" alt="image-20220208170032702"></p><p>当超过最大重试次数之后，消息队列默认就会<strong>放弃这条消息。</strong></p><p>针对不同的情况也可以将消息发送到<strong>死信队列</strong>中，由专门的消费者进行处理，避免占用过多的资源</p><h1 id="如何选择合理的补偿机制"><a href="#如何选择合理的补偿机制" class="headerlink" title="如何选择合理的补偿机制"></a>如何选择合理的补偿机制</h1><h2 id="情况一"><a href="#情况一" class="headerlink" title="情况一"></a>情况一</h2><figure class="highlight"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs">消费者获取到消息后，调用第三方接口，但接口暂时无法访问，是否需要重试？<br></code></pre></td></tr></table></figure><p><strong>需要</strong></p><p>接口可能是由于网络延时导致接口无法访问，是属于正常现象</p><h2 id="情况二"><a href="#情况二" class="headerlink" title="情况二"></a>情况二</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">消费者获取到消息后，抛出数据转换异常，是否需要重试？<br></code></pre></td></tr></table></figure><p><strong>不需要</strong></p><p>因为重试的原因是抛出了异常，再重试多次也无济于事，所以是消费者内部的原因，需要消费者内部修正</p>]]></content>
    
    
    <categories>
      
      <category>RabbitMQ</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>RabbitMQ实现分布式事务</title>
    <link href="/2022/01/24/RabbitMQ/RabbitMQ%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
    <url>/2022/01/24/RabbitMQ/RabbitMQ%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p><strong>采用最终一致性原理</strong></p><p>也就是说过程中可能会产生不一致，但是最终会保持一致</p><h1 id="要素"><a href="#要素" class="headerlink" title="要素"></a>要素</h1><p><code>RabbitMQ</code>解决分布式事务需要保证以下三要素</p><ul><li> 一、确认生产者一定要将数据发送到 <code>MQ服务器</code>中</li><li>采用 <code>MQ</code> 消息确认机制</li><li>二、<code>MQ消费者</code>消息能够正确消费消息<ul><li>采用手动 <code>ACK</code> 模式，同时也要注意重试幂等性问题</li></ul></li><li>三、保证第一个事务先执行<ul><li>采用补偿机制，创建一个消费者进行监听<code>第一个事务</code>，如果第一个事务没有执行成功，进行补偿</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>RabbitMQ</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>线程的生命周期</title>
    <link href="/2022/01/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <url>/2022/01/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
    
    <content type="html"><![CDATA[<p>线程的生命周期包含5个阶段，包括：新建、就绪、运行、阻塞、销毁。</p><ul><li>新建：就是刚使用<code>new()</code>方法，new出来的线程；</li><li>就绪：就是调用的线程的<code>start()</code>方法后，这时候线程处于等待CPU分配资源阶段，谁先抢的CPU资源，谁开始执行;</li><li>运行：当就绪的线程被调度并获得CPU资源时，便进入运行状态，<code>run()</code>方法定义了线程的操作和功能;</li><li>阻塞：在运行状态的时候，可能因为某些原因导致运行状态的线程变成了阻塞状态，比如<code>sleep()</code>、<code>wait()</code>之后线程就处于了阻塞状态，这个时候需要其他机制将处于阻塞状态的线程唤醒，比如调用<code>notify()</code>或者<code>notifyAll()</code>方法。唤醒的线程不会立刻执行<code>run()</code>方法，它们要再次等待CPU分配资源进入运行状态;</li><li>销毁：如果线程正常执行完毕后或线程被提前强制性的终止或出现异常导致结束，那么线程就要被销毁，释放资源;</li></ul><p>完整的生命周期图如下：</p><p><img src="/image/1223046-20190722214114154-276488899.png" alt="img"></p><h1 id="新建状态"><a href="#新建状态" class="headerlink" title="新建状态"></a>新建状态</h1><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs java">Thread t1 = <span class="hljs-keyword">new</span> Thread();<br></code></pre></td></tr></table></figure><p>这里的创建，仅仅是在<code>JAVA</code>的这种编程语言层面被创建，而在操作系统层面，真正的线程还没有被创建。</p><p>只有当我们调用了 <code>start()</code> 方法之后，该线程才会被创建出来，进入Runnable状态。只有当我们调用了 <code>start()</code> 方法之后，该线程才会被创建出来</p><p><img src="/image/1223046-20190722214216437-864622217.png" alt="img"></p><h1 id="就绪状态"><a href="#就绪状态" class="headerlink" title="就绪状态"></a>就绪状态</h1><p>调用<code>start()</code>方法后，<code>JVM</code> 进程会去创建一个新的线程，而此线程不会马上被 CPU 调度运行，进入Running状态，这里会有一个中间状态，就是Runnable状态，你可以理解为等待被 CPU 调度的状态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">t1.start()<br></code></pre></td></tr></table></figure><p><img src="/image/1223046-20190722214334481-1436365111.png" alt="img"></p><p><strong>那么处于Runnable状态的线程能发生哪些状态转变？</strong></p><p>Runnable状态的线程<strong>无法直接进入Blocked状态和Terminated状态的。</strong></p><p>只有处在Running状态的线程，换句话说，只有获得CPU调度执行权的线程才有资格进入Blocked状态和Terminated状态，Runnable状态的线程要么能被转换成Running状态，要么被意外终止。</p><p><img src="/image/1223046-20190722214414952-1788624892.png" alt="img"></p><h1 id="运行状态"><a href="#运行状态" class="headerlink" title="运行状态"></a>运行状态</h1><p>当CPU调度发生，并从任务队列中选中了某个Runnable线程时，该线程会进入Running执行状态，并且开始调用run()方法中逻辑代码。</p><p>那么处于Running状态的线程能发生哪些状态转变？</p><p><img src="/image/1223046-20190722214456212-734896654.png" alt="img"></p><ul><li>被转换成Terminated状态，比如调用 <code>stop()</code> 方法;</li><li>被转换成Blocked状态，比如调用了<code>sleep</code>, <code>wait</code> 方法被加入 <code>waitSet</code> 中；</li><li>被转换成Blocked状态，如进行 IO 阻塞操作，如查询数据库进入阻塞状态；</li><li>被转换成Blocked状态，比如获取某个锁的释放，而被加入该锁的阻塞队列中；</li><li>该线程的时间片用完，CPU 再次调度，进入Runnable状态；</li><li>线程主动调用 <code>yield</code> 方法，让出 CPU 资源，进入Runnable状态</li></ul><h1 id="阻塞状态"><a href="#阻塞状态" class="headerlink" title="阻塞状态"></a>阻塞状态</h1><p>Blocked状态的线程能够发生哪些状态改变？</p><p><img src="/image/1223046-20190722214547127-782461177.png" alt="img"></p><ul><li>被转换成Terminated状态，比如调用 <code>stop()</code> 方法，或者是 JVM 意外 Crash;</li><li>被转换成Runnable状态，阻塞时间结束，比如读取到了数据库的数据后；</li><li>完成了指定时间的休眠，进入到Runnable状态；</li><li>正在wait中的线程，被其他线程调用<code>notify</code>/<code>notifyAll</code>方法唤醒，进入到Runnable状态；</li><li>线程获取到了想要的锁资源，进入Runnable状态；</li><li>线程在阻塞状态下被打断，如其他线程调用了<code>interrupt</code>方法，进入到Runnable状态；</li></ul><h1 id="终止状态"><a href="#终止状态" class="headerlink" title="终止状态"></a>终止状态</h1><p>一旦线程进入了Terminated状态，就意味着这个线程生命的终结，哪些情况下，线程会进入到Terminated状态呢？</p><ul><li>线程正常运行结束，生命周期结束；</li><li>线程运行过程中出现意外错误；</li><li><code>JVM</code> 异常结束，所有的线程生命周期均被结束。</li></ul>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>常见方法</title>
    <link href="/2022/01/24/Java%20%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95/"/>
    <url>/2022/01/24/Java%20%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<figure class="highlight llvm"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs llvm">本文参考了码友 Nyima 的学习笔记<br><span class="hljs-symbol">https:</span>//nyimac.gitee.io/<span class="hljs-number">2020</span>/<span class="hljs-number">06</span>/<span class="hljs-number">08</span>/<span class="hljs-variable">%E5</span><span class="hljs-variable">%B9</span><span class="hljs-variable">%B6</span><span class="hljs-variable">%E5</span><span class="hljs-variable">%8</span>F<span class="hljs-variable">%91</span><span class="hljs-variable">%E7</span><span class="hljs-variable">%BC</span><span class="hljs-variable">%96</span><span class="hljs-variable">%E7</span><span class="hljs-variable">%A8</span><span class="hljs-variable">%8</span>B/<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java 并发编程</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>内存模型</title>
    <link href="/2022/01/23/JVM/%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
    <url>/2022/01/23/JVM/%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="什么是JMM"><a href="#什么是JMM" class="headerlink" title="什么是JMM"></a>什么是JMM</h1><figure class="highlight mipsasm"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">JMM </span>即 <span class="hljs-keyword">Java </span>Memory Model，<br>它定义了<br>主存（共享内存）、工作内存（线程私有）抽象概念，<br>底层对应着 CPU 寄存器、缓存、硬件内存、 CPU 指令优化等。<br></code></pre></td></tr></table></figure><h1 id="JMM主要体现在以下几个方面"><a href="#JMM主要体现在以下几个方面" class="headerlink" title="JMM主要体现在以下几个方面"></a>JMM主要体现在以下几个方面</h1><h2 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">保证指令不会受到线程上下文切换的影响<br></code></pre></td></tr></table></figure><h3 id="引例"><a href="#引例" class="headerlink" title="引例"></a>引例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Atomicity</span> </span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">static</span> Object object = <span class="hljs-keyword">new</span> Object();<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        Thread t1 = <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>            <span class="hljs-keyword">synchronized</span> (object) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i1 = <span class="hljs-number">0</span>; i1 &lt; <span class="hljs-number">50000</span>; i1++) &#123;<br>                    i++;<br>                &#125;<br>            &#125;<br>        &#125;);<br>        Thread t2 = <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>            <span class="hljs-keyword">synchronized</span> (object) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i1 = <span class="hljs-number">0</span>; i1 &lt; <span class="hljs-number">50000</span>; i1++) &#123;<br>                    i--;<br>                &#125;<br>            &#125;<br>        &#125;);<br>        t1.start();<br>        t2.start();<br>        t1.join();<br>        t2.join();<br>        System.out.println(i);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h3><p><img src="/image/image-20220114133044894.png" alt="image-20220114133044894"></p><h2 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h2><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">保证指令不会受 <span class="hljs-meta">cpu</span> 缓存的影响<br></code></pre></td></tr></table></figure><h3 id="问题引例"><a href="#问题引例" class="headerlink" title="问题引例"></a>问题引例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Visibility</span> </span>&#123;<br><br>    <span class="hljs-keyword">static</span>  <span class="hljs-keyword">boolean</span> run = <span class="hljs-keyword">true</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        Thread t = <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>            <span class="hljs-keyword">while</span> (run) &#123;<br>                <span class="hljs-comment">// ...</span><br>            &#125;<br>        &#125;);<br>        t.start();<br>        Thread.sleep(<span class="hljs-number">1000</span>);<br>        run = <span class="hljs-keyword">false</span>; <span class="hljs-comment">// 代码最终并不会停下来，因为t线程要频繁从主内存中读取run的值，JIT编译器会将run的值缓存至自己工作内存中的高速缓存中，减少对主存中run的访问，提高效率</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="volatile-关键字"><a href="#volatile-关键字" class="headerlink" title="volatile 关键字"></a>volatile 关键字</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arduino">它可以修饰成员变量和静态成员变量，<br>用来避免线程从自己的工作缓存中查找变量的值，<br>必须到主存中获取它的值，线程操作 <span class="hljs-keyword">volatile</span> 变量都是直接操作主存<br></code></pre></td></tr></table></figure><h3 id="理解-1"><a href="#理解-1" class="headerlink" title="理解"></a>理解</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino">一个线程对 <span class="hljs-keyword">volatile</span> 变量的修改对另一个线程而言是可见的，<br>不能保证原子性，仅用在一个写线程，多个读线程的情况。<br></code></pre></td></tr></table></figure><h3 id="关于-synchronized-关键字"><a href="#关于-synchronized-关键字" class="headerlink" title="关于 synchronized 关键字"></a>关于 synchronized 关键字</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">synchronized</span> 语句块既可以保证代码块的原子性，同时也能保证代码块内变量的可见性。<br>但缺点是 <span class="hljs-keyword">synchronized</span> 属于重量级操作，性能相对较低<br></code></pre></td></tr></table></figure><h4 id="用例"><a href="#用例" class="headerlink" title="用例"></a>用例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Visibility</span> </span>&#123;<br><br>    <span class="hljs-keyword">static</span>  <span class="hljs-keyword">boolean</span> run = <span class="hljs-keyword">true</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        Thread t = <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>            <span class="hljs-keyword">while</span> (run) &#123;<br>                <span class="hljs-comment">// ...</span><br>                System.out.println(<span class="hljs-number">1</span>); <span class="hljs-comment">// 为什么使用sout语句也能将线程停下来？</span><br>            &#125;<br>        &#125;);<br>        t.start();<br>        Thread.sleep(<span class="hljs-number">1000</span>);<br>        run = <span class="hljs-keyword">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">println</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">synchronized</span> (<span class="hljs-keyword">this</span>) &#123; <span class="hljs-comment">// 因为sout语句内部使用了 synchronized 语句块</span><br>        print(x);<br>        newLine();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="有序性"><a href="#有序性" class="headerlink" title="有序性"></a>有序性</h2><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">保证指令不会受 <span class="hljs-meta">cpu</span> 指令并行优化的影响<br></code></pre></td></tr></table></figure><h3 id="引例-1"><a href="#引例-1" class="headerlink" title="引例"></a>引例</h3><img src="/image/image-20220114150908935.png" alt="image-20220114150908935" style="zoom:50%;" /><img src="/image/image-20220114150942383.png" alt="image-20220114150942383" style="zoom:50%;" /><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">出现 <span class="hljs-number">0</span> 的情况的现象叫做指令重排，是 <span class="hljs-keyword">JIT </span>编译器在运行时的一些优化，这个现象需要通过大量测试才能复现<br></code></pre></td></tr></table></figure><h3 id="解决指令重排"><a href="#解决指令重排" class="headerlink" title="解决指令重排"></a>解决指令重排</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">为 ready 参数添加 <span class="hljs-keyword">volatile</span> 关键字修饰，确保可见性，避免指令重排<br></code></pre></td></tr></table></figure><h3 id="理解-2"><a href="#理解-2" class="headerlink" title="理解"></a>理解</h3> <img src="/image/image-20220114152704260.png" alt="image-20220114152704260" style="zoom:50%;" />]]></content>
    
    
    <categories>
      
      <category>JVM</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>内存结构</title>
    <link href="/2022/01/23/JVM/%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84/"/>
    <url>/2022/01/23/JVM/%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<p><img src="/image/image-20220115135430504.png" alt="image-20220115135430504"></p><h1 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h1><p>线程私有</p><p>程序计数器（Program Counter Register）是一块较小的内存空间，它可以看作是当前线程所执行的 字节码的<strong>行号指示器</strong>。</p><p>字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，它是程序控制流的指示器，分支、循环、跳转、异常处 理、线程恢复等基础功能都需要依赖这个计数器来完成。</p><h1 id="Java虚拟机栈"><a href="#Java虚拟机栈" class="headerlink" title="Java虚拟机栈"></a>Java虚拟机栈</h1><p>线程私有</p><p>虚拟机栈描述的是Java方法执行的线程内存模型：</p><p>每个方法被执行的时候，Java虚拟机都会同步创建一个栈帧（Stack Frame）用于存储局部变量表、操作数栈、动态连接、方法出口等信息。</p><p>每一个方法被调用直至执行完毕的过程，就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。</p><h1 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h1><p>线程私有</p><p>本地方法栈（Native Method Stacks）与虚拟机栈所发挥的作用是非常相似的，</p><p>其区别只是虚拟机 栈为虚拟机执行Java方法（也就是字节码）服务，而本地方法栈则是为虚拟机使用到的本地（Native） 方法服务。 </p><h1 id="Java堆"><a href="#Java堆" class="headerlink" title="Java堆"></a>Java堆</h1><p>线程共享，同时是垃圾收集器管理的内存区域</p><p>Java堆（Java Heap）是虚拟机所管理的内存中最大的一块。</p><p>此内存区域的唯一目的就是存放对象实例</p><h1 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h1><p>线程共享</p><p>存储已被虚拟机加载的类型信息、常量、静态变量、即时编译器编译后的代码缓存等数据</p><h2 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h2><p>存放编译期生成的各种字面量与符号引用，这部分内容将在类加载后存放到方法区的运行时常量池中。 </p>]]></content>
    
    
    <categories>
      
      <category>JVM</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>类加载机制</title>
    <link href="/2022/01/23/JVM/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/"/>
    <url>/2022/01/23/JVM/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<p><img src="/image/image-20220115135430504.png" alt="image-20220115135430504"></p><h1 id="类加载的时机"><a href="#类加载的时机" class="headerlink" title="类加载的时机"></a>类加载的时机</h1><p>在对象的创建过程中，完成了检查阶段</p><img src="/image/image-20220115141354723.png" alt="image-20220115141354723" style="zoom: 67%;" /><ul><li>加载 （Loading）</li><li>验证（Verification）</li><li>准备（Preparation）</li><li>解析（Resolution）</li><li>初始化 （Initialization）</li><li>使用（Using）</li><li>卸载（Unloading）</li></ul><p>其中验证、准备、解析三个部分统称为连接（Linking）</p><p>其中加载、验证、准备、解析、初始化和卸载这五个阶段的顺序是确定的，类型的加载过程必须按照这种顺序按部就班地开始。</p><p>而解析阶段则不一定：它在某些情况下可以在初始化阶段之后再开始， 这是为了支持Java语言的运行时绑定特性（也称为动态绑定或晚期绑定）。</p><figure class="highlight"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs">请注意，这里笔者写的是 按部就班地“开始”，而不是按部就班地“进行”或按部就班地“完成”，强调这点是因为这些阶段通常都 是互相交叉地混合进行的，会在一个阶段执行的过程中调用、激活另一个阶段。<br><br>加载阶段与连接阶段的部分动作（如一部分字节码文件格式验证动作）是交叉进行的，加载阶段 尚未完成，连接阶段可能已经开始，但这些夹在加载阶段之中进行的动作，仍然属于连接阶段的一部 分，这两个阶段的开始时间仍然保持着固定的先后顺序。<br></code></pre></td></tr></table></figure><h1 id="类加载的过程"><a href="#类加载的过程" class="headerlink" title="类加载的过程"></a>类加载的过程</h1><h2 id="第一个阶段——加载"><a href="#第一个阶段——加载" class="headerlink" title="第一个阶段——加载"></a>第一个阶段——加载</h2><ul><li>1）通过一个<strong>类的全限定名</strong>来获取定义此类的<strong>二进制字节流</strong>。</li><li>2）将这个<strong>字节流所代表的静态存储结构</strong>转化为<strong>方法区的运行时数据结构</strong>。</li><li>3）在内存中生成一个<strong>代表这个类的java.lang.Class对象</strong>，作为方法区这个类的各种数据的<strong>访问入口</strong>。</li></ul><p><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200611205050.png" alt="img"></p><h2 id="第二个阶段——验证"><a href="#第二个阶段——验证" class="headerlink" title="第二个阶段——验证"></a>第二个阶段——验证</h2><p>验证是连接阶段的第一步，这一阶段的目的是<strong>保证Class文件的字节流中包含的信息符合《Java虚拟机规范》的全部约束要求</strong>，保证这些信息<strong>被当作代码运行后不会危害虚拟机自身的安全</strong></p><p>验证内容主要包含如下四点：</p><ul><li>文件格式验证</li><li>元数据验证</li><li>字节码验证</li><li>符号引用验证</li></ul><h2 id="第三个阶段——准备"><a href="#第三个阶段——准备" class="headerlink" title="第三个阶段——准备"></a>第三个阶段——准备</h2><p>准备阶段是正式为类中定义的变量（即静态变量，被static修饰的变量）<strong>分配内存</strong>并<strong>设置类变量初始值</strong>（对象创建过程的隐式创建）的阶段</p><p>假设一个类变量的定义为： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> value = <span class="hljs-number">123</span>;<br></code></pre></td></tr></table></figure><p>那变量value在准备阶段过后的初始值为0而不是123，因为这时尚未开始执行任何Java方法，而把 value赋值为123的 putstatic 指令是程序被编译后，存放于类构造器<clinit>()方法之中，所以把value赋值 为123的动作要到<strong>类的初始化阶段</strong>才会被执行</p><h2 id="第四个阶段——解析"><a href="#第四个阶段——解析" class="headerlink" title="第四个阶段——解析"></a>第四个阶段——解析</h2><p>解析阶段是Java虚拟机将<strong>常量池内的符号引用</strong>替换为<strong>直接引用</strong>的过程</p><h2 id="第五个阶段——初始化"><a href="#第五个阶段——初始化" class="headerlink" title="第五个阶段——初始化"></a>第五个阶段——初始化</h2><p>类的初始化阶段是类加载过程的最后一个步骤，初始化阶段就是执行类构造器<code>&lt;clinit&gt;()</code>方法的过程</p><p><code>&lt;clinit&gt;()</code>方法是由编译器自动收集类中的<strong>所有类变量的赋值动作</strong>和<strong>静态语句块（static{}块）中的语句</strong>合并产生的</p><h1 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h1><p>在类加载阶段中的“通过一个类的全限定名来获取描述该类的二进制字节流”这个动作放到Java虚拟机外部去实现，以便让应用程序自己决定如何去获取所需的类。</p><p>而实现这个动作的代码被称为“类加载器”（Class Loader）</p><h2 id="类与类加载器"><a href="#类与类加载器" class="headerlink" title="类与类加载器"></a>类与类加载器</h2><p>类加载器虽然只用于实现类的加载动作，但它在Java程序中起到的作用却<strong>远超类加载阶段</strong>。</p><p>对于 任意一个类，都必须由加载它的类加载器和这个类本身一起共同确立其在Java虚拟机中的唯一性，每一个类加载器，都拥有一个独立的类名称空间。</p><p>这句话表达地更通俗一些：<strong>比较两个类是否“相等”，只有在这两个类是由同一个类加载器加载的前提下才有意义，否则，即使这两个类来源于同一个 Class文件，被同一个Java虚拟机加载，只要加载它们的类加载器不同，那这两个类就必定不相等</strong></p><h2 id="双亲委派模型"><a href="#双亲委派模型" class="headerlink" title="双亲委派模型"></a>双亲委派模型</h2><p>站在Java虚拟机的角度来看，只存在两种不同的类加载器：一种是启动类加载器（Bootstrap Class Loader），另外一种就是其他所有 </p><p>的类加载器。</p><h3 id="启动类加载器"><a href="#启动类加载器" class="headerlink" title="启动类加载器"></a>启动类加载器</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">Bootstrap</span> <span class="hljs-keyword">Class</span> Loader<br><br>这个类加载器使用C++语言实现，是虚拟机的一部分。<br><br>负责加载存放在&lt;JAVA_HOME&gt;\lib目录，或者被-Xbootclasspath参数所指定的路径中存放的，而且是Java虚拟机能够识别的类库<br></code></pre></td></tr></table></figure><h3 id="其他所有的类加载器"><a href="#其他所有的类加载器" class="headerlink" title="其他所有的类加载器"></a>其他所有的类加载器</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">这些类加载器都由<span class="hljs-keyword">Java语言实现，独立存在于虚拟机外部，并且全都继承自抽象类 </span><span class="hljs-keyword">java.lang.ClassLoader</span><br></code></pre></td></tr></table></figure><h4 id="扩展类加载器"><a href="#扩展类加载器" class="headerlink" title="扩展类加载器"></a>扩展类加载器</h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">Extension </span>Class Loader<br><br>这个类加载器是在类sun.misc.Launcher$<span class="hljs-keyword">ExtClassLoader中以Java代码的形式实现的。</span><br><span class="hljs-keyword"></span><br>主要负责加载&lt;<span class="hljs-keyword">JAVA_HOME&gt;\lib\ext目录中，或者被java.ext.dirs系统变量所指定的路径中所有的类库。</span><br><span class="hljs-keyword"></span><br>顾名思义，它是一种<span class="hljs-keyword">Java系统类库的扩展机制。用户可以将具有通用性的类库存放至ext目录里来扩展Java </span>SE的功能<br></code></pre></td></tr></table></figure><h4 id="应用程序类加载器"><a href="#应用程序类加载器" class="headerlink" title="应用程序类加载器"></a>应用程序类加载器</h4><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cos">Application <span class="hljs-keyword">Class</span> Loader<br><br>这个类加载器是在类sun.misc.Launcher<span class="hljs-built_in">$AppClassLoader</span>中以Java代码的形式实现的。<br><br>主要负责加载用户类路径上所有的类库<br></code></pre></td></tr></table></figure><h3 id="互相配合"><a href="#互相配合" class="headerlink" title="互相配合"></a>互相配合</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">在<span class="hljs-keyword">JDK </span><span class="hljs-number">9</span>之前的<span class="hljs-keyword">Java应用都是由这三种类加载器互相配合来完成加载的，而各种类加载器之间的层次关系被称之为类加载器的“双亲委派模型”</span><br></code></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20201217213314510.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGV5YW5iYW8=,size_16,color_FFFFFF,t_70" alt="img" style="zoom: 40%;" /><h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的类加载器都是如此，因此所有的加载请求最终都应该传送到最顶层的启动类加载器中，只有当父加载器反馈自己无法完成这个加载请求（它的搜索范围中没有找到所需的类）时，子加载器才会尝试自己去完成加载。<br></code></pre></td></tr></table></figure><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">一个显而易见的好处就是Java中的类随着它的类加载器一起具备了一种带有优先级的层次关系。<br><br>例如类java.lang.<span class="hljs-built_in">Object</span>，它存放在rt.jar之中，无论哪一个类加载器要加载这个类，最终都是委派给处于模型最顶端的启动类加载器进行加载，因此<span class="hljs-built_in">Object</span>类在程序的各种类加载器环境中都能够保证是同一个类。<br><br>如果没有使用双亲委派模型，都由各个类加载器自行去加载的话，如果用户自己也编写了一个名为java.lang.<span class="hljs-built_in">Object</span>的类，并放在程序的ClassPath中，那系统中就会出现多个不同的<span class="hljs-built_in">Object</span>类，Java类型体系中最基础的行为也就无从保证，应用程序将会变得一片混乱。<br></code></pre></td></tr></table></figure><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">synchronized</span> Class&lt;?&gt; loadClass(String name, <span class="hljs-keyword">boolean</span> resolve) <span class="hljs-keyword">throws</span> ClassNotFoundException&#123;<br>    <span class="hljs-comment">// 首先，检查请求的类是否已经被加载过了</span><br>    Class c = findLoadedClass(name);<br>    <span class="hljs-keyword">if</span> (c == <span class="hljs-keyword">null</span>)&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (parent != <span class="hljs-keyword">null</span>) &#123;<br>                c = parent.loadClass(name, <span class="hljs-keyword">false</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                c = findBootstrapClassOrNull(name);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e)&#123;<br>            <span class="hljs-comment">// 如果父类加载器抛出ClassNotFoundException</span><br>            <span class="hljs-comment">// 说明父类加载器无法完成加载请求</span><br>        &#125;<br>        <span class="hljs-keyword">if</span> (c == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-comment">// 在父类加载器无法加载时</span><br>            <span class="hljs-comment">// 再调用本身的findClass方法来进行类加载</span><br>            c = findClass(name);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (resolve) &#123;<br>        resolveClass(c);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JVM</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>垃圾收集</title>
    <link href="/2022/01/23/JVM/%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86/"/>
    <url>/2022/01/23/JVM/%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="对象已死？"><a href="#对象已死？" class="headerlink" title="对象已死？"></a>对象已死？</h1><h2 id="引用计数算法"><a href="#引用计数算法" class="headerlink" title="引用计数算法"></a>引用计数算法</h2><figure class="highlight"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs">很多教科书判断对象是否存活的算法是这样的：<br><br>在对象中添加一个引用计数器，每当有一个地方引用它时，计数器值就加一；当引用失效时，计数器值就减一；任何时刻计数器为零的对象就是不可能再被使用的。<br></code></pre></td></tr></table></figure><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">引用计数算法（<span class="hljs-keyword">Reference</span> Counting）虽然占用了一些额外的内存空间来进行计数，但它的原理简单，判定效率也很高，在大多数情况下它都是一个不错的算法。<br></code></pre></td></tr></table></figure><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">这个看似简单的算法有很多例外情况要考虑，必须要配合大量额外处理才能保证正确地工作，譬如单纯的引用计数就很难解决对象之间相互循环引用的问题。<br></code></pre></td></tr></table></figure><h2 id="可达性分析算法"><a href="#可达性分析算法" class="headerlink" title="可达性分析算法"></a>可达性分析算法</h2><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mathematica">当前主流的商用程序语言（<span class="hljs-variable">Java</span>、<span class="hljs-built_in">C</span><span class="hljs-type">#</span>，上溯至前面提到的古老的<span class="hljs-variable">Lisp</span>）的内存管理子系统，都是通过可达性分析（<span class="hljs-variable">Reachability</span> <span class="hljs-variable">Analysis</span>）算法来判定对象是否存活的。<br><br>基本思路就是通过一系列称为“<span class="hljs-variable">GC</span> <span class="hljs-built_in">Roots</span>”的根对象作为起始节点集，从这些节点开始，根据引用关系向下搜索，搜索过程所走过的路径称为<br>“引用链”（<span class="hljs-variable">Reference</span> <span class="hljs-variable">Chain</span>），如果某个对象到<span class="hljs-variable">GC</span> <span class="hljs-built_in">Roots</span>间没有任何引用链相连，或者用图论的话来说就是从<span class="hljs-variable">GC</span> <span class="hljs-built_in">Roots</span>到这个对象不可达时，则证明此对象是不可能再被使用的。<br></code></pre></td></tr></table></figure><p><img src="/image/image-20220116140237501.png" alt="image-20220116140237501"></p><h2 id="GC-Roots对象"><a href="#GC-Roots对象" class="headerlink" title="GC Roots对象"></a>GC Roots对象</h2><ul><li>在<strong>虚拟机栈</strong>（栈帧中的本地变量表）中引用的对象，譬如各个线程被调用的方法堆栈中使用到的参数、局部变量、临时变量等</li><li>方法区中<strong>类静态属性</strong>引用的对象，譬如Java类的引用类型静态变量</li><li>方法区中<strong>常量</strong>引用的对象，譬如字符串常量池（String Table）里的引用</li><li>本地方法栈中<strong>JNI（Native方法）</strong>引用的对象</li><li>Java<strong>虚拟机内部</strong>引用的对象，譬如基本数据类型对应的Class对象，常驻的异常对象，系统类加载器</li><li>所有被<strong>同步锁</strong>（synchronized关键字）持有的对象</li><li><strong>反应Java虚拟机内部情况</strong>的对象，譬如JMXBean、JVMTI中注册的回调、本地代码缓存等</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><ul><li>强引用，类似<strong>Object obj = new Object()<strong>这种引用关系，只要强引用关系存在，垃圾收集器就</strong>永远不会收掉被引用的对象</strong></li><li>软引用，有用，但非必须的对象。在系统将要<strong>发生内存溢出异常前</strong>，会把这些对象列进回收范围之中<strong>进行第二次回收</strong></li><li>弱引用，描述那些非必须对象，但是它的强度比软引用更弱一些，<strong>每次都会被垃圾收集器收集</strong></li><li>虚引用，最弱的一种引用关系，一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。唯一目的只是为了能在这个对象<strong>被收集器回收时收到一个系统通知</strong></li></ul><h2 id="生存还是死亡"><a href="#生存还是死亡" class="headerlink" title="生存还是死亡"></a>生存还是死亡</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs less">即使在可达性分析算法中判定为不可达的对象，也不是“非死不可”的，这时候它们暂时还处于“缓刑”阶段，要真正宣告一个对象死亡，至少要经历两次标记过程：<br><br>如果对象在进行可达性分析后发现没有与<span class="hljs-selector-tag">GC</span> <span class="hljs-selector-tag">Roots</span>相连接的引用链，那它将会被第一次标记，<br><br>随后进行一次筛选，筛选的条件是此对象是否有必要执行<span class="hljs-selector-tag">finalize</span>()方法。<br><br>假如对象没有覆盖<span class="hljs-selector-tag">finalize</span>()方法(无药可救)，或者<span class="hljs-selector-tag">finalize</span>()方法已经被虚拟机调用过，那么虚拟机将这两种情况都视为“没有必要执行”。<br></code></pre></td></tr></table></figure><h1 id="垃圾收集算法"><a href="#垃圾收集算法" class="headerlink" title="垃圾收集算法"></a>垃圾收集算法</h1><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">从如何判定对象消亡的角度出发，垃圾收集算法可以划分为“引用计数式垃圾收集”（ReferenceCounting <span class="hljs-built_in">GC</span>）和“追踪式垃圾收集”（Tracing <span class="hljs-built_in">GC</span>）两大类，这两类也常被称作“直接垃圾收集”和“间接垃圾收集”。<br><br>由于引用计数式垃圾收集算法在本书讨论到的主流Java虚拟机中均未涉及，所以我们暂不把它作为正文主要内容来讲解，本节介绍的所有算法均属于追踪式垃圾收集的范畴。<br></code></pre></td></tr></table></figure><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs powershell">部分收集（Partial <span class="hljs-built_in">GC</span>）：指目标不是完整收集整个Java堆的垃圾收集，其中又分为：<br><br>新生代收集（Minor <span class="hljs-built_in">GC</span>/Young <span class="hljs-built_in">GC</span>）：指目标只是新生代的垃圾收集。<br><br>老年代收集（Major <span class="hljs-built_in">GC</span>/Old <span class="hljs-built_in">GC</span>）：指目标只是老年代的垃圾收集。目前只有CMS收集器会有单独收集老年代的行为。另外请注意“Major <span class="hljs-built_in">GC</span>”这个说法现在有点混淆，在不同资料上常有不同所指，读者需按上下文区分到底是指老年代的收集还是整堆收集。<br><br>混合收集（Mixed <span class="hljs-built_in">GC</span>）：指目标是收集整个新生代以及部分老年代的垃圾收集。目前只有G1收集器会有这种行为。<br></code></pre></td></tr></table></figure><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lasso">整堆收集（<span class="hljs-literal">Full</span> GC）：收集整个Java堆和方法区的垃圾收集。<br></code></pre></td></tr></table></figure><h2 id="标记-清除"><a href="#标记-清除" class="headerlink" title="标记-清除"></a>标记-清除</h2><img src="/image/image-20220116151303548.png" alt="image-20220116151303548" style="zoom: 50%;" /><h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">速度非常快<br></code></pre></td></tr></table></figure><h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-number">1</span>.是执行效率不稳定，如果<span class="hljs-keyword">Java堆中包含大量对象，而且其中大部分是需要被回收的，这时必须进行大量标记和清除的动作，导致标记和清除两个过程的执行效率都随对象数量增长而降低</span><br><span class="hljs-keyword"></span><br><span class="hljs-number">2</span>.容易产生内存碎片，标记、清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致当以后在程序运行过程中需要分配较大对象时无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。<br>比如上图中有一块较大的对象想存放，但是存放不下<br></code></pre></td></tr></table></figure><h2 id="标记-整理"><a href="#标记-整理" class="headerlink" title="标记-整理"></a>标记-整理</h2><img src="/image/image-20220116151526306.png" alt="image-20220116151526306" style="zoom:50%;" /><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">老年代<br></code></pre></td></tr></table></figure><h3 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">没有内存碎片<br></code></pre></td></tr></table></figure><h3 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">添加了一步整理过程，需要移动对象，速度相对较慢<br></code></pre></td></tr></table></figure><h2 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h2><p><img src="/image/image-20220116151753876.png" alt="image-20220116151753876"></p><p><img src="/image/image-20220116151804412.png" alt="image-20220116151804412"></p><p><img src="/image/image-20220116151814884.png" alt="image-20220116151814884"></p><p><img src="/image/image-20220116151831573.png" alt="image-20220116151831573"></p><h3 id="使用场景-1"><a href="#使用场景-1" class="headerlink" title="使用场景"></a>使用场景</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">现在的商用Java虚拟机大多都优先采用了复制收集算法去回收新生代；但不适用于老年代，因为存活率高，会有较多的复制操作，效率将会降低<br></code></pre></td></tr></table></figure><h3 id="优点-3"><a href="#优点-3" class="headerlink" title="优点"></a>优点</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">不会产生内存碎片，速度也相对较快<br></code></pre></td></tr></table></figure><h3 id="缺点-3"><a href="#缺点-3" class="headerlink" title="缺点"></a>缺点</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">占用双倍的内存空间<br></code></pre></td></tr></table></figure><h1 id="分代收集"><a href="#分代收集" class="headerlink" title="分代收集"></a>分代收集</h1><h2 id="Java堆内存"><a href="#Java堆内存" class="headerlink" title="Java堆内存"></a>Java堆内存</h2><img src="/image/image-20220116153223569.png" alt="image-20220116153223569" style="zoom:50%;" /><h2 id="新生代"><a href="#新生代" class="headerlink" title="新生代"></a>新生代</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">使用Minor <span class="hljs-built_in">GC</span>/Young <span class="hljs-built_in">GC</span>，复制算法<br></code></pre></td></tr></table></figure><h2 id="老年代"><a href="#老年代" class="headerlink" title="老年代"></a>老年代</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">使用Major <span class="hljs-built_in">GC</span>/Old <span class="hljs-built_in">GC</span>，标记-整理算法<br></code></pre></td></tr></table></figure><h1 id="经典垃圾收集器"><a href="#经典垃圾收集器" class="headerlink" title="经典垃圾收集器"></a>经典垃圾收集器</h1><h2 id="STW"><a href="#STW" class="headerlink" title="STW"></a>STW</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">“<span class="hljs-literal">Stop</span> The World”这个词语也许听起来很酷，但这项工作是由虚拟机在后台自动发起和自动完成的，在用户不可知、不可控的情况下把用户的正常工作的线程全部停掉，这对很多应用来说都是不能接受的。<br></code></pre></td></tr></table></figure><h2 id="Serial收集器"><a href="#Serial收集器" class="headerlink" title="Serial收集器"></a>Serial收集器</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-built_in">Serial</span>收集器是最基础、历史最悠久的收集器，曾经（在JDK <span class="hljs-number">1.3</span><span class="hljs-number">.1</span>之前）是HotSpot虚拟机新生代收集器的唯一选择。<br><br>是一个单线程工作的收集器，但它的“单线程”的意义并不仅仅是说明它只会使用一个处理器或一条收集线程去完成垃圾收集工作，更重要的是强调在它进行垃圾收集时，必须暂停其他所有工作线程，直到它收集结束。<br><br>写到这里，笔者似乎已经把<span class="hljs-built_in">Serial</span>收集器描述成一个最早出现，但目前已经老而无用，食之无味，弃之可惜的“鸡肋”了，但事实上，迄今为止，它依然是HotSpot虚拟机运行在客户端模式下的默认新生代收集器，有着优于其他收集器的地方，那就是简单而高效（与其他收集器的单线程相比），对于内存资源受限的环境，它是所有收集器里额外内存消耗（Memory Footprint）最小的<br><br>在用户桌面的应用场景以及近年来流行的部分微服务应用中，分配给虚拟机管理的内存一般来说并不会特别大，收集几十兆甚至一两百兆的新生代（仅仅是指新生代使用的内存，桌面应用甚少超过这个容量），垃圾收集的停顿时间完全可以控制在十几、几十毫秒，最多一百多毫秒以内，只要不是频繁发生收集，这点停顿时间对许多用户来说是完全可以接受的。所以，<span class="hljs-built_in">Serial</span>收集器对于运行在客户端模式下的虚拟机来说是一个很好的选择。<br></code></pre></td></tr></table></figure><h3 id="运行示意图"><a href="#运行示意图" class="headerlink" title="运行示意图"></a>运行示意图</h3><p><img src="/image/image-20220116154120409.png" alt="image-20220116154120409"></p><h2 id="Serial-Old收集器"><a href="#Serial-Old收集器" class="headerlink" title="Serial Old收集器"></a>Serial Old收集器</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-type">Serial</span> <span class="hljs-built_in">Old</span>是<span class="hljs-type">Serial</span>收集器的老年代版本，它同样是一个单线程收集器，使用标记-整理算法。<br></code></pre></td></tr></table></figure><h3 id="运行示意图-1"><a href="#运行示意图-1" class="headerlink" title="运行示意图"></a>运行示意图</h3><p><img src="/image/image-20220116160108978.png" alt="image-20220116160108978"></p><h2 id="ParNew收集器"><a href="#ParNew收集器" class="headerlink" title="ParNew收集器"></a>ParNew收集器</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arduino">ParNew收集器实质上是<span class="hljs-built_in">Serial</span>收集器的多线程并行版本<br><br>ParNew收集器除了支持多线程并行收集之外，其他与<span class="hljs-built_in">Serial</span>收集器相比并没有太多创新之处，但它却是不少运行在服务端模式下的HotSpot虚拟机，尤其是JDK <span class="hljs-number">7</span>之前的遗留系统中首选的新生代收集器，其中有一个与功能、性能无关但其实很重要的原因是：<br><br>除了<span class="hljs-built_in">Serial</span>收集器外，目前只有它能与CMS收集器配合工作。<br><br>自JDK <span class="hljs-number">9</span>开始，ParNew加CMS收集器的组合就不再是官方 推荐的服务端模式下的收集器解决方案了<br></code></pre></td></tr></table></figure><h3 id="运行示意图-2"><a href="#运行示意图-2" class="headerlink" title="运行示意图"></a>运行示意图</h3><p><img src="/image/image-20220116154549099.png" alt="image-20220116154549099"></p><h2 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h2><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs fortran">并行和并发都是并发编程中的专业名词，在谈论垃圾收集器的上下文语境中，它们可以理解为：<br><br>并行（Parallel）：并行描述的是多条垃圾收集器线程之间的关系，说明同一时间有多条这样的线程在协同工作，通常默认此时用户线程是处于等待状态。<br><br>并发（<span class="hljs-keyword">Concurrent</span>）：并发描述的是垃圾收集器线程与用户线程之间的关系，说明同一时间垃圾收集器线程与用户线程都在运行。<br>由于用户线程并未被冻结，所以程序仍然能响应服务请求，但由于垃圾收集器线程占用了一部分系统资源，此时应用程序的处理的吞吐量将受到一定影响。<br></code></pre></td></tr></table></figure><h2 id="Parallel-Scavenge收集器"><a href="#Parallel-Scavenge收集器" class="headerlink" title="Parallel Scavenge收集器"></a>Parallel Scavenge收集器</h2><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs oxygene"><span class="hljs-keyword">Parallel</span> Scavenge收集器也是一款新生代收集器，它同样是基于标记-复制算法实现的收集器，也是能够并行收集的多线程收集器……<br><span class="hljs-keyword">Parallel</span> Scavenge的诸多特性从表面上看和ParNew非常相似<br></code></pre></td></tr></table></figure><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">达到一个可控制的吞吐量，所谓吞吐量就是处理器用于运行用户代码的时间与处理器总消耗时间的比值<br></code></pre></td></tr></table></figure><p><img src="/image/image-20220116155443385.png" alt="image-20220116155443385"></p><h3 id="参数设置"><a href="#参数设置" class="headerlink" title="参数设置"></a>参数设置</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs">控制最大垃圾收集停顿时间的-XX：MaxGCPauseMillis<br><br>直接设置吞吐量大小的-XX：GCTimeRatio<br><br>自适应的调节策略-XX：+UseAdaptiveSizePolicy<br></code></pre></td></tr></table></figure><h2 id="Parallel-Old收集器"><a href="#Parallel-Old收集器" class="headerlink" title="Parallel Old收集器"></a>Parallel Old收集器</h2><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs oxygene"><span class="hljs-keyword">Parallel</span> <span class="hljs-keyword">Old</span>是<span class="hljs-keyword">Parallel</span> Scavenge收集器的老年代版本，支持多线程并发收集，基于标记-整理算法实现。<br></code></pre></td></tr></table></figure><h3 id="运行示意图-3"><a href="#运行示意图-3" class="headerlink" title="运行示意图"></a>运行示意图</h3><p><img src="/image/image-20220116160223688.png" alt="image-20220116160223688"></p><h2 id="CMS收集器"><a href="#CMS收集器" class="headerlink" title="CMS收集器"></a>CMS收集器</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">CMS（Concurrent <span class="hljs-selector-tag">Mark</span> Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器，基于标记-清除算法实现<br><br>目前很大一部分的Java应用集中在互联网网站或者基于浏览器的<span class="hljs-selector-tag">B</span>/S系统的服务端上，这类应用通常都会较为 关注服务的响应速度，希望系统停顿时间尽可能短，以给用户带来良好的交互体验。<br></code></pre></td></tr></table></figure><h3 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">以获取最短回收停顿时间为目标的收集器<br></code></pre></td></tr></table></figure><h3 id="运行过程"><a href="#运行过程" class="headerlink" title="运行过程"></a>运行过程</h3><ul><li>初始标记</li></ul><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica">会触发<span class="hljs-variable">STW</span>，仅仅只是标记一下<span class="hljs-variable">GC</span> <span class="hljs-built_in">Roots</span>能直接关联到的对象，速度很快<br></code></pre></td></tr></table></figure><ul><li>并发标记</li></ul><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica">从<span class="hljs-variable">GC</span> <span class="hljs-built_in">Roots</span>的直接关联对象开始遍历整个对象图的过程，这个过程耗时较长但是不需要停顿用户线程，可以与垃圾收集线程一起并发运行<br></code></pre></td></tr></table></figure><ul><li>重新标记</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">会触发STW，是为了修正并发标记期间，因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录（详见3.4.6节中关于增量更新的讲解），这个阶段的停顿时间通常会比初始标记阶段稍长一些，但也远比并发标记阶段的时间短<br></code></pre></td></tr></table></figure><ul><li>并发清除</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">清理删除掉标记阶段判断的已经死亡的对象，由于不需要移动存活对象，所以这个阶段也是可以与用户线程同时并发的<br></code></pre></td></tr></table></figure><h3 id="运行示意图-4"><a href="#运行示意图-4" class="headerlink" title="运行示意图"></a>运行示意图</h3><p><img src="/image/image-20220116161932917.png" alt="image-20220116161932917"></p><h3 id="缺点-4"><a href="#缺点-4" class="headerlink" title="缺点"></a>缺点</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> CMS收集器对处理器资源非常敏感。<br><br><span class="hljs-bullet">2.</span> CMS收集器无法处理“浮动垃圾”（Floating Garbage）<br><br><span class="hljs-bullet">3.</span> CMS是一款基于“标记-清除”算法实现的收集器，缺点非常明显，一是不稳定，二是有垃圾碎片<br></code></pre></td></tr></table></figure><h2 id="Garbage-First收集器"><a href="#Garbage-First收集器" class="headerlink" title="Garbage First收集器"></a>Garbage First收集器</h2><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">Garbage</span> <span class="hljs-built_in">First</span>（简称<span class="hljs-variable">G1</span>）收集器是垃圾收集器技术发展历史上的里程碑式的成果，它开创了收集器面向局部收集的设计思路和基于<span class="hljs-built_in">Region</span>的内存布局形式。<br><br><span class="hljs-variable">G1</span>是一款主要面向服务端应用的垃圾收集器。<br></code></pre></td></tr></table></figure><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mathematica">同时注重吞吐量和低延迟，默认暂停目标 <span class="hljs-number">200</span><span class="hljs-variable">ms</span><br>超大堆内存，会将堆划分为多个大小相等的<span class="hljs-built_in">Region</span><br>整体上是标记<span class="hljs-operator">+</span>整理算法，两个区域之间是复制算法<br></code></pre></td></tr></table></figure><h3 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">首先要有一个思想上的改变，在G1收集器出现之前的所有 其他收集器，包括CMS在内，垃圾收集的目标范围要么是整个新生代（Minor <span class="hljs-built_in">GC</span>），要么就是整个老年代（Major <span class="hljs-built_in">GC</span>），再要么就是整个Java堆（Full <span class="hljs-built_in">GC</span>）。<br><br>而G1跳出了这个樊笼，它可以面向堆内存任何部分来组成回收集（Collection <span class="hljs-built_in">Set</span>，一般简称CSet）进行回收，衡量标准不再是它属于哪个分代，而 是哪块内存中存放的垃圾数量最多，回收收益最大，这就是G1收集器的Mixed <span class="hljs-built_in">GC</span>模式。<br></code></pre></td></tr></table></figure><h3 id="TAMS"><a href="#TAMS" class="headerlink" title="TAMS"></a>TAMS</h3><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">G1</span>为每一个<span class="hljs-built_in">Region</span>设计了两个名为<span class="hljs-variable">TAMS</span>（<span class="hljs-built_in">Top</span> <span class="hljs-variable">at</span> <span class="hljs-variable">Mark</span> <span class="hljs-variable">Start</span>）的指针，把<span class="hljs-built_in">Region</span>中的一部分空间划分出来用于并发回收过程中的新对象分配，并发回收时新分配的对象地址都必须要在这两个指针位置以上。<br></code></pre></td></tr></table></figure><h3 id="SATB"><a href="#SATB" class="headerlink" title="SATB"></a>SATB</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">原始快照<br></code></pre></td></tr></table></figure><h3 id="运行过程-1"><a href="#运行过程-1" class="headerlink" title="运行过程"></a>运行过程</h3><ul><li>初始标记</li></ul><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica">会触发<span class="hljs-variable">STW</span>，仅仅只是标记一下<span class="hljs-variable">GC</span> <span class="hljs-built_in">Roots</span>能直接关联到的对象，并且修改<span class="hljs-variable">TAMS</span>指针的值，让下一阶段用户线程并发运行时，能正确地在可用的<span class="hljs-built_in">Region</span>中分配新对象。<br></code></pre></td></tr></table></figure><ul><li>并发标记</li></ul><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica">从<span class="hljs-variable">GC</span> <span class="hljs-built_in">Root</span>开始对堆中对象进行可达性分析，递归扫描整个堆里的对象图，找出要回收的对象，这阶段耗时较长，但可与用户程序并发执行。<br></code></pre></td></tr></table></figure><ul><li>最终标记</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">会触发STW，用于处理并发阶段结束后仍遗留下来的最后那少量的SATB记录。<br></code></pre></td></tr></table></figure><ul><li>筛选回收</li></ul><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica">会触发<span class="hljs-variable">STW</span>，负责更新<span class="hljs-built_in">Region</span>的统计数据，对各个<span class="hljs-built_in">Region</span>的回收价值和成本进行排序，根据用户所期望的停顿时间来制定回收计划，可以自由选择任意多个<span class="hljs-built_in">Region</span> 构成回收集，然后把决定回收的那一部分<span class="hljs-built_in">Region</span>的存活对象复制到空的<span class="hljs-built_in">Region</span>中，再清理掉整个旧<span class="hljs-built_in">Region</span>的全部空间。<br></code></pre></td></tr></table></figure><h3 id="运行示意图-5"><a href="#运行示意图-5" class="headerlink" title="运行示意图"></a>运行示意图</h3><p><img src="/image/image-20220116164950814.png" alt="image-20220116164950814"></p><img src="/image/image-20220116170208884.png" alt="image-20220116170208884" style="zoom:50%;" /><h4 id="Young-Collection"><a href="#Young-Collection" class="headerlink" title="Young Collection"></a>Young Collection</h4><img src="/image/image-20220116170446228.png" alt="image-20220116170446228" style="zoom:33%;" /><img src="/image/image-20220116170502125.png" alt="image-20220116170502125" style="zoom:33%;" /><img src="/image/image-20220116170513803.png" alt="image-20220116170513803" style="zoom:33%;" /><h4 id="Young-Collection-Concurrent-Mark"><a href="#Young-Collection-Concurrent-Mark" class="headerlink" title="Young Collection + Concurrent Mark"></a>Young Collection + Concurrent Mark</h4><img src="/image/image-20220116170629991.png" alt="image-20220116170629991" style="zoom:33%;" /><h4 id="Mixed-Collection"><a href="#Mixed-Collection" class="headerlink" title="Mixed Collection"></a>Mixed Collection</h4><img src="/image/image-20220116170818400.png" alt="image-20220116170818400" style="zoom:33%;" /><h3 id="相关参数"><a href="#相关参数" class="headerlink" title="相关参数"></a>相关参数</h3><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-XX: +UseG1GC</span><br><span class="hljs-deletion">-xx: G1HeapRegionSize = size</span><br><span class="hljs-deletion">-xx: MaxGCPauseMillis = time</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JVM</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>对象的创建过程</title>
    <link href="/2022/01/23/JVM/%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA%E8%BF%87%E7%A8%8B/"/>
    <url>/2022/01/23/JVM/%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA%E8%BF%87%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="一、检查"><a href="#一、检查" class="headerlink" title="一、检查"></a>一、检查</h1><figure class="highlight"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs">1.检查指令的参数是否能在常量池中定位到一个类的符号引用<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">2.检查这个符号引用代表的类是否已被加载、解析和初始化过<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">3.类加载检查是否符合《Java虚拟机规范》的全部约束要求<br></code></pre></td></tr></table></figure><h1 id="二、分配内存"><a href="#二、分配内存" class="headerlink" title="二、分配内存"></a>二、分配内存</h1><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-number">1</span>.选择分配方式。<br><span class="hljs-keyword">Java堆中的内存如果是绝对规整的，将会采用“指针碰撞”的分配方式；</span><br><span class="hljs-keyword"></span>反之采用“空闲列表”的分配方式。<br>而<span class="hljs-keyword">Java堆中的内存是否规整又采用的垃圾收集器是否带有空间压缩整理的能力决定。</span><br><span class="hljs-keyword"></span><br>因此使用Serial、ParNew等带压缩整理过程的收集器时，系统采用的分配算法是指针碰撞，既简单又高校。<br>使用CMS这种基于清除算法的收集器时，采用比较复杂的空闲列表来分配内存<br><br><span class="hljs-number">2</span>.因为创建对象是虚拟机中非常频繁的行为，要解决线程问题。<br>虚拟机提供了两种解决方案：<br>一种是采用CAS配上失败重试的方式保证更新操作的原子性；<br>另一种是为每个线程在<span class="hljs-keyword">Java堆中预先分配一块内存，称为本地线程分配缓存(Thread </span>Local Allocation <span class="hljs-keyword">Buffer, </span>TLAB)<br></code></pre></td></tr></table></figure><h1 id="三、初始化"><a href="#三、初始化" class="headerlink" title="三、初始化"></a>三、初始化</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml">1.隐式初始化。<br>虚拟机将分配到不包括对象头在内的内存空间初始化为0，<br>如果这分配内存时采用TLAB解决线程安全问题，那么这一步会提前至TLAB分配时顺便进行。<br><br>2.显示初始化。<br>虚拟机为对象头进行必要的设置，<br>例如这个对象是哪个类的实例、如何才能找到类的元数据信息、对象的哈希码、对象的GC分代年龄等信息。<br>从虚拟机的视角来看，一个新的对象已经产生了。<br><br>3.执行<span class="hljs-tag">&lt;<span class="hljs-name">init</span>&gt;</span>()方法，按照开发者的意愿对对象进行初始化，此时一个真正可用的对象才算完全被构造出来。<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JVM</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Zk分布式锁的实现</title>
    <link href="/2022/01/17/Zookeeper%E5%8E%9F%E7%90%86/Zk%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <url>/2022/01/17/Zookeeper%E5%8E%9F%E7%90%86/Zk%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="第一种方法"><a href="#第一种方法" class="headerlink" title="第一种方法"></a>第一种方法</h1><figure class="highlight"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs">类似于Redis的setnx实现机制，但容易引起羊群效应<br></code></pre></td></tr></table></figure><h1 id="第二种方法"><a href="#第二种方法" class="headerlink" title="第二种方法"></a>第二种方法</h1><p><img src="/image/image-20220118000142610.png" alt="image-20220118000142610"></p><h2 id="读写锁"><a href="#读写锁" class="headerlink" title="读写锁"></a>读写锁</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">因为读读之间是不需要排他的，所以基于Curator的ReentrantReadWriteLock可以实现读写锁提高性能<br></code></pre></td></tr></table></figure><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 写入锁判断自己前面还有没有节点，如果没有就可以获取到锁，如果有就等待前面的节点释放锁。<br><br><span class="hljs-bullet">2.</span> 读锁判断自己前面还有没有写入锁的节点，也就是前面的节点是否包含WRIT，如果有那么等待前面的节点释放锁。<br></code></pre></td></tr></table></figure><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sqf">写入锁在申请锁时写入的节点名称是这样的   xxxx-<span class="hljs-variable">__WRIT__00000000xxx</span> <br>例如：   <span class="hljs-variable">_c_9b6e456b</span>-<span class="hljs-number">94</span>fe-<span class="hljs-number">47</span>e7-b968-<span class="hljs-number">34027</span>c094b7d-<span class="hljs-variable">__WRIT__0000000006</span><br><br>读取锁在申请锁时写入的节点名称是这样的  xxxx-<span class="hljs-variable">__READ__00000000xxx</span> <br>例如：    <span class="hljs-variable">_c_9b6e456b90</span>-<span class="hljs-number">9</span>c33-<span class="hljs-number">6294665</span>cf525--b6448-<span class="hljs-variable">__READ__0000000005</span><br><br>区别就是写入锁的字符串包含WRIT，读取所包含READ<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Zookeeper原理</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>MySQL优化</title>
    <link href="/2021/07/24/MySQL/MySQL%E4%BC%98%E5%8C%96/"/>
    <url>/2021/07/24/MySQL/MySQL%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<figure class="highlight awk"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs awk">以下内容均为转载自<br>https:<span class="hljs-regexp">//</span>www.bilibili.com<span class="hljs-regexp">/video/</span>BV1kh411Y7vx?p=<span class="hljs-number">17</span>&amp;spm_id_from=pageDriver<br>的课程资料<br></code></pre></td></tr></table></figure><h1 id="一、SQL优化"><a href="#一、SQL优化" class="headerlink" title="一、SQL优化"></a>一、SQL优化</h1><p>SQL优化的目的是为了SQL语句能够具备优秀的查询性能，实现这样的目的有很多的途径：</p><ul><li>工程优化如何实现：数据库标准、表的结构标准、字段的标准、创建索引</li><li>SQL语句的优化：当前SQL语句有没有命中索引。</li></ul><h2 id="1-工程优化如何实现"><a href="#1-工程优化如何实现" class="headerlink" title="1.工程优化如何实现"></a>1.工程优化如何实现</h2><p>参考《MySQL军规升级版》</p><h2 id="2-Explain执行计划——SQL优化神器"><a href="#2-Explain执行计划——SQL优化神器" class="headerlink" title="2.Explain执行计划——SQL优化神器"></a>2.Explain执行计划——SQL优化神器</h2><p>得知道当前系统里有哪些SQL是慢SQL，查询性能超过1s的sql，然后再通过Explain工具可以对当前SQL语句的性能进行判断——为什么慢，怎么解决。</p><p>要想知道哪些SQL是慢SQL，有两种方式，一种是开启本地MySQL的慢查询日志；另一种是阿里云提供的RDS（第三方部署的MySQL服务器），提供了查询慢SQL的功能。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">explain <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> employees <span class="hljs-keyword">where</span> name <span class="hljs-keyword">like</span> &quot;customer100%&quot;<br></code></pre></td></tr></table></figure><p>通过在SQL语句前面加上explain关键字，执行后并不会真正的执行sql语句本身，而是通过explain工具来分析当前这条SQL语句的性能细节：比如是什么样的查询类型、可能用到的索引及实际用到的索引，和一些额外的信息。</p><p><img src="/image/image-20210518092433386.png" alt="image-20210518092433386"></p><h2 id="3-MySQL的内部优化器"><a href="#3-MySQL的内部优化器" class="headerlink" title="3.MySQL的内部优化器"></a>3.MySQL的内部优化器</h2><p>在SQL查询开始之前，MySQL内部优化器会进行一次自我优化，让这一次的查询性能尽可能的好。</p><p>当前执行的SQL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">explain <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tb_book <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br><span class="hljs-keyword">show</span> warnings;<br></code></pre></td></tr></table></figure><p>内部优化器优化后的效果：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/* select#1 */</span> <span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-keyword">AS</span> `id`,<span class="hljs-string">&#x27;千锋Java厉害&#x27;</span> <span class="hljs-keyword">AS</span> `name` <span class="hljs-keyword">from</span> `db_mysql_pro`.`tb_book` <span class="hljs-keyword">where</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h2 id="4-select-type列"><a href="#4-select-type列" class="headerlink" title="4.select_type列"></a>4.select_type列</h2><p>关闭 MySQL 对衍生表的合并优化：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">set</span> session optimizer_switch<span class="hljs-operator">=</span><span class="hljs-string">&#x27;derived_merge=off&#x27;</span>; <br></code></pre></td></tr></table></figure><p>执行了这样的计划：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">EXPLAIN <span class="hljs-keyword">select</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">1</span> <span class="hljs-keyword">from</span> tb_author <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span>) <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tb_book <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span>) der;<br></code></pre></td></tr></table></figure><p><img src="/image/image-20210518093837712.png" alt="image-20210518093837712"></p><ul><li>derived：</li></ul><p>第一条执行的sql是from后面的子查询，该子查询只要在from后面，就会生成一张衍生表，因此他的查询类型：derived</p><ul><li>subquery：</li></ul><p>在select之后 from之前的子查询</p><ul><li>primary：</li></ul><p>最外部的select</p><ul><li>simple：</li></ul><p>不包含子查询的简单的查询</p><ul><li>union：</li></ul><p>使用union进行的联合查询的类型</p><h2 id="5-table列"><a href="#5-table列" class="headerlink" title="5.table列"></a>5.table列</h2><p>当前查询正在查哪张表</p><h2 id="6-type列"><a href="#6-type列" class="headerlink" title="6.type列"></a>6.type列</h2><p>type列可以直观的判断出当前的sql语句的性能。type里的取值和性能的优劣顺序如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">null</span> <span class="hljs-operator">&gt;</span> <span class="hljs-keyword">system</span> <span class="hljs-operator">&gt;</span> const <span class="hljs-operator">&gt;</span> eq_ref <span class="hljs-operator">&gt;</span> <span class="hljs-keyword">ref</span> <span class="hljs-operator">&gt;</span> <span class="hljs-keyword">range</span> <span class="hljs-operator">&gt;</span> index <span class="hljs-operator">&gt;</span> <span class="hljs-keyword">all</span><br></code></pre></td></tr></table></figure><p>对于SQL优化来说，要尽量保证type列的值是属于range及以上级别。</p><ul><li>null</li></ul><p>性能最好的，一般在使用了聚合函数操作索引列，结果直接从索引树获取即可，因此是性能最好。</p><ul><li>system</li></ul><p>很少见。直接和一条记录进行匹配。</p><ul><li>const</li></ul><p>使用主键索引或唯一索引和常量进行比较，这种性能非常好</p><ul><li>eq_ref</li></ul><p>在进行多表连接查询时。如果查询条件是使用了主键进行比较，那么当前查询类型是eq_ref</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">EXPLAIN <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tb_book_author <span class="hljs-keyword">left</span> <span class="hljs-keyword">JOIN</span> tb_book <span class="hljs-keyword">on</span> tb_book_author.book_id <span class="hljs-operator">=</span> tb_book.id<br></code></pre></td></tr></table></figure><ul><li><p>ref</p><ul><li>简单查询：EXPLAIN select * from tb_book where name=’book1’</li></ul><p>​      如果查询条件是普通列索引，那么类型ref</p><ul><li>复杂查询：EXPLAIN select book_id from tb_book left join tb_book_author on tb_book.id = tb_book_author.book_id</li></ul><p>​     如果查询条件是普通列索引，那么类型ref</p></li><li><p>range:</p></li></ul><p> 使用索引进行范围查找</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">explain <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tb_book <span class="hljs-keyword">where</span> id<span class="hljs-operator">&gt;</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><ul><li>index</li></ul><p>查询没有进行条件判断。但是所有的数据都可以直接从索引树上获取(book表中的所有列都有索引)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">explain <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tb_book<br></code></pre></td></tr></table></figure><ul><li>all</li></ul><p>没有走索引，进行了全表扫描</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">explain <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tb_author<br></code></pre></td></tr></table></figure><h2 id="7-id列"><a href="#7-id列" class="headerlink" title="7.id列"></a>7.id列</h2><p>在多个select中，id越大越先执行，如果id相同。上面的先执行。</p><h2 id="8-possible-keys列"><a href="#8-possible-keys列" class="headerlink" title="8.possible keys列"></a>8.possible keys列</h2><p>这一次的查询可能会用到的索引。也就是说mysql内部优化器会进行判断，如果这一次查询走索引的性能比全表扫描的性能要查，那么内部优化器就让此次查询进行全表扫描——这样的判断依据我们可以通过trace工具来查看</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">EXPLAIN <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> employees <span class="hljs-keyword">where</span> name <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;custome%&#x27;</span><br></code></pre></td></tr></table></figure><p>这条sql走索引查询的行数是500多万，那么总的数据行数也就500多万，因此直接进行全表扫描性能更快</p><p><img src="/image/image-20210518103742876.png" alt="image-20210518103742876"></p><h2 id="9-key列"><a href="#9-key列" class="headerlink" title="9.key列"></a>9.key列</h2><p>实际该sql语句使用的索引</p><h2 id="10-rows列"><a href="#10-rows列" class="headerlink" title="10.rows列"></a>10.rows列</h2><p>该sql语句可能要查询的数据条数</p><h2 id="11-key-len列"><a href="#11-key-len列" class="headerlink" title="11.key_len列"></a>11.key_len列</h2><p>键的长度，通过这一列可以让我们知道当前命中了联合索引中的哪几列。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">EXPLAIN <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> employees <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;customer10011&#x27;</span> # <span class="hljs-number">74</span><br>EXPLAIN <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> employees <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;customer10011&#x27;</span> <span class="hljs-keyword">and</span> age<span class="hljs-operator">=</span><span class="hljs-number">30</span> # <span class="hljs-number">74</span> <span class="hljs-number">4</span> <span class="hljs-operator">=</span> <span class="hljs-number">78</span><br>EXPLAIN <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> employees <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;customer10011&#x27;</span> <span class="hljs-keyword">and</span> age<span class="hljs-operator">=</span><span class="hljs-number">30</span> <span class="hljs-keyword">and</span> position<span class="hljs-operator">=</span><span class="hljs-string">&#x27;dev&#x27;</span> # <span class="hljs-number">74</span> <span class="hljs-number">4</span> <span class="hljs-number">62</span> <span class="hljs-operator">=</span> <span class="hljs-number">140</span><br>EXPLAIN <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> employees <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;customer10011&#x27;</span> <span class="hljs-keyword">and</span> position<span class="hljs-operator">=</span><span class="hljs-string">&#x27;dev&#x27;</span> # <span class="hljs-number">74</span><br></code></pre></td></tr></table></figure><p>name长度是74，也就是当看到key-len是74，表示使用了联合索引中的name列</p><p><img src="/image/image-20210518104705482.png" alt="image-20210518104705482"></p><p>计算规则：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> 字符串<br><span class="hljs-bullet">1.</span> char(n): n字节长度<br><span class="hljs-bullet">2.</span> varchar(n): 2字节存储字符串长度,如果是utf-8,则长度3n + 2<br><br><span class="hljs-bullet">-</span> 数值类型<br><span class="hljs-bullet">1.</span> tinyint: 1字节<br><span class="hljs-bullet">2.</span> smallint: 2字节<br><span class="hljs-bullet">3.</span> int: 4字节<br><span class="hljs-bullet">4.</span> bigint: 8字节<br><br><span class="hljs-bullet">-</span> 时间类型<br><span class="hljs-bullet">1.</span> date: 3字节<br><span class="hljs-bullet">2.</span> timestamp: 4字节<br><span class="hljs-bullet">3.</span> datetime: 8字节<br><br>如果字段允许为NULL,需要1字节记录是否为NULL<br>索引最大长度是768字节,当字符串过长时, mysql会做一个类似左前缀索引的处理,将前半部分的字符提取出来做索引<br></code></pre></td></tr></table></figure><h2 id="12-extra列"><a href="#12-extra列" class="headerlink" title="12.extra列"></a>12.extra列</h2><p>extra列提供了额外的信息，是能够帮助我们判断当前sql的是否使用了覆盖索引、文件排序、使用了索引进行查询条件等等的信息。</p><ul><li><p>Using index:使用了覆盖索引</p><p>所谓的覆盖索引，指的是当前查询的所有数据字段都是索引列，这就意味着可以直接从索引列中获取数据，而不需要进行查表。</p><p>使用覆盖索引进行性能优化这种手段是之后sql优化经常要用到的。</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">EXPLAIN <span class="hljs-keyword">select</span> book_id,author_id <span class="hljs-keyword">from</span> tb_book_author <span class="hljs-keyword">where</span> book_id <span class="hljs-operator">=</span> <span class="hljs-number">1</span> <span class="hljs-comment">-- 覆盖索引</span><br>EXPLAIN <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tb_book_author <span class="hljs-keyword">where</span> book_id <span class="hljs-operator">=</span> <span class="hljs-number">1</span> <span class="hljs-comment">-- 没有使用覆盖索引</span><br></code></pre></td></tr></table></figure><ul><li><p>using where</p><p>使用了普通索引列做查询条件</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">EXPLAIN <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tb_author <span class="hljs-keyword">where</span> name <span class="hljs-operator">&gt;</span> <span class="hljs-string">&#x27;a&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>using index condition</li></ul><p>查询结果没有使用覆盖索引，建议可以使用覆盖索引来优化</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">EXPLAIN <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tb_book_author <span class="hljs-keyword">where</span> book_id <span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><ul><li>Using temporary</li></ul><p>在非索引列上进行去重操作就需要使用一张临时表来实现，性能是非常差的。当前name列没有索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">EXPLAIN <span class="hljs-keyword">select</span> <span class="hljs-keyword">DISTINCT</span> name <span class="hljs-keyword">from</span> tb_author<br></code></pre></td></tr></table></figure><ul><li>Using filesort</li></ul><p>使用文件排序： 会使用磁盘+内存的方式进行文件排序，会涉及到两个概念：单路排序、双路排序</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">EXPLAIN <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tb_author <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> name<br></code></pre></td></tr></table></figure><ul><li>Select tables optimized away</li></ul><p>直接在索引列上进行聚合函数的操作，没有进行任何的表的操作</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">EXPLAIN <span class="hljs-keyword">select</span> <span class="hljs-built_in">min</span>(id) <span class="hljs-keyword">from</span> tb_book<br></code></pre></td></tr></table></figure><h2 id="13-应用场景总结"><a href="#13-应用场景总结" class="headerlink" title="13.应用场景总结"></a>13.应用场景总结</h2><ul><li><p><strong>符合最左前缀法制</strong></p></li><li><p><strong>不能在索引上做计算、函数、类型转换，不然会变成全表扫描，如果是对日期查找，尽量通过范围查找进行优化</strong></p></li><li><p><strong>尽量使用覆盖索引</strong></p></li><li><p><strong>使用了不等于（!= 或者 &lt;&gt;）会导致全表扫描</strong></p></li><li><p><strong>使用 <code>is null</code> 、 <code>is not null</code> 会导致全表扫描，所以尽量让属性非空</strong></p></li><li><p><strong>使用 <code>like</code> 以通配符开头<code>(&#39;%abc...&#39;)</code> 会导致全表扫描</strong></p></li><li><p><strong>字符串不加单引号会导致全表扫描</strong></p></li><li><p><strong>少用 <code>or</code> 或 <code>in</code> ，MySQL 内部优化器可能会不走索引</strong></p></li><li><p><strong>范围查询优化</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">比如在</span> <span class="hljs-string">age</span> <span class="hljs-string">&gt;=</span> <span class="hljs-number">1</span> <span class="hljs-string">and</span> <span class="hljs-string">age</span> <span class="hljs-string">&lt;=</span> <span class="hljs-number">2000000</span> <span class="hljs-string">的情况下</span><br><span class="hljs-string">可以在应用层优化为多线程执行，可采用工具类</span> <span class="hljs-string">CountDownLatch</span><br><span class="hljs-string">age</span> <span class="hljs-string">&gt;=</span> <span class="hljs-number">1</span> <span class="hljs-string">and</span> <span class="hljs-string">age</span> <span class="hljs-string">&lt;=</span> <span class="hljs-number">1000</span><br><span class="hljs-string">age</span> <span class="hljs-string">&gt;=</span> <span class="hljs-number">1001 </span><span class="hljs-string">and</span> <span class="hljs-string">age</span> <span class="hljs-string">&lt;=</span> <span class="hljs-number">2000</span><br><span class="hljs-string">age</span> <span class="hljs-string">&gt;=</span> <span class="hljs-number">3001 </span><span class="hljs-string">and</span> <span class="hljs-string">age</span> <span class="hljs-string">&lt;=</span> <span class="hljs-number">3000</span><br><span class="hljs-string">······</span><br></code></pre></td></tr></table></figure></li></ul><h1 id="二、Trace工具"><a href="#二、Trace工具" class="headerlink" title="二、Trace工具"></a>二、Trace工具</h1><p>在执行计划中我们发现有的sql会走索引，有的sql即使明确使用了索引也不会走索引。这是因为mysql的内部优化器任务走索引的性能比不走索引全表扫描的性能要差，因此mysql内部优化器选择了使用全表扫描。依据来自于trace工具的结论。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">set</span> session optimizer_trace<span class="hljs-operator">=</span>&quot;enabled=on&quot;, end_markers_in_json<span class="hljs-operator">=</span><span class="hljs-keyword">on</span>; <span class="hljs-comment">-- 开启trace</span><br> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> employees <span class="hljs-keyword">where</span> name <span class="hljs-operator">&gt;</span> <span class="hljs-string">&#x27;a&#x27;</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> position; <span class="hljs-comment">-- 执行查询</span><br> <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> information_schema.OPTIMIZER_TRACE; <span class="hljs-comment">-- 获得trace的分析结果</span><br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;steps&quot;</span>: [<br>    &#123;<br>      <span class="hljs-attr">&quot;join_preparation&quot;</span>: &#123; -- 阶段1:进入到准备阶段<br>        <span class="hljs-string">&quot;select#&quot;</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">&quot;steps&quot;</span>: [<br>          &#123;<br>            <span class="hljs-attr">&quot;expanded_query&quot;</span>: <span class="hljs-string">&quot;/* select#1 */ select `employees`.`id` AS `id`,`employees`.`name` AS `name`,`employees`.`age` AS `age`,`employees`.`position` AS `position`,`employees`.`hire_time` AS `hire_time` from `employees` where (`employees`.`name` &gt; &#x27;a&#x27;) order by `employees`.`position`&quot;</span><br>          &#125;<br>        ] <span class="hljs-comment">/* steps */</span><br>      &#125; <span class="hljs-comment">/* join_preparation */</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">&quot;join_optimization&quot;</span>: &#123; -- 阶段2: 进入到优化阶段<br>        <span class="hljs-string">&quot;select#&quot;</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">&quot;steps&quot;</span>: [<br>          &#123;<br>            <span class="hljs-attr">&quot;condition_processing&quot;</span>: &#123; -- 条件处理<br>              <span class="hljs-attr">&quot;condition&quot;</span>: <span class="hljs-string">&quot;WHERE&quot;</span>,<br>              <span class="hljs-attr">&quot;original_condition&quot;</span>: <span class="hljs-string">&quot;(`employees`.`name` &gt; &#x27;a&#x27;)&quot;</span>,<br>              <span class="hljs-attr">&quot;steps&quot;</span>: [<br>                &#123;<br>                  <span class="hljs-attr">&quot;transformation&quot;</span>: <span class="hljs-string">&quot;equality_propagation&quot;</span>,<br>                  <span class="hljs-attr">&quot;resulting_condition&quot;</span>: <span class="hljs-string">&quot;(`employees`.`name` &gt; &#x27;a&#x27;)&quot;</span><br>                &#125;,<br>                &#123;<br>                  <span class="hljs-attr">&quot;transformation&quot;</span>: <span class="hljs-string">&quot;constant_propagation&quot;</span>,<br>                  <span class="hljs-attr">&quot;resulting_condition&quot;</span>: <span class="hljs-string">&quot;(`employees`.`name` &gt; &#x27;a&#x27;)&quot;</span><br>                &#125;,<br>                &#123;<br>                  <span class="hljs-attr">&quot;transformation&quot;</span>: <span class="hljs-string">&quot;trivial_condition_removal&quot;</span>,<br>                  <span class="hljs-attr">&quot;resulting_condition&quot;</span>: <span class="hljs-string">&quot;(`employees`.`name` &gt; &#x27;a&#x27;)&quot;</span><br>                &#125;<br>              ] <span class="hljs-comment">/* steps */</span><br>            &#125; <span class="hljs-comment">/* condition_processing */</span><br>          &#125;,<br>          &#123;<br>            <span class="hljs-attr">&quot;substitute_generated_columns&quot;</span>: &#123;<br>            &#125; <span class="hljs-comment">/* substitute_generated_columns */</span><br>          &#125;,<br>          &#123;<br>            <span class="hljs-attr">&quot;table_dependencies&quot;</span>: [ -- 表依赖详情<br>              &#123;<br>                <span class="hljs-attr">&quot;table&quot;</span>: <span class="hljs-string">&quot;`employees`&quot;</span>,<br>                <span class="hljs-attr">&quot;row_may_be_null&quot;</span>: <span class="hljs-literal">false</span>,<br>                <span class="hljs-attr">&quot;map_bit&quot;</span>: <span class="hljs-number">0</span>,<br>                <span class="hljs-attr">&quot;depends_on_map_bits&quot;</span>: [<br>                ] <span class="hljs-comment">/* depends_on_map_bits */</span><br>              &#125;<br>            ] <span class="hljs-comment">/* table_dependencies */</span><br>          &#125;,<br>          &#123;<br>            <span class="hljs-attr">&quot;ref_optimizer_key_uses&quot;</span>: [<br>            ] <span class="hljs-comment">/* ref_optimizer_key_uses */</span><br>          &#125;,<br>          &#123;<br>            <span class="hljs-attr">&quot;rows_estimation&quot;</span>: [<br>              &#123;<br>                <span class="hljs-attr">&quot;table&quot;</span>: <span class="hljs-string">&quot;`employees`&quot;</span>,<br>                <span class="hljs-attr">&quot;range_analysis&quot;</span>: &#123;<br>                  <span class="hljs-attr">&quot;table_scan&quot;</span>: &#123;<br>                    <span class="hljs-attr">&quot;rows&quot;</span>: <span class="hljs-number">5598397</span>,<br>                    <span class="hljs-attr">&quot;cost&quot;</span>: <span class="hljs-number">576657</span><br>                  &#125; <span class="hljs-comment">/* table_scan */</span>,<br>                  <span class="hljs-attr">&quot;potential_range_indexes&quot;</span>: [ -- 可能使用到的索引<br>                    &#123;<br>                      <span class="hljs-attr">&quot;index&quot;</span>: <span class="hljs-string">&quot;PRIMARY&quot;</span>, -- 主键索引<br>                      <span class="hljs-attr">&quot;usable&quot;</span>: <span class="hljs-literal">false</span>,<br>                      <span class="hljs-attr">&quot;cause&quot;</span>: <span class="hljs-string">&quot;not_applicable&quot;</span><br>                    &#125;,<br>                    &#123;<br>                      <span class="hljs-attr">&quot;index&quot;</span>: <span class="hljs-string">&quot;idx_name_age_position&quot;</span>, -- 联合索引<br>                      <span class="hljs-attr">&quot;usable&quot;</span>: <span class="hljs-literal">true</span>,<br>                      <span class="hljs-attr">&quot;key_parts&quot;</span>: [<br>                        <span class="hljs-string">&quot;name&quot;</span>,<br>                        <span class="hljs-string">&quot;age&quot;</span>,<br>                        <span class="hljs-string">&quot;position&quot;</span>,<br>                        <span class="hljs-string">&quot;id&quot;</span><br>                      ] <span class="hljs-comment">/* key_parts */</span><br>                    &#125;,<br>                    &#123;<br>                      <span class="hljs-attr">&quot;index&quot;</span>: <span class="hljs-string">&quot;idx_hire_time&quot;</span>,<br>                      <span class="hljs-attr">&quot;usable&quot;</span>: <span class="hljs-literal">false</span>,<br>                      <span class="hljs-attr">&quot;cause&quot;</span>: <span class="hljs-string">&quot;not_applicable&quot;</span><br>                    &#125;<br>                  ] <span class="hljs-comment">/* potential_range_indexes */</span>,<br>                  <span class="hljs-attr">&quot;setup_range_conditions&quot;</span>: [<br>                  ] <span class="hljs-comment">/* setup_range_conditions */</span>,<br>                  <span class="hljs-attr">&quot;group_index_range&quot;</span>: &#123;<br>                    <span class="hljs-attr">&quot;chosen&quot;</span>: <span class="hljs-literal">false</span>,<br>                    <span class="hljs-attr">&quot;cause&quot;</span>: <span class="hljs-string">&quot;not_group_by_or_distinct&quot;</span><br>                  &#125; <span class="hljs-comment">/* group_index_range */</span>,<br>                  <span class="hljs-attr">&quot;skip_scan_range&quot;</span>: &#123;<br>                    <span class="hljs-attr">&quot;potential_skip_scan_indexes&quot;</span>: [<br>                      &#123;<br>                        <span class="hljs-attr">&quot;index&quot;</span>: <span class="hljs-string">&quot;idx_name_age_position&quot;</span>,<br>                        <span class="hljs-attr">&quot;usable&quot;</span>: <span class="hljs-literal">false</span>,<br>                        <span class="hljs-attr">&quot;cause&quot;</span>: <span class="hljs-string">&quot;query_references_nonkey_column&quot;</span><br>                      &#125;<br>                    ] <span class="hljs-comment">/* potential_skip_scan_indexes */</span><br>                  &#125; <span class="hljs-comment">/* skip_scan_range */</span>,<br>                  <span class="hljs-attr">&quot;analyzing_range_alternatives&quot;</span>: &#123; -- 分析各个索引使用的成本<br>                    <span class="hljs-attr">&quot;range_scan_alternatives&quot;</span>: [<br>                      &#123;<br>                        <span class="hljs-attr">&quot;index&quot;</span>: <span class="hljs-string">&quot;idx_name_age_position&quot;</span>,<br>                        <span class="hljs-attr">&quot;ranges&quot;</span>: [<br>                          <span class="hljs-string">&quot;a &lt; name&quot;</span><br>                        ] <span class="hljs-comment">/* ranges */</span>,<br>                        <span class="hljs-attr">&quot;index_dives_for_eq_ranges&quot;</span>: <span class="hljs-literal">true</span>,<br>                        <span class="hljs-attr">&quot;rowid_ordered&quot;</span>: <span class="hljs-literal">false</span>,<br>                        <span class="hljs-attr">&quot;using_mrr&quot;</span>: <span class="hljs-literal">true</span>,<br>                        <span class="hljs-attr">&quot;index_only&quot;</span>: <span class="hljs-literal">false</span>, -- 是否使用了覆盖索引<br>                        <span class="hljs-attr">&quot;rows&quot;</span>: <span class="hljs-number">2799198</span>, -- 要扫描的行数<br>                        <span class="hljs-attr">&quot;cost&quot;</span>: <span class="hljs-number">2.08e6</span>, -- 要花费的时间<br>                        <span class="hljs-attr">&quot;chosen&quot;</span>: <span class="hljs-literal">false</span>, -- 是否选择使用这个索引<br>                        <span class="hljs-attr">&quot;cause&quot;</span>: <span class="hljs-string">&quot;cost&quot;</span> -- 不选择的原因：开销比较大<br>                      &#125;<br>                    ] <span class="hljs-comment">/* range_scan_alternatives */</span>,<br>                    <span class="hljs-attr">&quot;analyzing_roworder_intersect&quot;</span>: &#123;<br>                      <span class="hljs-attr">&quot;usable&quot;</span>: <span class="hljs-literal">false</span>,<br>                      <span class="hljs-attr">&quot;cause&quot;</span>: <span class="hljs-string">&quot;too_few_roworder_scans&quot;</span><br>                    &#125; <span class="hljs-comment">/* analyzing_roworder_intersect */</span><br>                  &#125; <span class="hljs-comment">/* analyzing_range_alternatives */</span><br>                &#125; <span class="hljs-comment">/* range_analysis */</span><br>              &#125;<br>            ] <span class="hljs-comment">/* rows_estimation */</span><br>          &#125;,<br>          &#123;<br>            <span class="hljs-attr">&quot;considered_execution_plans&quot;</span>: [<br>              &#123;<br>                <span class="hljs-attr">&quot;plan_prefix&quot;</span>: [<br>                ] <span class="hljs-comment">/* plan_prefix */</span>,<br>                <span class="hljs-attr">&quot;table&quot;</span>: <span class="hljs-string">&quot;`employees`&quot;</span>,<br>                <span class="hljs-attr">&quot;best_access_path&quot;</span>: &#123; -- 最优访问路径<br>                  <span class="hljs-attr">&quot;considered_access_paths&quot;</span>: [ -- 最后选择的访问路径<br>                    &#123;<br>                      <span class="hljs-attr">&quot;rows_to_scan&quot;</span>: <span class="hljs-number">5598397</span>, -- 全表扫描的行数<br>                      <span class="hljs-attr">&quot;access_type&quot;</span>: <span class="hljs-string">&quot;scan&quot;</span>, -- 全表扫描<br>                      <span class="hljs-attr">&quot;resulting_rows&quot;</span>: <span class="hljs-number">5.6e6</span>, -- 结果的行数<br>                      <span class="hljs-attr">&quot;cost&quot;</span>: <span class="hljs-number">576655</span>, -- 花费的时间<br>                      <span class="hljs-attr">&quot;chosen&quot;</span>: <span class="hljs-literal">true</span>, -- 选择这种方式<br>                      <span class="hljs-attr">&quot;use_tmp_table&quot;</span>: <span class="hljs-literal">true</span><br>                    &#125;<br>                  ] <span class="hljs-comment">/* considered_access_paths */</span><br>                &#125; <span class="hljs-comment">/* best_access_path */</span>,<br>                <span class="hljs-attr">&quot;condition_filtering_pct&quot;</span>: <span class="hljs-number">100</span>,<br>                <span class="hljs-attr">&quot;rows_for_plan&quot;</span>: <span class="hljs-number">5.6e6</span>,<br>                <span class="hljs-attr">&quot;cost_for_plan&quot;</span>: <span class="hljs-number">576655</span>,<br>                <span class="hljs-attr">&quot;sort_cost&quot;</span>: <span class="hljs-number">5.6e6</span>,<br>                <span class="hljs-attr">&quot;new_cost_for_plan&quot;</span>: <span class="hljs-number">6.18e6</span>,<br>                <span class="hljs-attr">&quot;chosen&quot;</span>: <span class="hljs-literal">true</span><br>              &#125;<br>            ] <span class="hljs-comment">/* considered_execution_plans */</span><br>          &#125;,<br>          &#123;<br>            <span class="hljs-attr">&quot;attaching_conditions_to_tables&quot;</span>: &#123;<br>              <span class="hljs-attr">&quot;original_condition&quot;</span>: <span class="hljs-string">&quot;(`employees`.`name` &gt; &#x27;a&#x27;)&quot;</span>,<br>              <span class="hljs-attr">&quot;attached_conditions_computation&quot;</span>: [<br>              ] <span class="hljs-comment">/* attached_conditions_computation */</span>,<br>              <span class="hljs-attr">&quot;attached_conditions_summary&quot;</span>: [<br>                &#123;<br>                  <span class="hljs-attr">&quot;table&quot;</span>: <span class="hljs-string">&quot;`employees`&quot;</span>,<br>                  <span class="hljs-attr">&quot;attached&quot;</span>: <span class="hljs-string">&quot;(`employees`.`name` &gt; &#x27;a&#x27;)&quot;</span><br>                &#125;<br>              ] <span class="hljs-comment">/* attached_conditions_summary */</span><br>            &#125; <span class="hljs-comment">/* attaching_conditions_to_tables */</span><br>          &#125;,<br>          &#123;<br>            <span class="hljs-attr">&quot;optimizing_distinct_group_by_order_by&quot;</span>: &#123;<br>              <span class="hljs-attr">&quot;simplifying_order_by&quot;</span>: &#123;<br>                <span class="hljs-attr">&quot;original_clause&quot;</span>: <span class="hljs-string">&quot;`employees`.`position`&quot;</span>,<br>                <span class="hljs-attr">&quot;items&quot;</span>: [<br>                  &#123;<br>                    <span class="hljs-attr">&quot;item&quot;</span>: <span class="hljs-string">&quot;`employees`.`position`&quot;</span><br>                  &#125;<br>                ] <span class="hljs-comment">/* items */</span>,<br>                <span class="hljs-attr">&quot;resulting_clause_is_simple&quot;</span>: <span class="hljs-literal">true</span>,<br>                <span class="hljs-attr">&quot;resulting_clause&quot;</span>: <span class="hljs-string">&quot;`employees`.`position`&quot;</span><br>              &#125; <span class="hljs-comment">/* simplifying_order_by */</span><br>            &#125; <span class="hljs-comment">/* optimizing_distinct_group_by_order_by */</span><br>          &#125;,<br>          &#123;<br>            <span class="hljs-attr">&quot;reconsidering_access_paths_for_index_ordering&quot;</span>: &#123;<br>              <span class="hljs-attr">&quot;clause&quot;</span>: <span class="hljs-string">&quot;ORDER BY&quot;</span>,<br>              <span class="hljs-attr">&quot;steps&quot;</span>: [<br>              ] <span class="hljs-comment">/* steps */</span>,<br>              <span class="hljs-attr">&quot;index_order_summary&quot;</span>: &#123;<br>                <span class="hljs-attr">&quot;table&quot;</span>: <span class="hljs-string">&quot;`employees`&quot;</span>,<br>                <span class="hljs-attr">&quot;index_provides_order&quot;</span>: <span class="hljs-literal">false</span>,<br>                <span class="hljs-attr">&quot;order_direction&quot;</span>: <span class="hljs-string">&quot;undefined&quot;</span>,<br>                <span class="hljs-attr">&quot;index&quot;</span>: <span class="hljs-string">&quot;unknown&quot;</span>,<br>                <span class="hljs-attr">&quot;plan_changed&quot;</span>: <span class="hljs-literal">false</span><br>              &#125; <span class="hljs-comment">/* index_order_summary */</span><br>            &#125; <span class="hljs-comment">/* reconsidering_access_paths_for_index_ordering */</span><br>          &#125;,<br>          &#123;<br>            <span class="hljs-attr">&quot;finalizing_table_conditions&quot;</span>: [<br>              &#123;<br>                <span class="hljs-attr">&quot;table&quot;</span>: <span class="hljs-string">&quot;`employees`&quot;</span>,<br>                <span class="hljs-attr">&quot;original_table_condition&quot;</span>: <span class="hljs-string">&quot;(`employees`.`name` &gt; &#x27;a&#x27;)&quot;</span>,<br>                <span class="hljs-attr">&quot;final_table_condition   &quot;</span>: <span class="hljs-string">&quot;(`employees`.`name` &gt; &#x27;a&#x27;)&quot;</span><br>              &#125;<br>            ] <span class="hljs-comment">/* finalizing_table_conditions */</span><br>          &#125;,<br>          &#123;<br>            <span class="hljs-attr">&quot;refine_plan&quot;</span>: [<br>              &#123;<br>                <span class="hljs-attr">&quot;table&quot;</span>: <span class="hljs-string">&quot;`employees`&quot;</span><br>              &#125;<br>            ] <span class="hljs-comment">/* refine_plan */</span><br>          &#125;,<br>          &#123;<br>            <span class="hljs-attr">&quot;considering_tmp_tables&quot;</span>: [<br>              &#123;<br>                <span class="hljs-attr">&quot;adding_sort_to_table&quot;</span>: <span class="hljs-string">&quot;employees&quot;</span><br>              &#125; <span class="hljs-comment">/* filesort */</span><br>            ] <span class="hljs-comment">/* considering_tmp_tables */</span><br>          &#125;<br>        ] <span class="hljs-comment">/* steps */</span><br>      &#125; <span class="hljs-comment">/* join_optimization */</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">&quot;join_execution&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;select#&quot;</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">&quot;steps&quot;</span>: [<br>          &#123;<br>            <span class="hljs-attr">&quot;sorting_table&quot;</span>: <span class="hljs-string">&quot;employees&quot;</span>,<br>            <span class="hljs-attr">&quot;filesort_information&quot;</span>: [<br>              &#123;<br>                <span class="hljs-attr">&quot;direction&quot;</span>: <span class="hljs-string">&quot;asc&quot;</span>,<br>                <span class="hljs-attr">&quot;expression&quot;</span>: <span class="hljs-string">&quot;`employees`.`position`&quot;</span><br>              &#125;<br>            ] <span class="hljs-comment">/* filesort_information */</span>,<br>            <span class="hljs-attr">&quot;filesort_priority_queue_optimization&quot;</span>: &#123;<br>              <span class="hljs-attr">&quot;usable&quot;</span>: <span class="hljs-literal">false</span>,<br>              <span class="hljs-attr">&quot;cause&quot;</span>: <span class="hljs-string">&quot;not applicable (no LIMIT)&quot;</span><br>            &#125; <span class="hljs-comment">/* filesort_priority_queue_optimization */</span>,<br>            <span class="hljs-attr">&quot;filesort_execution&quot;</span>: [<br>            ] <span class="hljs-comment">/* filesort_execution */</span>,<br>            <span class="hljs-attr">&quot;filesort_summary&quot;</span>: &#123;<br>              <span class="hljs-attr">&quot;memory_available&quot;</span>: <span class="hljs-number">262144</span>,<br>              <span class="hljs-attr">&quot;key_size&quot;</span>: <span class="hljs-number">40</span>,<br>              <span class="hljs-attr">&quot;row_size&quot;</span>: <span class="hljs-number">190</span>,<br>              <span class="hljs-attr">&quot;max_rows_per_buffer&quot;</span>: <span class="hljs-number">1379</span>,<br>              <span class="hljs-attr">&quot;num_rows_estimate&quot;</span>: <span class="hljs-number">5598397</span>,<br>              <span class="hljs-attr">&quot;num_rows_found&quot;</span>: <span class="hljs-number">5913852</span>,<br>              <span class="hljs-attr">&quot;num_initial_chunks_spilled_to_disk&quot;</span>: <span class="hljs-number">1954</span>,<br>              <span class="hljs-attr">&quot;peak_memory_used&quot;</span>: <span class="hljs-number">262144</span>,<br>              <span class="hljs-attr">&quot;sort_algorithm&quot;</span>: <span class="hljs-string">&quot;std::stable_sort&quot;</span>,<br>              <span class="hljs-attr">&quot;sort_mode&quot;</span>: <span class="hljs-string">&quot;&lt;fixed_sort_key, packed_additional_fields&gt;&quot;</span><br>            &#125; <span class="hljs-comment">/* filesort_summary */</span><br>          &#125;<br>        ] <span class="hljs-comment">/* steps */</span><br>      &#125; <span class="hljs-comment">/* join_execution */</span><br>    &#125;<br>  ] <span class="hljs-comment">/* steps */</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="三、SQL优化实战"><a href="#三、SQL优化实战" class="headerlink" title="三、SQL优化实战"></a>三、SQL优化实战</h1><h2 id="1-order-by优化"><a href="#1-order-by优化" class="headerlink" title="1.order by优化"></a>1.order by优化</h2><p>在排序应用场景中，很容易出现文件排序的问题，文件排序会对性能造成影响，因此需要优化</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sql"># <span class="hljs-keyword">using</span> filesort<br>Explain <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> employees <span class="hljs-keyword">where</span> name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;customer&#x27;</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> position;<br># 没有使用文件排序 <br>Explain <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> employees <span class="hljs-keyword">where</span> name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;customer&#x27;</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> age, position;<br># 不满足最左前缀法则，使用了文件排序<br>Explain <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> employees <span class="hljs-keyword">where</span> name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;customer&#x27;</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> position, age;<br># 满足最左前缀法则，使用索引排序<br>Explain <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> employees <span class="hljs-keyword">where</span> name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;customer&#x27;</span> <span class="hljs-keyword">and</span> age<span class="hljs-operator">=</span><span class="hljs-number">20</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> position, age;<br><span class="hljs-keyword">show</span> WARNINGS;<br><span class="hljs-comment">/* select#1 */</span> <span class="hljs-keyword">select</span> `db_mysql_pro`.`employees`.`id` <span class="hljs-keyword">AS</span> `id`,`db_mysql_pro`.`employees`.`name` <span class="hljs-keyword">AS</span> `name`,`db_mysql_pro`.`employees`.`age` <span class="hljs-keyword">AS</span> `age`,`db_mysql_pro`.`employees`.`position` <span class="hljs-keyword">AS</span> `position`,`db_mysql_pro`.`employees`.`hire_time` <span class="hljs-keyword">AS</span> `hire_time` <span class="hljs-keyword">from</span> `db_mysql_pro`.`employees` <span class="hljs-keyword">where</span> ((`db_mysql_pro`.`employees`.`age` <span class="hljs-operator">=</span> <span class="hljs-number">20</span>) <span class="hljs-keyword">and</span> (`db_mysql_pro`.`employees`.`name` <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;customer&#x27;</span>)) <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> `db_mysql_pro`.`employees`.`position`<br># 排序方向不同，没有使用索引排序<br>Explain <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> employees <span class="hljs-keyword">where</span> name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;customer&#x27;</span> <span class="hljs-keyword">and</span> age<span class="hljs-operator">=</span><span class="hljs-number">20</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> age, position <span class="hljs-keyword">desc</span>;<br># 使用范围查询，使用了文件排序<br>Explain <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> employees <span class="hljs-keyword">where</span> name <span class="hljs-keyword">in</span> (<span class="hljs-string">&#x27;customer&#x27;</span>,<span class="hljs-string">&#x27;aa&#x27;</span>) <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> age, position;<br># 使用范围查询，使用了文件排序<br>Explain <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> employees <span class="hljs-keyword">where</span> name <span class="hljs-operator">&gt;</span> <span class="hljs-string">&#x27;a&#x27;</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> name;<br></code></pre></td></tr></table></figure><p>优化手段：</p><ul><li>如果排序的字段创建了联合索引，那么尽量在业务不冲突的情况下，遵循最左前缀法则来写排序语句。</li><li>如果文件排序没办法避免，那么尽量想办法使用覆盖索引。all-&gt;index</li></ul><h2 id="2-group-by优化"><a href="#2-group-by优化" class="headerlink" title="2.group by优化"></a>2.group by优化</h2><p>group by 的原理是先排序后分组，因此对于group by 的优化参考order by</p><h2 id="3-文件排序的原理"><a href="#3-文件排序的原理" class="headerlink" title="3.文件排序的原理"></a>3.文件排序的原理</h2><p>在执行文件排序的时候，会把查询的数据的大小与系统变量：max_length_for_sort_data的大小进行比较（默认是1024字节）,如果比系统变量小，那么执行单路排序，反之则执行双路排序</p><ul><li> 单路排序</li></ul><p>​       把所有的数据扔到sort_buffer内存缓冲区中，进行排序，然后结束</p><ul><li><p>双路排序</p><p>取数据的排序字段和主键字段，在内存缓冲区中排序完成后，将主键字段做一次回表查询，获取完整数据。</p></li></ul><p><img src="/image/image-20210518144357614.png" alt="image-20210518144357614"></p><h2 id="4-分页优化"><a href="#4-分页优化" class="headerlink" title="4.分页优化"></a>4.分页优化</h2><p>对于这样的优化查询，mysql会把全部的10010数据拿到，并舍弃掉前面的10000条</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 一次行获取10010，再舍弃掉前10000条</span><br>Explain <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> employees limit <span class="hljs-number">1000000</span>,<span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><p> 如果在主键连续的情况下，可以使用主键来做条件，但是这种情况是很少见的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">Explain <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> employees <span class="hljs-keyword">where</span> id<span class="hljs-operator">&gt;</span><span class="hljs-number">100000</span> limit <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><p>对于主键不连续情况下的例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">Explain <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> employees <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> name limit <span class="hljs-number">1000000</span>,<span class="hljs-number">10</span><br><span class="hljs-comment">-- 通过先进行覆盖索引的查找，然后在使用join做连接查询获取所有数据。这样比全表扫描要快</span><br>explain <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> employees a <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> (<span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> employees <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> name limit <span class="hljs-number">1000000</span>,<span class="hljs-number">10</span>)  b <span class="hljs-keyword">on</span> a.id <span class="hljs-operator">=</span> b.id;<br></code></pre></td></tr></table></figure><h2 id="5-join优化"><a href="#5-join优化" class="headerlink" title="5.join优化"></a>5.join优化</h2><p>在join中会涉及到大表（数据量大）和小表（数据量小）的概念。MySQL内部优化器会根据关联字段是否创建了索引来使用不同的算法：</p><ul><li><p>Nlj(嵌套循环算法)：如果关联字段使用了索引，mysql会对小表做全表扫描，用小表的数据去和大表的数据去做索引字段的关联查询（type：ref）</p></li><li><p>bnlj（块嵌套循环算法）：如果关联字段没有使用索引，mysql会提供一个join buffer缓冲区，先把小表放到缓冲区中，然后全表扫描大表，把大表的数据和缓冲区中的小表数据在内存中进行匹配。</p></li></ul><p>结论：使用join查询时，一定要建立关联字段的索引，且两张表的关联字段在设计之初就要做到字段类型、长度是一致的，否则索引失效。</p><h2 id="6-in和exists优化"><a href="#6-in和exists优化" class="headerlink" title="6.in和exists优化"></a>6.in和exists优化</h2><p>在sql中如果A表是大表，B表是小表，那么使用in会更加合适。反之应该使用exists。</p><ul><li>in: B的数据量&lt;A的数据量</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> A <span class="hljs-keyword">where</span> id <span class="hljs-keyword">in</span> (<span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> B) <br># 相当于：<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> B)&#123; <span class="hljs-operator">/</span><span class="hljs-operator">/</span>B的数据量少，所以循环次数少。<br><br>   <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> A <span class="hljs-keyword">where</span> A.id <span class="hljs-operator">=</span> B.id<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>exists:  B的数据量&gt;A的数据量 (10: id 1. 2. 3. 4)</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> A <span class="hljs-keyword">where</span> <span class="hljs-keyword">exists</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">1</span> <span class="hljs-keyword">from</span> B <span class="hljs-keyword">where</span> B.id <span class="hljs-operator">=</span> A.id)  <span class="hljs-literal">true</span> <span class="hljs-operator">/</span> <span class="hljs-literal">false</span><br>等价于<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> A)&#123;<br>   <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> B <span class="hljs-keyword">where</span> B.id <span class="hljs-operator">=</span> A.id<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-count优化"><a href="#7-count优化" class="headerlink" title="7.count优化"></a>7.count优化</h2><p>对于count的优化应该是架构层面的优化，因为count的统计是在一个产品会经常出现，而且每个用户访问，所以对于访问频率过高的数据建议维护在缓存中。</p><p><img src="/image/image-20210518155019048.png" alt="image-20210518155019048"></p><h1 id="四、锁的定义和分类"><a href="#四、锁的定义和分类" class="headerlink" title="四、锁的定义和分类"></a>四、锁的定义和分类</h1><h2 id="1-锁的定义"><a href="#1-锁的定义" class="headerlink" title="1.锁的定义"></a>1.锁的定义</h2><p>锁是用来解决多个任务（线程、进程）在并发访问同一共享资源时带来的数据安全问题。虽然使用锁解决了数据安全问题，但是会带来性能的影响，频繁使用锁的程序的性能是必然很差的。</p><p>对于数据管理软件MySQL来说，必然会到任务的并发访问。那么MySQL是怎么样在数据安全和性能上做权衡的呢？——MVCC设计思想。</p><h2 id="2-锁的分类"><a href="#2-锁的分类" class="headerlink" title="2.锁的分类"></a>2.锁的分类</h2><h3 id="1）从性能上划分：乐观锁和悲观锁"><a href="#1）从性能上划分：乐观锁和悲观锁" class="headerlink" title="1）从性能上划分：乐观锁和悲观锁"></a>1）从性能上划分：乐观锁和悲观锁</h3><ul><li>悲观锁：悲观的认为当前的并发是非常严重的，所以在任何时候操作都是互斥。保证了线程的安全，但牺牲了并发性。——总有刁民要害朕。</li><li>乐观锁：乐观的认为当前的并发并不严重，因此对于读的情况，大家都可以进行，但是对于写的情况，再进行上锁。以CAS自旋锁，在某种情况下性能是ok的，但是频繁自旋会消耗很大的资源。——天网恢恢疏而不漏</li></ul><h3 id="2）从数据的操作细粒度上划分：表锁和行锁"><a href="#2）从数据的操作细粒度上划分：表锁和行锁" class="headerlink" title="2）从数据的操作细粒度上划分：表锁和行锁"></a>2）从数据的操作细粒度上划分：表锁和行锁</h3><ul><li>表锁：对整张表上锁</li><li>行锁：对表中的某一行上锁。</li></ul><h3 id="3）从数据库的操作类型上划分：读锁和写锁"><a href="#3）从数据库的操作类型上划分：读锁和写锁" class="headerlink" title="3）从数据库的操作类型上划分：读锁和写锁"></a>3）从数据库的操作类型上划分：读锁和写锁</h3><p>这两种锁都是属于悲观锁</p><ul><li>读锁（共享锁）：对于同一行数据进行”读“来说，是可以同时进行但是写不行。</li><li>写锁（拍他锁）：在上了写锁之后，及释放写锁之前，在整个过程中是不能进行任何的其他并发操作（其他任务的读和写是都不能进行的）。</li></ul><h2 id="3-表锁"><a href="#3-表锁" class="headerlink" title="3.表锁"></a>3.表锁</h2><p>对整张表进行上锁。MyISAM存储引擎是天然支持表锁的，也就是说在MyISAM的存储引擎的表中如果出现并发的情况，将会出现表锁的效果。MyISAM不支持事务。InnoDB支持事务</p><p>在InnoDB中上一下表锁:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 对一张表上读锁<span class="hljs-operator">/</span>写锁格式：<br>lock <span class="hljs-keyword">table</span> 表名 read<span class="hljs-operator">/</span>write;<br># 例子<br>lock <span class="hljs-keyword">table</span> tb_book read;<br># 查看当前会话对所有表的上锁情况<br><span class="hljs-keyword">show</span> <span class="hljs-keyword">open</span> tables;<br># 释放当前会话的所有锁<br>unlock tables;<br></code></pre></td></tr></table></figure><p>读锁： 其他任务可以进行读，但是不能进行写</p><p>写锁：其他任务不能进行读和写。</p><h2 id="4-行锁"><a href="#4-行锁" class="headerlink" title="4.行锁"></a>4.行锁</h2><p>MyISAM只支持表锁，但不支持行锁，InnoDB可以支持行锁。</p><p>在并发事务里，每个事务的增删改的操作相当于是上了行锁。</p><p>上行锁的方式：</p><ul><li>update tb_book set name=’qfjava2101’ where id=8;  对id是8的这行数据上了行锁。</li><li>select * from tb_book where id=5 for update; 对id是5的这行数据上了行锁。</li></ul><h1 id="五、MVCC设计思想"><a href="#五、MVCC设计思想" class="headerlink" title="五、MVCC设计思想"></a>五、MVCC设计思想</h1><p>MySQL为了权衡数据安全和性能，使用了MVCC多版本并发控制的设计。</p><h2 id="1-事务的特性"><a href="#1-事务的特性" class="headerlink" title="1.事务的特性"></a>1.事务的特性</h2><ul><li>原子性：一个事务是一个最小的操作单位（原子），多条sql语句在一个事务中要么同时成功，要么同时失败。</li><li>一致性：事务提交之前和回滚之后的数据是一致的。</li><li>持久性：事务一旦提交，对数据的影响是持久的。</li><li>隔离性：多个事务在并发访问下，提供了一套隔离机制，不同的隔离级别会有不同的并发效果。</li></ul><h2 id="2-事务的隔离级别"><a href="#2-事务的隔离级别" class="headerlink" title="2.事务的隔离级别"></a>2.事务的隔离级别</h2><ul><li>read uncommitted（读未提交）： 在一个事务中读取到另一个事务还没有提交的数据——脏读。</li><li>Read committed（读已提交）: 已经解决了脏读问题，在一个事务中只会读取另一个事务已提交的数据，这种情况会出现不可重复读的问题。就是：在事务中重复读数据，数据的内容是不一样的。</li><li>repeatable read（可重复读）：在一个事务中每次读取的数据都是一致的，不会出现脏读和不可重复读的问题。会出现虚读（幻读）的问题。</li></ul><p>什么是幻读：</p><p><img src="/image/image-20210519100046820.png" alt="image-20210519100046820"></p><p>解决方案：</p><p>通过上行锁来解决虚读问题：</p><img src="/image/image-20210519100825916.png" alt="image-20210519100825916" style="zoom:50%;" /><ul><li>Serializable:串行化的隔离界别直接不允许事务的并发发生，不存在任何的并发性。相当于锁表，性能非常差，一般都不考虑</li></ul><p>脏读、不可重复读、虚读（幻读）</p><h2 id="3-MVCC思想解读"><a href="#3-MVCC思想解读" class="headerlink" title="3.MVCC思想解读"></a>3.MVCC思想解读</h2><p>MySQL在读和写的操作中，对读的性能做了并发性的保障，让所有的读都是快照读，对于写的时候，进行版本控制，如果真实数据的版本比快照版本要新，那么写之前就要进行版本（快照）更新，这样就可以既能够提高读的并发性，又能够保证写的数据安全。</p><p><img src="/image/image-20210519095148255.png" alt="image-20210519095148255"></p><h1 id="六、死锁和间隙锁"><a href="#六、死锁和间隙锁" class="headerlink" title="六、死锁和间隙锁"></a>六、死锁和间隙锁</h1><h2 id="1-死锁"><a href="#1-死锁" class="headerlink" title="1.死锁"></a>1.死锁</h2><p>所谓的死锁，就是开启的锁没有办法关闭，导致资源的访问因为无法获得锁而处于阻塞状态。</p><p>演示：事务A和事物B相互持有对方需要的锁而不释放，造成死锁的情况。</p><p><img src="/image/image-20210519104203183.png" alt="image-20210519104203183"></p><h2 id="2-间隙锁"><a href="#2-间隙锁" class="headerlink" title="2.间隙锁"></a>2.间隙锁</h2><p>行锁只能对某一行上锁，如果相对某一个范围上锁，就可以使用间隙锁。间隙锁给的条件where id&gt;13 and id&lt;19，会对13 和19 所处的间隙进行上锁。</p><p><img src="/image/image-20210519105034758.png" alt="image-20210519105034758"></p>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>进程管理</title>
    <link href="/2021/05/22/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
    <url>/2021/05/22/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="一、进程的组成、组织、特征"><a href="#一、进程的组成、组织、特征" class="headerlink" title="一、进程的组成、组织、特征"></a>一、进程的组成、组织、特征</h1><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h2><p><img src="/image/image-20220227201454439.png" alt="进程的定义"></p><h2 id="2-组成"><a href="#2-组成" class="headerlink" title="2. 组成"></a>2. 组成</h2><p><img src="/image/image-20220227201626910.png" alt="进程的组成1"></p><p><img src="/image/image-20220227201812879.png" alt="进程的组成2"></p><h2 id="3-组织"><a href="#3-组织" class="headerlink" title="3. 组织"></a>3. 组织</h2><p><img src="/image/image-20220227201901221.png" alt="进程的组织"></p><h2 id="4-特征"><a href="#4-特征" class="headerlink" title="4. 特征"></a>4. 特征</h2><p><img src="/image/image-20220227202152797.png" alt="进程的特征"></p><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h2><p><img src="/image/image-20220227202259530.png" alt="进程的组成、组织、特征总结"></p><h1 id="二、进程的状态与转换"><a href="#二、进程的状态与转换" class="headerlink" title="二、进程的状态与转换"></a>二、进程的状态与转换</h1><h2 id="1-状态"><a href="#1-状态" class="headerlink" title="1. 状态"></a>1. 状态</h2><p><img src="/image/image-20220227202532797.png" alt="进程的三种基本状态"></p><p><img src="/image/image-20220227202732550.png" alt="进程的另外两种状态"></p><h2 id="2-转换"><a href="#2-转换" class="headerlink" title="2. 转换"></a>2. 转换</h2><p><img src="/image/image-20220227202942560.png" alt="进程状态的转换"></p><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h2><p><img src="/image/image-20220227203111324.png" alt="进程的状态与转换总结"></p><h1 id="三、进程控制"><a href="#三、进程控制" class="headerlink" title="三、进程控制"></a>三、进程控制</h1><h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h2><p><img src="/image/image-20220227203231325.png" alt="什么是进程控制"></p><p><strong>简而言之，就是上图中的绿色箭头部分</strong></p><h2 id="2-实现"><a href="#2-实现" class="headerlink" title="2. 实现"></a>2. 实现</h2><p><img src="/image/image-20220227203447962.png" alt="如何实现进程控制"></p><p><img src="/image/image-20220227203641995.png" alt="原语"></p><p><img src="/image/image-20220227203823359.png" alt="进程控制相关的原语"></p><h2 id="3-总结-1"><a href="#3-总结-1" class="headerlink" title="3. 总结"></a>3. 总结</h2><p><img src="/image/image-20220227204047031.png" alt="进程控制总结"></p><h1 id="四、进程通信"><a href="#四、进程通信" class="headerlink" title="四、进程通信"></a>四、进程通信</h1><h2 id="1-概念-1"><a href="#1-概念-1" class="headerlink" title="1. 概念"></a>1. 概念</h2><p><img src="/image/image-20220227204232904.png" alt="什么是进程通信"></p><h2 id="2-方式一-共享存储"><a href="#2-方式一-共享存储" class="headerlink" title="2. 方式一 - 共享存储"></a>2. 方式一 - 共享存储</h2><p><img src="/image/image-20220227204451838.png" alt="方式一、共享存储"></p><h2 id="3-方式二-管道通信"><a href="#3-方式二-管道通信" class="headerlink" title="3. 方式二 - 管道通信"></a>3. 方式二 - 管道通信</h2><p><img src="/image/image-20220227204706093.png" alt="方式二、管道通信"></p><h2 id="4-方式三-消息传递"><a href="#4-方式三-消息传递" class="headerlink" title="4. 方式三 - 消息传递"></a>4. 方式三 - 消息传递</h2><p><img src="/image/image-20220227204914943.png" alt="方式三、消息传递"></p><h2 id="5-总结-1"><a href="#5-总结-1" class="headerlink" title="5. 总结"></a>5. 总结</h2><p><img src="/image/image-20220227204954027.png" alt="进程通信总结"></p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>操作系统概述</title>
    <link href="/2021/05/21/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/"/>
    <url>/2021/05/21/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h1><p><img src="/image/image-20220226202437943.png" alt="操作系统的概念"></p><p><img src="/image/image-20220226202523955.png" alt="概念、概念和目标总结"></p><h1 id="二、特征"><a href="#二、特征" class="headerlink" title="二、特征"></a>二、特征</h1><p><img src="/image/image-20220226203458845.png" alt="并发"></p><p><img src="/image/image-20220226203624139.png" alt="共享"></p><p><img src="/image/image-20220226203717880.png" alt="并发和共享的关系"></p><p><img src="/image/image-20220226203748897.png" alt="虚拟——空分复用技术"></p><p><img src="/image/image-20220226203821720.png" alt="虚拟——时分复用技术"></p><p><img src="/image/image-20220226203417747.png" alt="虚拟"></p><p><img src="/image/image-20220226204106654.png" alt="异步"></p><p><img src="/image/image-20220226204154159.png" alt="操作系统的特征总结"></p><h1 id="三、运行机制"><a href="#三、运行机制" class="headerlink" title="三、运行机制"></a>三、运行机制</h1><h2 id="1-指令"><a href="#1-指令" class="headerlink" title="1. 指令"></a>1. 指令</h2><p>就是<strong>处理器（CPU）</strong>能识别、执行的最基本命令</p><p><img src="/image/image-20220226210415389.png" alt="特权指令和非特权指令"></p><h2 id="2-处理器状态"><a href="#2-处理器状态" class="headerlink" title="2. 处理器状态"></a>2. 处理器状态</h2><p><img src="/image/image-20220226210705928.png" alt="用户态（目态）和核心态（管态）"></p><h2 id="3-程序"><a href="#3-程序" class="headerlink" title="3. 程序"></a>3. 程序</h2><p><img src="/image/image-20220226210746776.png" alt="内核程序和应用程序"></p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><p><img src="/image/image-20220226205038994.png" alt="运行机制总结"></p><p><strong>操作系统中的哪些功能应该由内核程序实现呢？</strong></p><h1 id="四、体系结构"><a href="#四、体系结构" class="headerlink" title="四、体系结构"></a>四、体系结构</h1><p><img src="/image/image-20220226211111221.png" alt="计算机系统的层次结构"></p><h2 id="1-内核"><a href="#1-内核" class="headerlink" title="1. 内核"></a>1. 内核</h2><p><img src="/image/image-20220226211732408.png" alt="操作系统内核"></p><p><img src="/image/image-20220226212018421.png" alt="大内核和微内核"></p><p><img src="/image/image-20220226212139023.png" alt="运行机制和体系结构总结"></p><h1 id="五、中断和异常"><a href="#五、中断和异常" class="headerlink" title="五、中断和异常"></a>五、中断和异常</h1><h2 id="1-中断"><a href="#1-中断" class="headerlink" title="1. 中断"></a>1. 中断</h2><p><img src="/image/image-20220226213110628.png" alt="中断的概念和作用"></p><p><img src="/image/image-20220226213302982.png" alt="中断的分类（第一种分类方式）"></p><p><img src="/image/image-20220226213400165.png" alt="中断的分类（第二种分类方式）"></p><p><img src="/image/image-20220226213600825.png" alt="外中断的处理过程"></p><h2 id="2-总结"><a href="#2-总结" class="headerlink" title="2. 总结"></a>2. 总结</h2><p><img src="/image/image-20220226213728869.png" alt="中断和异常总结"></p><h1 id="六、系统调用"><a href="#六、系统调用" class="headerlink" title="六、系统调用"></a>六、系统调用</h1><h2 id="1-分类"><a href="#1-分类" class="headerlink" title="1. 分类"></a>1. 分类</h2><p><img src="/image/image-20220226214534856.png" alt="系统调用按功能分类"></p><h2 id="2-与库函数的区别"><a href="#2-与库函数的区别" class="headerlink" title="2. 与库函数的区别"></a>2. 与库函数的区别</h2><p><img src="/image/image-20220226214502407.png" alt="系统调用和库函数的区别"></p><h2 id="3-调用细节"><a href="#3-调用细节" class="headerlink" title="3. 调用细节"></a>3. 调用细节</h2><p><img src="/image/image-20220226215027712.png" alt="系统调用背后的过程"></p><h2 id="4-总结-1"><a href="#4-总结-1" class="headerlink" title="4. 总结"></a>4. 总结</h2><p><img src="/image/image-20220226215159460.png" alt="系统调用总结"></p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JUC</title>
    <link href="/1901/01/01/%E9%9D%A2%E7%BB%8F/JUC/"/>
    <url>/1901/01/01/%E9%9D%A2%E7%BB%8F/JUC/</url>
    
    <content type="html"><![CDATA[<h1 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h1><h2 id="synchronized的锁优化有哪些、讲一下锁状态和锁升级"><a href="#synchronized的锁优化有哪些、讲一下锁状态和锁升级" class="headerlink" title="synchronized的锁优化有哪些、讲一下锁状态和锁升级"></a>synchronized的锁优化有哪些、讲一下锁状态和锁升级</h2><ol><li><p>优化 Monitor 这类的重量级锁 （轻量级锁）<br>每个线程中的栈帧都会包含一个锁记录对象（Lock Record），<br>内部可以通过 CAS 的方式存储锁定对象的 Mark Word（从而不再一开始就使用 Monitor）</p></li><li><p>自旋优化<br>当升级到重量级锁竞争时，如果发生竞争失败不会立即进入到 EntryList 进行阻塞，<br>而是会重试一会儿再阻塞</p></li><li><p>优化轻量级锁重入（偏向锁）<br>轻量级锁在没有竞争时，每次重入操作仍需要 CAS，为了避免性能降低，<br>所以引入了偏向锁优化轻量级锁重入，在第一次 CAS 时会将线程的 ID 写入对象的 Mark Word 中<br>此后线程发现锁定对象中的 Mark Word 存在自己的线程 ID，则不会再次进行 CAS，<br>因为这个对象就归这个线程所有</p></li></ol><hr><h2 id="voliate关键字"><a href="#voliate关键字" class="headerlink" title="voliate关键字"></a>voliate关键字</h2><p>原理：<br>内存屏障，Memory Barrier（Memory Fence）<br>对 volatile 变量的写指令后会加入写屏障（屏障之前，对贡献变量的修改都是会同步到主存中）<br>对 volatile 变量的读指令前会加入读屏障（屏障之后，对共享变量的读取都是主存中的新数据）</p><p>作用：<br>一、确保可见性<br>二、确保有序性</p><p>保持内存可见性。所有线程都能看到共享内存的最新状态。每次读取前必须先从主内存刷新最新的值。每次写入后必须立即同步回主内存当中。</p><p>禁止指令重排。提供内存屏障的方式来防止指令被重排，编译器在生成字节码文件时，会在指令序列中插入内存屏障来禁止特定类型的处理器重排序。</p><hr><h1 id="主要类"><a href="#主要类" class="headerlink" title="主要类"></a>主要类</h1><h2 id="什么情况下用-ReentrantLock-而不用-synchronized"><a href="#什么情况下用-ReentrantLock-而不用-synchronized" class="headerlink" title="什么情况下用 ReentrantLock 而不用 synchronized"></a>什么情况下用 ReentrantLock 而不用 synchronized</h2><ol><li>阻塞时可被中断</li><li>可以设置获取锁的超时时间</li><li>可以设置为公平锁</li><li>支持多个条件变量（condition）</li></ol><hr><h2 id="Java的中断怎么实现，为什么-synchronized-不能中断，ReentrantLock-可以中断"><a href="#Java的中断怎么实现，为什么-synchronized-不能中断，ReentrantLock-可以中断" class="headerlink" title="Java的中断怎么实现，为什么 synchronized 不能中断，ReentrantLock 可以中断"></a>Java的中断怎么实现，为什么 synchronized 不能中断，ReentrantLock 可以中断</h2><ol><li>synchronized 是在JVM层面上实现的，在字节码中会有 monitorenter、monitorexit 介入，<br> 会自动释放锁定（代码执行完成或者出现异常）</li><li>ReentrantLock 是实现 lock 接口和内部类继承 AQS 实现的，是通过代码实现的</li></ol><hr><h2 id="ReentrantLock-怎么实现的（AQS）"><a href="#ReentrantLock-怎么实现的（AQS）" class="headerlink" title="ReentrantLock 怎么实现的（AQS）"></a>ReentrantLock 怎么实现的（AQS）</h2><p>通过实现 lock 接口以及结合继承了 AQS 的内部类 Sync 实现的</p><hr><h2 id="AQS源码看过吗-能说一下么？"><a href="#AQS源码看过吗-能说一下么？" class="headerlink" title="AQS源码看过吗?能说一下么？"></a>AQS源码看过吗?能说一下么？</h2><ol><li>使用 CLH 队列，实现线程阻塞等待以及被唤醒时锁分配的机制</li><li>独享模式：</li></ol><figure class="highlight pf"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><pre><code class="hljs pf"><span class="hljs-number">2.1</span> acquire 操作：<br>    <span class="hljs-number">2.1</span>.<span class="hljs-number">1</span>. 查看当前是否有线程占用锁，没有则修改 <span class="hljs-keyword">state</span> 和 exclusiveOwnerThread <br>    为当前线程，否则加入 CLH 队列<br>    <span class="hljs-number">2.1</span>.<span class="hljs-number">2</span>. 加入 CLH 队列的第一个线程，需要初始化头节点，并设置头节点的 waitstatus 为 -<span class="hljs-number">1</span>，<br>    next 节点指向当前线程，当前线程的 pre 指向头节点<br>    <span class="hljs-number">2.1</span>.<span class="hljs-number">3</span>. 当有新的线程加入 CLH 队列时，会重复将 pre 指向上一个节点，上一个节点<br>    的 next 节点指向当前线程并设置上一个节点的 waitstatus 为 -<span class="hljs-number">1</span>，而自己的 waitstatus <br>    设置为 <span class="hljs-number">0</span>。重复此操作。<br>    <span class="hljs-number">2.1</span>.<span class="hljs-number">4</span>. 当加入到 CLH 队列的线程获取到锁时，会修改 <span class="hljs-keyword">state</span> 和持有锁的线程修改为当前<br>    线程，并且将 head 移至到当前节点，pre 节点也相应会断掉，之前的 head 节点会被 GC 回收<br><span class="hljs-number">2.2</span> release 操作：<br>    <span class="hljs-number">2.2</span>.<span class="hljs-number">1</span>. 检查当前线程是否和 exclusiveOwnerThread 是同一个线程<br>    <span class="hljs-number">2.2</span>.<span class="hljs-number">2</span>. 修改锁的状态 status ，具体什么是有锁，什么是无锁，由 AQS 的子类定义<br>    <span class="hljs-number">2.2</span>.<span class="hljs-number">3</span>. 唤醒队列中头节点的下一个节点的线程<br>        <span class="hljs-number">2.2</span>.<span class="hljs-number">3.1</span>. 将自己的 waitStatus 设为 <span class="hljs-number">0</span><br>        <span class="hljs-number">2.2</span>.<span class="hljs-number">3.2</span>. 唤醒线程<br></code></pre></td></tr></table></figure><ol start="3"><li>共享模式：</li></ol><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs pf"><span class="hljs-number">3.1</span> acquire 操作：<br><span class="hljs-number">3.1</span>.<span class="hljs-number">1</span>. 检查当前的 <span class="hljs-keyword">state</span>，是否去持有锁。根据不同的 AQS 子类实现，来允许是否<br>可以多个线程持有锁比如 CountDownLatch 类不允许，而 ReentrantReadWriteLock 类是允许的<br>持有锁时只会去修改 <span class="hljs-keyword">state</span>，而不会去修改 exclusiveOwnerThread<br><span class="hljs-number">3.1</span>.<span class="hljs-number">2</span>. 其他情况与独享模式类似<br><br><span class="hljs-number">3.2</span> release 操作：<br><span class="hljs-number">3.2</span>.<span class="hljs-number">1</span>. 修改 <span class="hljs-keyword">state</span> 字段<br><span class="hljs-number">3.2</span>.<span class="hljs-number">2</span>. 唤醒队列中头节点的下一个节点，如果被唤醒的节点的下一个节点也是 SHARED 模式，<br>则一同唤醒<br></code></pre></td></tr></table></figure><ol start="4"><li>条件队列</li></ol><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs qml"><span class="hljs-number">4.1</span> <span class="hljs-keyword">await</span> 操作<br><span class="hljs-number">4.1</span><span class="hljs-number">.1</span>. 创建条件节点，如果是作为第一个节点加入，则需要初始化队列，<br>即初始化一个 head 节点，再把自己加入进去，作为 head 节点的 nextWaiter；<br>否则直接加入，并使上一个节点的 nextWaiter 指向自己<br><span class="hljs-number">4.1</span><span class="hljs-number">.2</span>. 释放当前线程占用的锁，执行 AQS 的 release 操作<br><span class="hljs-number">4.1</span><span class="hljs-number">.3</span>. 挂起当前线程<br><span class="hljs-number">4.1</span><span class="hljs-number">.4</span>. 被唤醒以后，执行 AQS 的 acquire 操作<br><span class="hljs-number">4.2</span> <span class="hljs-keyword">signal</span><span class="hljs-string"> 操作：</span><br><span class="hljs-number">4.2</span><span class="hljs-number">.1</span>. 将队列中的 firstWaiter 节点转移到同步队列中<br><span class="hljs-number">4.2</span><span class="hljs-number">.2</span>. 把刚刚加入到同步队列中的节点的前驱的 waitStatus 设置为 <span class="hljs-number">-1</span><br></code></pre></td></tr></table></figure><hr><h2 id="ThreadLocal，底层如何实现"><a href="#ThreadLocal，底层如何实现" class="headerlink" title="ThreadLocal，底层如何实现"></a>ThreadLocal，底层如何实现</h2><p>每个线程内都有一个ThreadLocalMap类型的成员变量，用来存储资源对象<br>ThreadLocal是JDK包提供的，它提供了线程本地变量，也就是如果你创建了一个ThreadLocal变量，<br>那么但凡有一个线程对这个变量进行 set 操作时，这个线程中的 threadLocals 属性就会被创建赋值<br>所以当多个线程操作这个变量时，实际操作的是自己本地内存里面的变量，从而避免了线程安全问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">set</span><span class="hljs-params">(T value)</span> </span>&#123;            <br>    Thread t = Thread.currentThread();<span class="hljs-comment">// 拿到当前线程</span><br>    ThreadLocalMap map = getMap(t);   <span class="hljs-comment">// 拿到当前线程的 threadLocals 属性</span><br>    <span class="hljs-keyword">if</span> (map != <span class="hljs-keyword">null</span>) &#123;                <br>        map.set(<span class="hljs-keyword">this</span>, value);         <span class="hljs-comment">// 不为空进行覆盖</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;                          <br>        createMap(t, value);          <span class="hljs-comment">// 为空则创建赋值</span><br>    &#125;                                 <br>&#125;                                     <br></code></pre></td></tr></table></figure><hr><h1 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h1><h2 id="Java并发包下的原子工具类，能说一下么？源码看过吗？"><a href="#Java并发包下的原子工具类，能说一下么？源码看过吗？" class="headerlink" title="Java并发包下的原子工具类，能说一下么？源码看过吗？"></a>Java并发包下的原子工具类，能说一下么？源码看过吗？</h2><p>AtomicBoolean<br>AtomicInteger<br>AtomicLong<br>AtomicReference<br>AtomicIntegerArray<br>AtomicLongArray<br>AtomicReferenceArray<br>都是以CAS方式确保原子性，但是可能会触发ABA问题</p><hr><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><h2 id="为什么使用CAS就能保证并发"><a href="#为什么使用CAS就能保证并发" class="headerlink" title="为什么使用CAS就能保证并发?"></a>为什么使用CAS就能保证并发?</h2><p>无需阻塞等待，立马执行，立马返回成功或失败</p><hr><h2 id="ABA问题及解决办法"><a href="#ABA问题及解决办法" class="headerlink" title="ABA问题及解决办法"></a>ABA问题及解决办法</h2><ol><li>AtomicStampedReference 需要我们传入整型变量作为版本号，来判定是否被更改过</li></ol><p>但是有时候，并不关心引用变量更改了几次，只是单纯的关心是否更改过，就使用：<br>2. AtomicMarkableReference 需要我们传入布尔变量作为标记，来判断是否被更改过</p><hr><h2 id="IO密集和CPU密集两种情况下，线程池里的线程数应该怎么设置"><a href="#IO密集和CPU密集两种情况下，线程池里的线程数应该怎么设置" class="headerlink" title="IO密集和CPU密集两种情况下，线程池里的线程数应该怎么设置"></a>IO密集和CPU密集两种情况下，线程池里的线程数应该怎么设置</h2><p>IO密集型的话，是指系统大部分时间在跟I/O交互，而这个时间线程不会占用CPU来处理，<br>即在这个时间范围内，可以由其他线程来使用CPU，因而可以多配置一些线程。 2 * n</p><p>CPU密集型的话，一般配置CPU处理器个数+1个线程， n + 1<br>所谓CPU密集型就是指系统大部分时间是在做程序正常的计算任务，<br>例如数字运算、赋值、分配内存、内存拷贝、循环、查找、排序等，这些处理都需要CPU来完成。</p><hr><h2 id="Java中创建多线程的方式有哪些"><a href="#Java中创建多线程的方式有哪些" class="headerlink" title="Java中创建多线程的方式有哪些"></a>Java中<strong>创建多线程的方式有哪些</strong></h2><p>一、继承Thread，重写run方法；方便传参，但不支持多继承<br>二、使用Runnable配合Thread；解耦强，灵活<br>三、FutureTask结合Thread；可以获得放回结果</p><hr><h1 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h1><h2 id="线程池有哪些参数"><a href="#线程池有哪些参数" class="headerlink" title="线程池有哪些参数"></a>线程池有哪些参数</h2><p>1.核心线程数<br>2.最大线程数<br>3.保持存活时间<br>4.时间单位<br>5.线程工厂<br>6.阻塞队列<br>7.拒绝策略</p><hr><h2 id="执行流程和拒绝策略是什么？"><a href="#执行流程和拒绝策略是什么？" class="headerlink" title="执行流程和拒绝策略是什么？"></a>执行流程和拒绝策略是什么？</h2><p>当一个任务传给线程池以后，可能有以下几种可能<br>    1.将任务分配给一个核心线程来执行<br>    2.核心线程都在执行任务，将任务放到阻塞队列workQueue中等待被执行<br>    3.阻塞队列满了，使用救急线程来执行任务；救急线程用完以后，超过生存时间（keepAliveTime）后会被释放<br>    4.任务总数大于了 最大线程数（maximumPoolSize）与阻塞队列容量的最大值（workQueue.capacity），使用拒接策略</p><hr>]]></content>
    
    
    <categories>
      
      <category>面经</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>MySQL</title>
    <link href="/1901/01/01/%E9%9D%A2%E7%BB%8F/MySQL/"/>
    <url>/1901/01/01/%E9%9D%A2%E7%BB%8F/MySQL/</url>
    
    <content type="html"><![CDATA[<h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><h2 id="什么数据结构"><a href="#什么数据结构" class="headerlink" title="什么数据结构"></a>什么数据结构</h2><p>B+树</p><hr><h2 id="MySQL的索引失效有哪些场景？"><a href="#MySQL的索引失效有哪些场景？" class="headerlink" title="MySQL的索引失效有哪些场景？"></a>MySQL的<strong>索引失效</strong>有哪些场景？</h2><ol><li>不符合最左匹配原则</li><li>在索引上使用计算、函数、类型的转换</li><li>使用了不等于</li><li>使用了 is null 或 is not null</li><li>使用了 like</li><li>字符串不加单引号</li></ol><h2 id="InnoDB引擎为什么使用B-树？"><a href="#InnoDB引擎为什么使用B-树？" class="headerlink" title="InnoDB引擎为什么使用B+树？"></a>InnoDB引擎为什么使用<strong>B+树</strong>？</h2><p><strong>（1）B+树空间利用率更高，可减少I/O次数</strong></p><p>一般来说，索引本身也很大，不可能全部存储在内存中，因此索引往往以索引文件的形式存储的磁盘上。这样的话，索引查找过程中就要产生磁盘I/O消耗。而因为B+树的内部节点只是作为索引使用，而不像B-树那样每个节点都需要存储硬盘指针。</p><p>也就是说：B+树中每个非叶节点没有指向某个关键字具体信息的指针，所以每一个节点可以存放更多的关键字数量，即一次性读入内存所需要查找的关键字也就越多，减少了I/O操作。<br>e.g.假设磁盘中的一个盘块容纳16bytes，而一个关键字2bytes，一个关键字具体信息指针2bytes。一棵9阶B-tree(一个结点最多8个关键字)的内 部结点需要2个盘快。而B+ 树内部结点只需要1个盘快。当需要把内部结点读入内存中的时候，B 树就比B+ 树多一次盘块查找时间(在磁盘中是盘片旋转的时间)。</p><p><strong>（2）增删文件（节点）时，效率更高</strong></p><p>因为B+树的叶子节点包含所有关键字，并以有序的链表结构存储，这样可很好提高增删效率，基于范围查询更好。</p><p><strong>（3）B+树的查询效率更加稳定</strong></p><p>因为B+树的每次查询过程中，都需要遍历从根节点到叶子节点的某条路径。所有关键字的查询路径长度相同，导致每一次查询的效率相当。</p><p>B-树的每个节点都有data域</p><hr><h2 id="为什么不适用-B-树"><a href="#为什么不适用-B-树" class="headerlink" title="为什么不适用 B- 树"></a>为什么不适用 B- 树</h2><p>B-树的每个节点都有data域，增加了 I/O 操作，而B+数除了叶子节点有数据其他没有</p><hr><h1 id="调优"><a href="#调优" class="headerlink" title="调优"></a>调优</h1><h2 id="MySQL的调优看过吗？有调优经验吗？"><a href="#MySQL的调优看过吗？有调优经验吗？" class="headerlink" title="MySQL的调优看过吗？有调优经验吗？"></a>MySQL的<strong>调优</strong>看过吗？有调优经验吗？</h2><p>确保命中索引，在复合索引的条件下符合最左匹配原则<br>分页优化：先通过覆盖索引查找，再使用join连接查询</p><figure class="highlight sql"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> A <span class="hljs-keyword">where</span> id <span class="hljs-keyword">in</span> (<span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> B) <br># 相当于：A <span class="hljs-operator">&gt;</span> B<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> B) &#123; <span class="hljs-operator">/</span><span class="hljs-operator">/</span>B的数据量少，所以循环次数少。<br>   <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> A <span class="hljs-keyword">where</span> A.id <span class="hljs-operator">=</span> B.id<br>&#125;<br><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> A <span class="hljs-keyword">where</span> <span class="hljs-keyword">exists</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">1</span> <span class="hljs-keyword">from</span> B <span class="hljs-keyword">where</span> B.id <span class="hljs-operator">=</span> A.id)  <span class="hljs-literal">true</span> <span class="hljs-operator">/</span> <span class="hljs-literal">false</span><br># 等价于 B <span class="hljs-operator">&gt;</span> A<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> A) &#123;<br>   <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> B <span class="hljs-keyword">where</span> B.id <span class="hljs-operator">=</span> A.id<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="如何发现慢SQL"><a href="#如何发现慢SQL" class="headerlink" title="如何发现慢SQL"></a>如何发现<strong>慢SQL</strong></h2><p>万能的 explain 语句</p><hr><h1 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h1><h3 id="MySQL中都有哪些锁？"><a href="#MySQL中都有哪些锁？" class="headerlink" title="MySQL中都有哪些锁？"></a>MySQL中都有<strong>哪些锁</strong>？</h3><ul><li>行锁</li><li>表锁</li></ul><hr><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><h2 id="基本语句，如何增加列？"><a href="#基本语句，如何增加列？" class="headerlink" title="基本语句，如何增加列？"></a>基本语句，如何增加列？</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">ALTERTABLE table_name <span class="hljs-keyword">ADD</span> column_name datatype<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>面经</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
